{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/link.yml","hash":"28fc434618bcb67610226aa0540afd035a6f5209","modified":1726689035820},{"_id":"source/_posts/java-implementing-agent-mode-zxwpxc.md","hash":"f8ce9e2fd2737367da1ffb03098fbe4c86c52aeb","modified":1734624757297},{"_id":"source/_posts/nacos-configuration-center-and-support-multi-configuration-files-zi2mmf.md","hash":"83405c4766958f83e3cc657917e1a1ebd6ec95e0","modified":1734624757297},{"_id":"source/_posts/nginx-configuration-tcp-agency-guide-kqsal.md","hash":"9dbeb8f5caae6bd83c6c7053ea5abccaac6953ad","modified":1734677220133},{"_id":"source/_posts/nginx-installation-deployment-z1jtjzq.md","hash":"be39a4776f526986c78572296290be2000d40b76","modified":1734677220133},{"_id":"source/_posts/the-difference-between-isa-havea-and-likea-1u8avc.md","hash":"0b91198c1a237b9223d98c157329cc457185f5d8","modified":1734624757297},{"_id":"source/about/index.md","hash":"39f9bc1be3417c80d3d66f67323560fc3822ee6b","modified":1726418203516},{"_id":"source/archives/index.md","hash":"81c922f95fe2c0846d07ac13317035fcf3a45f57","modified":1726418544195},{"_id":"source/categories/index.md","hash":"597f7e72f88718d9fc2607978ff139e4acf3e5f3","modified":1726417446870},{"_id":"source/link/index.md","hash":"89585b7a8b135dd6376fd8770b9a57713f7ba691","modified":1726417516232},{"_id":"source/tags/index.md","hash":"8d099aca7bc79c04f55376aef70234406b1fc555","modified":1726417470461},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1726415344461},{"_id":"themes/butterfly/README.md","hash":"4e01b47448d9f3a02afc04eef644e2321253f6f4","modified":1726415344461},{"_id":"themes/butterfly/README_CN.md","hash":"148da187d16033624ceccce8b8561835296f5a5a","modified":1726415344461},{"_id":"themes/butterfly/_config.yml","hash":"39fbabbbf1e89dd82a6ea21517c6c24b49e4dd98","modified":1726415344462},{"_id":"themes/butterfly/package.json","hash":"314b0271ba3f668d0d6081b499b2d24e90dab25e","modified":1726415344470},{"_id":"themes/butterfly/plugins.yml","hash":"d807fbb62163bb6fc5a83a24ebd69ac14cf45f67","modified":1726415344470},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1726415344461},{"_id":"themes/butterfly/languages/default.yml","hash":"90a6dc361de67532437d819a55ec64945ca5404b","modified":1726415344462},{"_id":"themes/butterfly/languages/en.yml","hash":"af5603b1a888f167dc80be6d53a19437b5cf6bef","modified":1726415344462},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"5004faee365139521f161babd66649a8107e4008","modified":1726415344462},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"03629d1d13a7be09d4933aa5dc0dcbe45e79140c","modified":1726415344462},{"_id":"themes/butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1726415344462},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1726415344462},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1726415344470},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1726415344470},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1726415344470},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1726415344470},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"6e34b565ea013812d5e363b6de5fa1f9078d4e12","modified":1726415344461},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1726415344461},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1726415344461},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1726415344461},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1726415344461},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1726415344462},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1726415344462},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1726415344462},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ecec62305aaa596bb1dfbb46c13d06fb5a9628cf","modified":1726415344462},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1726415344464},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1726415344464},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"db275f7fbe4438b54cd813b695f4834e10aa234f","modified":1726415344465},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1726415344465},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1726415344470},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1726415344471},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1726415344471},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1726415344471},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"2ac43fd4103ba3c6897da7c13015cb05f39fd695","modified":1726415344471},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"e196a99733d7f90899bceed5d12488e8234817d5","modified":1726415344471},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1726415344471},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":1726415344471},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":1726415344471},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1726415344471},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"96f861151e3b889ef0ffe78821d489ad2625ee43","modified":1726415344471},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"7caf549810f971c34196fb9deac2d992545bdff9","modified":1726415344471},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"d5c7e61257b08a9648404f6f48ce4d471cd5fa55","modified":1726415344471},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"e2a8a09bfe47da26eab242a36f516e6c452c799a","modified":1726415344472},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1726415344472},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"821e973d41f7b3b64cde91e0e836ea49c43e3c06","modified":1726415344472},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"93229d44b35b9da92e647b89d6d3087085974a29","modified":1726415344472},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1726415344472},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"418684993a3a3a2ac534257a2d9ecbcead6808c1","modified":1726415344472},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1726415344472},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1726415344472},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"19773218877281ccffed921431e87148413a7c20","modified":1726415344472},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1726415344472},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1726415344472},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1726415344472},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"830b1d592278b9f676df0cf9a91b1eeda2456aec","modified":1726415344472},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"ffc62222f8d7b4d44c1c0726c8a08824a2201039","modified":1726415344472},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4526c75e5bf84609d67e92b6af3524bcb278e852","modified":1726415344473},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1726415344476},{"_id":"themes/butterfly/source/css/var.styl","hash":"152b6bd4b6285165541a71f5a1c913f8ee6a602b","modified":1726415344476},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1726415344477},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1726415344477},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1726415344477},{"_id":"themes/butterfly/source/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1726415344477},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1726415344478},{"_id":"themes/butterfly/source/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1726415344478},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1726415344463},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1726415344463},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"63fed4548367a3663cdbaffa1df48167b0a2397b","modified":1726415344463},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1726415344463},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1726415344463},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":1726415344463},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1726415344463},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1726415344463},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1726415344463},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1726415344463},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1726415344463},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"f50e6a17073677933c5bc78481bf587a4a9e6da0","modified":1726415344463},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1726415344463},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1726415344464},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1726415344464},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1726415344464},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1726415344464},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"6f310ca7b392021632b987557607d5b6d18052bb","modified":1726415344464},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1726415344464},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1726415344464},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1726415344464},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1726415344464},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"5574804fdea5edf7fd52aad2caf030614d5e7f2f","modified":1726415344464},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"a096ff8eb6b2a22395be881f827ff2a686ba5596","modified":1726415344465},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1726415344465},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1726415344467},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1726415344468},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"12e57491e94fa00d953bbda9db0b6d6169e2358c","modified":1726415344468},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1726415344468},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1726415344469},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1726415344469},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1726415344469},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1726415344469},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1726415344469},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1726415344469},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1726415344469},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1726415344469},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1726415344470},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"a658a274c5f7896ee5122725bee45548693bdd66","modified":1726415344470},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1726415344470},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1726415344470},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1726415344470},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1726415344470},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1726415344470},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f19694a42dbe28eda4b39a1696e8fbcd277bc76c","modified":1726415344473},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"c8ff6ddd5bfe1190b7b8056b68ce41114fd79dcb","modified":1726415344473},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"4dcd468e4d11a0ac75406162678feffcd89fee00","modified":1726415344473},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1726415344473},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"fad650f88778b33a6358e38cf50dfafc0974d28f","modified":1726415344474},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1726415344474},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1726415344474},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1726415344474},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"18d08be0cd9b1f8c049d4b922e80f8163a55c947","modified":1726415344474},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1726415344474},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1726415344474},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"a2eb44fa5eaea1325319a2064439cf36d0f35a2f","modified":1726415344474},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1726415344474},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d6cf26ffb8a0343eda1cde65b6b73b0ddbe8fcfc","modified":1726415344474},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"f845b9b4efdee750f70c023aab27432611f83059","modified":1726415344474},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"b7a6a585dbc38d177c9aba75df3a467415d0488a","modified":1726415344474},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1726415344475},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"0db591a1f4ed5adcb8668a549bbee5c9d62682cf","modified":1726415344475},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"e549d24ad81a7d93326a509ff8dcfcc58c80729e","modified":1726415344475},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1726415344475},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1726415344475},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1726415344475},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1726415344475},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1726415344475},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d4ebc41b5c855dd75f47de7345d62f85ce7cf073","modified":1726415344475},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1726415344475},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1726415344475},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1726415344475},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"961589da3c0a532c4709a4a4ea96bd579257f766","modified":1726415344476},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1726415344476},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"5cddbb5f4eae695a26685e415d821b523e0f17bf","modified":1726415344476},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1726415344476},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1726415344476},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1726415344476},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1726415344476},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1726415344476},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"2d02e52b360f6e6cae47c293ae57ed78e2554663","modified":1726415344476},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1726415344476},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1726415344476},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1726415344477},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1726415344478},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"f7299f9fef5bf94bb58c8cd3be8ee660ad2f9cd4","modified":1726415344465},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1726415344465},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1726415344465},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"71af0b679e00290b0854384368b3c7e9b3e5f26a","modified":1726415344465},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1726415344465},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1726415344465},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1726415344465},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1726415344465},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1726415344466},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1726415344466},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1726415344466},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1726415344466},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1726415344466},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1726415344466},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1726415344466},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1726415344466},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"f77f0fdeac2bc8a72f71a58f9b75aa39f0a108c8","modified":1726415344466},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"62f16a602e57e5f7f7c5249dd37b42d436dc032a","modified":1726415344466},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3bc4c1b91568561f0491bdac65b75aa0bfd01f27","modified":1726415344466},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"46aec6466959baec1c3d71a5dbc510fbeb00c91d","modified":1726415344466},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"2d7b0b09678adba09481e3152e0b32962677f650","modified":1726415344466},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0d378ee8a671982a46213a4bfb223b4f3409aea9","modified":1726415344467},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1726415344467},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1726415344467},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"63cea2b5c8f7b59f5919379d61a2bb2ce8ed7623","modified":1726415344467},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f15699abb8c7a255aabad0222ae53eee387c66a3","modified":1726415344467},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"5c29b5887e2e6cd81e1f13b32da53d9c139b788b","modified":1726415344467},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1995a654ba7ad62775a0a6e2922209cd1a85f2e3","modified":1726415344467},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"46865e3f52096acb07d0212174b4e8751b123aea","modified":1726415344467},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"7aa443b4881448979b810864e206e58c9ed787e3","modified":1726415344467},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1726415344467},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1726415344467},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1726415344467},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"6b67982bb7a3713b5bffd6a23ba2810425c504d0","modified":1726415344467},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"53c190f2945d39b2d4c479e3bb1e6c6851d767c2","modified":1726415344468},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"2609bc2656aaaa9b59e8d575e711776512a62192","modified":1726415344468},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0f0b46d637a9a1b6ae35148923abecc80b866276","modified":1726415344468},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1726415344468},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"de2c4d02b520dd49a0a59fc0f33295e5bbb2c624","modified":1726415344468},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"4104f96faa6040f111ebfb9a90eeb470857c3b86","modified":1726415344468},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"1f9f51023e9e33081c2add2ca73643c0edc5e9d5","modified":1726415344468},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"24804ab6da9727ed793655c1262fa3f1a9746f70","modified":1726415344468},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1726415344468},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"b928be14d1b47a9fadb1bcc5f5072a7328752d4b","modified":1726415344469},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1726415344469},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3335024ba91f55ccf3858571b7898f46881c455c","modified":1726415344469},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1726415344469},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"3ba49cfe186e9ca05faf9f0d0113611ec47e9b38","modified":1726415344469},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1726415344469},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1726415344473},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1726415344473},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1726415344473},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1726415344473},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"25914321762e30aacc610bc4dfb9de3e1cb556a3","modified":1726415344473},{"_id":"public/search.xml","hash":"9a650dcac8413fa5ed8365ac2313a711d847bc6d","modified":1734864600486},{"_id":"public/404.html","hash":"e108414c370c5d039de837319dfa5a4fbf0f1a45","modified":1734864600486},{"_id":"public/about/index.html","hash":"cd8695ee6d8b776dc20df8507dee81474ca0e9be","modified":1734864600486},{"_id":"public/tags/index.html","hash":"15a091d6735e8193f7502cac87c2e5cefa89e148","modified":1734864600486},{"_id":"public/archives/index.html","hash":"6780fa881ff27dcf5750f9661ba3991e304b379a","modified":1734864600486},{"_id":"public/categories/index.html","hash":"1989e8cdc1b38a9f2e584cc56826230fa43a58ee","modified":1734864600486},{"_id":"public/link/index.html","hash":"00cccc91a89524f59e1aee035e17f5251005024b","modified":1734864600486},{"_id":"public/post/the-difference-between-isa-havea-and-likea-1u8avc.html","hash":"7705ea42aff6bf9bd8176aee122d247ed7350752","modified":1734864600486},{"_id":"public/post/nacos-configuration-center-and-support-multi-configuration-files-zi2mmf.html","hash":"17edecd686dde7bbe1f43a7f64eda1fa4079ee88","modified":1734864600486},{"_id":"public/post/nginx-installation-deployment-z1jtjzq.html","hash":"8113453e699adbc271556eea55c24ee2271851b7","modified":1734864600486},{"_id":"public/post/nginx-configuration-tcp-agency-guide-kqsal.html","hash":"92eee6f46dfcb8d3402d3e88e97599c3b096e44a","modified":1734864600486},{"_id":"public/post/java-implementing-agent-mode-zxwpxc.html","hash":"83b3a0acf56a3e3e895906ad7792f176f8896449","modified":1734864600486},{"_id":"public/archives/2024/index.html","hash":"ad6de39edd8ac14de96b31f3f7ef49af07d03926","modified":1734864600486},{"_id":"public/archives/2024/12/index.html","hash":"c96720fc9a4885cc4cd79dc962b7ccb81b0437a1","modified":1734864600486},{"_id":"public/categories/部署指南/index.html","hash":"ba49c25b5e80b28c4d9c87a747198c28f99f74b2","modified":1734864600486},{"_id":"public/categories/网络配置/index.html","hash":"f071acfba227fc35d8dadbb95e89519b483d929b","modified":1734864600486},{"_id":"public/categories/部署指南/安装教程/index.html","hash":"5ff49d4b3459743cb63ba54ca55d7254c57b3467","modified":1734864600486},{"_id":"public/categories/网络配置/性能监控/index.html","hash":"2b98d1ae99d4243928844b0a1d625a1b476bed15","modified":1734864600486},{"_id":"public/categories/部署指南/安装教程/配置管理/index.html","hash":"82bf8edf89081cca1c9be2397d643bb839b018ee","modified":1734864600486},{"_id":"public/categories/网络配置/性能监控/负载均衡/index.html","hash":"51a2b13f7e5ea11c32892c996215738fc5336186","modified":1734864600486},{"_id":"public/index.html","hash":"0a8f8ea0abf09a9adcad67e0fa51e3235d8bad26","modified":1734864600486},{"_id":"public/tags/nginx/index.html","hash":"009a6330d7b923dc486de754d1594cf8683e548e","modified":1734864600486},{"_id":"public/tags/docker/index.html","hash":"c801f5178feedc7ad6865d3b7b3ca244b22bbc67","modified":1734864600486},{"_id":"public/tags/源码部署/index.html","hash":"e8bbdcfba994e47c23e108f979c2c0103137a0b9","modified":1734864600486},{"_id":"public/tags/包管理/index.html","hash":"6ea3f00779e08eb2114e8eb8e22ec4fe457c71e8","modified":1734864600486},{"_id":"public/tags/开机自启/index.html","hash":"0a8fb84f068fc7f360d98aed6dedd0c9394c3003","modified":1734864600486},{"_id":"public/tags/tcp代理/index.html","hash":"c40863d712c224290b281fc03b906c771a32a1c8","modified":1734864600486},{"_id":"public/tags/配置指南/index.html","hash":"1c4e80a9ea0f398c1d61dbf9114ac93aed22f343","modified":1734864600486},{"_id":"public/tags/负载均衡/index.html","hash":"3c7f7c76657c2794fc27a65d813d479c8230ac92","modified":1734864600486},{"_id":"public/tags/性能监控/index.html","hash":"16257a1fcc61c9c469a4552aae8fd4b4444fdfd6","modified":1734864600486},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1734864600486},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1734864600486},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1734864600486},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734864600486},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1734864600486},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1734864600486},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1734864600486},{"_id":"public/css/index.css","hash":"d893594918c5d5481d440c397981969c808376b8","modified":1734864600486},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1734864600486},{"_id":"public/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1734864600486}],"Category":[{"name":"部署指南","_id":"cm4zhl9at0008n1bm9v9y2817"},{"name":"网络配置","_id":"cm4zhl9ax000cn1bmhzgy7yrk"},{"name":"安装教程","parent":"cm4zhl9at0008n1bm9v9y2817","_id":"cm4zhl9ay000en1bm9hvi4q53"},{"name":"性能监控","parent":"cm4zhl9ax000cn1bmhzgy7yrk","_id":"cm4zhl9az000gn1bmb3e876ke"},{"name":"配置管理","parent":"cm4zhl9ay000en1bm9hvi4q53","_id":"cm4zhl9az000in1bm84ruccmq"},{"name":"负载均衡","parent":"cm4zhl9az000gn1bmb3e876ke","_id":"cm4zhl9b0000kn1bm7la0fc0z"}],"Data":[{"_id":"link","data":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"IT Tools","link":"https://ittools.top/","avatar":"https://ittools.top/android-chrome-192x192.png","descr":"开发人员工具网站"},{"name":"Linux命令","link":"https://linux.forz.fun/","avatar":"https://linux.forz.fun/img/favicon.ico","descr":"Linux命令手册"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"关于","date":"2024-09-15T16:36:01.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2024-09-16 00:36:01\ntype: about\n---\n","updated":"2024-09-15T16:36:43.516Z","path":"about/index.html","comments":1,"layout":"page","_id":"cm4zhl9ak0000n1bmelk55l2c","content":"","cover":false,"excerpt":"","more":""},{"title":"标签","date":"2024-09-15T16:21:00.000Z","type":"tags","orderby":"random","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2024-09-16 00:21:00\ntype: \"tags\"\norderby: random\norder: 1\n---\n","updated":"2024-09-15T16:24:30.461Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm4zhl9ao0002n1bmamt0ah91","content":"","cover":false,"excerpt":"","more":""},{"title":"archives","date":"2024-09-15T16:41:00.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2024-09-16 00:41:00\ntype: archives\n---\n","updated":"2024-09-15T16:42:24.195Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cm4zhl9aq0004n1bm4yfygmm3","content":"","cover":false,"excerpt":"","more":""},{"title":"分类","date":"2024-09-15T16:21:37.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2024-09-16 00:21:37\ntype: \"categories\"\n---\n","updated":"2024-09-15T16:24:06.870Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm4zhl9as0006n1bm0qam3s4q","content":"","cover":false,"excerpt":"","more":""},{"title":"友情链接","date":"2024-09-15T16:22:14.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2024-09-16 00:22:14\ntype: \"link\"\n---\n","updated":"2024-09-15T16:25:16.232Z","path":"link/index.html","comments":1,"layout":"page","_id":"cm4zhl9av000an1bm7qk5d8jo","content":"","cover":false,"excerpt":"","more":""}],"Post":[{"title":"Java实现代理模式","date":"2024-12-19T01:55:21.000Z","updated":"2024-12-19T16:10:15.000Z","comments":1,"toc":true,"_content":"\n# Java实现代理模式\n\nJava实现代理模式\n\n1、代理模式\n\n---\n\n代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。\n\n代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。\n\n代理模式有**静态代理**和**动态代理**两种实现方式。\n\n2、静态代理\n\n---\n\n静态代理中，我们对目标对象的每个方法的增强都是手动完成的（后面会具体演示代码），非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦(需要对每个目标类都单独写一个代理类)。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。\n\n上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。\n\n下面通过代码展示！ **1**​ **.**​ ** 定义发送短信的接口**\n\n```java\npublic interface SmsService {\n    String send(String message);\n}\n```\n\n##### **2**​ **.**​ ** 实现发送短信的接口**\n\n```java\npublic class SmsServiceImpl implements SmsService {\n    public String send(String message) {\n        System.out.println(\"真实的 send message : \" + message);\n        return message;\n    }\n}\n```\n\n##### **3**​ **.**​ ** 创建代理类并同样实现发送短信的接口**\n\n```java\npublic class SmsProxy implements SmsService {\n \n    private final SmsService smsService;\n \n    public SmsProxy(SmsService smsService) {\n        this.smsService = smsService;\n    }\n \n    @Override\n    public String send(String message) {\n        //调用方法之前，我们可以添加自己的操作\n        System.out.println(\"静态代理 before method send()\");\n        smsService.send(message);\n        //调用方法之后，我们同样可以添加自己的操作\n        System.out.println(\"静态代理 after method send()\");\n        return message;\n    }\n}\n```\n\n##### **4**​ **.**​ ** 实际使用**\n\n```java\npublic class 静态代理和动态代理 {\n    public static void main(String[] args) {\n        // 静态代理\n        SmsService smsService = new SmsServiceImpl();\n        SmsProxy smsProxy = new SmsProxy(smsService);\n        smsProxy.send(\"java\");\n    }\n}\n```\n\n##### 5.执行结果：\n\n```java\n静态代理 before method send()\n真实的 send message : java\n静态代理 after method send()\n```\n\n3、动态代理\n\n---\n\n相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类(CGLIB动态代理机制)。\n\n从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\n\n说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。\n\n动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。\n\n就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。\n\nguide-rpc-framework使用的是 JDK 动态代理，我们先来看看 JDK 动态代理的使用。\n\n另外，虽然 guide-rpc-framework 没有用到 CGLIB 动态代理 ，我们这里还是简单介绍一下其使用以及和JDK 动态代理的对比。\n\n### 3.1 JDK 动态代理机制\n\n#### 3.1.1 介绍\n\n在 Java 动态代理机制中 `*InvocationHandler*` 接口和 Proxy 类是核心。\n\nProxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。\n\n```java\n    public static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n        throws IllegalArgumentException\n    {\n        .......\n    }\n```\n\n这个方法一共有 3 个参数：\n\n1. \\*\\*loader：\\*\\*类加载器，用于加载代理对象。\n2. \\*\\*interfaces：\\*\\*被代理类实现的一些接口；\n3. \\*\\*h：\\*\\*实现了 `InvocationHandler` 接口的对象；\n\n要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。\n\n```java\npublic interface InvocationHandler {\n    // 当你使用代理对象调用方法的时候实际会调用到这个方法\n    public Object invoke(Object proxy, Method method, Object[] args)\n        throws Throwable;\n}\n```\n\n`invoke()` 方法有下面三个参数：\n\n1. \\*\\*proxy：\\*\\*动态生成的代理类\n2. \\*\\*methoh：\\*\\*与代理类对象调用的方法相对应\n3. \\*\\*args：\\*\\*当前 method 方法的参数\n\n也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。\n\n##### 3.1.2 JDK 动态代理类使用步骤\n\n定义一个接口及其实现类； 自定义 InvocationHandler 并重写invoke方法，在 invoke 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑； 通过 Proxy.newProxyInstance(ClassLoader loader,Class<?>\\[\\] interfaces,InvocationHandler h) 方法创建代理对象；\n\n##### 3.1.2 代码示例\n\n1. 定义发送短信的接口\n\n```java\npublic interface SmsService {\n    String send(String message);\n}\n```\n\n1. 实现发送短信的接口\n\n```java\npublic class SmsServiceImpl implements SmsService {\n    public String send(String message) {\n        System.out.println(\"真实的 send message : \" + message);\n        return message;\n    }\n}\n```\n\n1. 定义一个JDK动态代理类\n\n```java\npublic class DebugInvocationHandler implements InvocationHandler {\n    // 代理类中的真实对象\n    private final Object target;\n \n    public DebugInvocationHandler(Object target) {\n        this.target = target;\n    }\n \n    public Object invoke(Object proxy, Method method, Object[] args) throws InvocationTargetException, IllegalAccessException {\n        //调用方法之前，我们可以添加自己的操作\n        System.out.println(\"JDK动态代理 before method \" + method.getName());\n        Object result = method.invoke(target, args);\n        //调用方法之后，我们同样可以添加自己的操作\n        System.out.println(\"JDK动态代理 after method \" + method.getName());\n        return result;\n    }\n}\n```\n\n1. 获取代理对象的工厂类\n\n```java\npublic class JdkProxyFactory {\n    public static Object getProxy(Object target) {\n        return Proxy.newProxyInstance(\n            target.getClass().getClassLoader(), // 目标类的类加载\n            target.getClass().getInterfaces(),  // 代理需要实现的接口，可指定多个\n            new DebugInvocationHandler(target)   // 代理对象对应的自定义 InvocationHandler\n        );\n    }\n}\n```\n\n1. 实际使用\n\n```java\npublic class 静态代理和动态代理 {\n    public static void main(String[] args) {\n        SmsService smsService1 = (SmsService) JdkProxyFactory.getProxy(new SmsServiceImpl());\n        smsService1.send(\"Java!\");\n    }\n}\n```\n\n1. 执行结果：\n\n```java\nJDK动态代理 before method send\n真实的 send message : Java!\nJDK动态代理 after method send\n```\n\n### 3.2. CGLIB 动态代理机制\n\n#### 3.2.1. 介绍\n\nJDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。\n\nCGLIB(Code Generation Library)是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用到了CGLIB， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。\n\n在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。\n\n你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。\n\n```java\npublic interface MethodInterceptor\nextends Callback{\n    // 拦截被代理类中的方法\n    public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args,\n                               MethodProxy proxy) throws Throwable;\n}\n```\n\n1. \\*\\*obj：\\*\\*被代理的对象（需要增强的对象）\n2. \\*\\*method：\\*\\*被拦截的方法（需要增强的方法）\n3. \\*\\*args：\\*\\*方法入参\n4. \\*\\*proxy：\\*\\*用于调用原始方法\n\n你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。\n\n#### 3.2.2. CGLIB 动态代理类使用步骤\n\n1. 定义一个类；\n2. 自定义 `MethodInterceptor` 并重写 `intercept` 方法，`intercept` 用于拦截增强被代理类的方法，和 JDK 动态代理中的 `invoke` 方法类似；\n3. 通过 `Enhancer` 类的 `create()`创建代理类；\n\n#### 3.2.3. 代码示例\n\n不同于 JDK 动态代理不需要额外的依赖。CGLIB(Code Generation Library) 实际是属于一个开源项目，如果你要使用它的话，需要手动添加相关依赖。\n\n```xml\n<dependency>\n  <groupId>cglib</groupId>\n  <artifactId>cglib</artifactId>\n  <version>3.3.0</version>\n</dependency>\n```\n\n1. 实现一个使用阿里云发送短信的类\n\n```java\npublic class AliSmsService {\n    public String send(String message) {\n        System.out.println(\"send message:\" + message);\n        return message;\n    }\n}\n```\n\n1. 自定义 MethodInterceptor（方法拦截器）\n\n```java\npublic class DebugMethodInterceptor implements MethodInterceptor {\n    /**\n     * @param o           代理对象（增强的对象）\n     * @param method      被拦截的方法（需要增强的方法）\n     * @param args        方法入参\n     * @param methodProxy 用于调用原始方法\n     */\n    @Override\n    public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n        //调用方法之前，我们可以添加自己的操作\n        System.out.println(\"before method \" + method.getName());\n        Object object = methodProxy.invokeSuper(o, args);\n        //调用方法之后，我们同样可以添加自己的操作\n        System.out.println(\"after method \" + method.getName());\n        return object;\n    }\n}\n```\n\n1. 获取代理类\n\n```java\npublic class CglibProxyFactory {\n    public static Object getProxy(Class<?> clazz) {\n        // 创建动态代理增强类\n        Enhancer enhancer = new Enhancer();\n        // 设置类加载器\n        enhancer.setClassLoader(clazz.getClassLoader());\n        // 设置被代理类\n        enhancer.setSuperclass(clazz);\n        // 设置方法拦截器\n        enhancer.setCallback(new DebugMethodInterceptor());\n        // 创建代理类\n        return enhancer.create();\n    }\n}\n```\n\n1. 实际使用\n\n   ```java\n   public class 静态代理和动态代理 {\n       public static void main(String[] args) {\n           AliSmsService aliSmsService = (AliSmsService) CglibProxyFactory.getProxy(AliSmsService.class);\n           aliSmsService.send(\"java\");\n       }\n   }\n   ```\n2. 执行结果：\n\n```java\nbefore method send\nsend message:java\nafter method send\n```\n\n#### 3.3. JDK动态代理和CGLIB动态代理对比\n\n1. JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。\n2. 就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。\n\n4、静态代理和动态代理的对比\n\n---\n\n1. 灵活性：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！\n2. JVM 层面：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的class文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\n","source":"_posts/java-implementing-agent-mode-zxwpxc.md","raw":"---\ntitle: Java实现代理模式\ndate: '2024-12-19 09:55:21'\nupdated: '2024-12-20 00:10:15'\npermalink: /post/java-implementing-agent-mode-zxwpxc.html\ncomments: true\ntoc: true\n---\n\n# Java实现代理模式\n\nJava实现代理模式\n\n1、代理模式\n\n---\n\n代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。\n\n代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。\n\n代理模式有**静态代理**和**动态代理**两种实现方式。\n\n2、静态代理\n\n---\n\n静态代理中，我们对目标对象的每个方法的增强都是手动完成的（后面会具体演示代码），非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦(需要对每个目标类都单独写一个代理类)。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。\n\n上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。\n\n下面通过代码展示！ **1**​ **.**​ ** 定义发送短信的接口**\n\n```java\npublic interface SmsService {\n    String send(String message);\n}\n```\n\n##### **2**​ **.**​ ** 实现发送短信的接口**\n\n```java\npublic class SmsServiceImpl implements SmsService {\n    public String send(String message) {\n        System.out.println(\"真实的 send message : \" + message);\n        return message;\n    }\n}\n```\n\n##### **3**​ **.**​ ** 创建代理类并同样实现发送短信的接口**\n\n```java\npublic class SmsProxy implements SmsService {\n \n    private final SmsService smsService;\n \n    public SmsProxy(SmsService smsService) {\n        this.smsService = smsService;\n    }\n \n    @Override\n    public String send(String message) {\n        //调用方法之前，我们可以添加自己的操作\n        System.out.println(\"静态代理 before method send()\");\n        smsService.send(message);\n        //调用方法之后，我们同样可以添加自己的操作\n        System.out.println(\"静态代理 after method send()\");\n        return message;\n    }\n}\n```\n\n##### **4**​ **.**​ ** 实际使用**\n\n```java\npublic class 静态代理和动态代理 {\n    public static void main(String[] args) {\n        // 静态代理\n        SmsService smsService = new SmsServiceImpl();\n        SmsProxy smsProxy = new SmsProxy(smsService);\n        smsProxy.send(\"java\");\n    }\n}\n```\n\n##### 5.执行结果：\n\n```java\n静态代理 before method send()\n真实的 send message : java\n静态代理 after method send()\n```\n\n3、动态代理\n\n---\n\n相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类(CGLIB动态代理机制)。\n\n从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\n\n说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。\n\n动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。\n\n就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。\n\nguide-rpc-framework使用的是 JDK 动态代理，我们先来看看 JDK 动态代理的使用。\n\n另外，虽然 guide-rpc-framework 没有用到 CGLIB 动态代理 ，我们这里还是简单介绍一下其使用以及和JDK 动态代理的对比。\n\n### 3.1 JDK 动态代理机制\n\n#### 3.1.1 介绍\n\n在 Java 动态代理机制中 `*InvocationHandler*` 接口和 Proxy 类是核心。\n\nProxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。\n\n```java\n    public static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n        throws IllegalArgumentException\n    {\n        .......\n    }\n```\n\n这个方法一共有 3 个参数：\n\n1. \\*\\*loader：\\*\\*类加载器，用于加载代理对象。\n2. \\*\\*interfaces：\\*\\*被代理类实现的一些接口；\n3. \\*\\*h：\\*\\*实现了 `InvocationHandler` 接口的对象；\n\n要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。\n\n```java\npublic interface InvocationHandler {\n    // 当你使用代理对象调用方法的时候实际会调用到这个方法\n    public Object invoke(Object proxy, Method method, Object[] args)\n        throws Throwable;\n}\n```\n\n`invoke()` 方法有下面三个参数：\n\n1. \\*\\*proxy：\\*\\*动态生成的代理类\n2. \\*\\*methoh：\\*\\*与代理类对象调用的方法相对应\n3. \\*\\*args：\\*\\*当前 method 方法的参数\n\n也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。\n\n##### 3.1.2 JDK 动态代理类使用步骤\n\n定义一个接口及其实现类； 自定义 InvocationHandler 并重写invoke方法，在 invoke 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑； 通过 Proxy.newProxyInstance(ClassLoader loader,Class<?>\\[\\] interfaces,InvocationHandler h) 方法创建代理对象；\n\n##### 3.1.2 代码示例\n\n1. 定义发送短信的接口\n\n```java\npublic interface SmsService {\n    String send(String message);\n}\n```\n\n1. 实现发送短信的接口\n\n```java\npublic class SmsServiceImpl implements SmsService {\n    public String send(String message) {\n        System.out.println(\"真实的 send message : \" + message);\n        return message;\n    }\n}\n```\n\n1. 定义一个JDK动态代理类\n\n```java\npublic class DebugInvocationHandler implements InvocationHandler {\n    // 代理类中的真实对象\n    private final Object target;\n \n    public DebugInvocationHandler(Object target) {\n        this.target = target;\n    }\n \n    public Object invoke(Object proxy, Method method, Object[] args) throws InvocationTargetException, IllegalAccessException {\n        //调用方法之前，我们可以添加自己的操作\n        System.out.println(\"JDK动态代理 before method \" + method.getName());\n        Object result = method.invoke(target, args);\n        //调用方法之后，我们同样可以添加自己的操作\n        System.out.println(\"JDK动态代理 after method \" + method.getName());\n        return result;\n    }\n}\n```\n\n1. 获取代理对象的工厂类\n\n```java\npublic class JdkProxyFactory {\n    public static Object getProxy(Object target) {\n        return Proxy.newProxyInstance(\n            target.getClass().getClassLoader(), // 目标类的类加载\n            target.getClass().getInterfaces(),  // 代理需要实现的接口，可指定多个\n            new DebugInvocationHandler(target)   // 代理对象对应的自定义 InvocationHandler\n        );\n    }\n}\n```\n\n1. 实际使用\n\n```java\npublic class 静态代理和动态代理 {\n    public static void main(String[] args) {\n        SmsService smsService1 = (SmsService) JdkProxyFactory.getProxy(new SmsServiceImpl());\n        smsService1.send(\"Java!\");\n    }\n}\n```\n\n1. 执行结果：\n\n```java\nJDK动态代理 before method send\n真实的 send message : Java!\nJDK动态代理 after method send\n```\n\n### 3.2. CGLIB 动态代理机制\n\n#### 3.2.1. 介绍\n\nJDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。\n\nCGLIB(Code Generation Library)是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用到了CGLIB， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。\n\n在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。\n\n你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。\n\n```java\npublic interface MethodInterceptor\nextends Callback{\n    // 拦截被代理类中的方法\n    public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args,\n                               MethodProxy proxy) throws Throwable;\n}\n```\n\n1. \\*\\*obj：\\*\\*被代理的对象（需要增强的对象）\n2. \\*\\*method：\\*\\*被拦截的方法（需要增强的方法）\n3. \\*\\*args：\\*\\*方法入参\n4. \\*\\*proxy：\\*\\*用于调用原始方法\n\n你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。\n\n#### 3.2.2. CGLIB 动态代理类使用步骤\n\n1. 定义一个类；\n2. 自定义 `MethodInterceptor` 并重写 `intercept` 方法，`intercept` 用于拦截增强被代理类的方法，和 JDK 动态代理中的 `invoke` 方法类似；\n3. 通过 `Enhancer` 类的 `create()`创建代理类；\n\n#### 3.2.3. 代码示例\n\n不同于 JDK 动态代理不需要额外的依赖。CGLIB(Code Generation Library) 实际是属于一个开源项目，如果你要使用它的话，需要手动添加相关依赖。\n\n```xml\n<dependency>\n  <groupId>cglib</groupId>\n  <artifactId>cglib</artifactId>\n  <version>3.3.0</version>\n</dependency>\n```\n\n1. 实现一个使用阿里云发送短信的类\n\n```java\npublic class AliSmsService {\n    public String send(String message) {\n        System.out.println(\"send message:\" + message);\n        return message;\n    }\n}\n```\n\n1. 自定义 MethodInterceptor（方法拦截器）\n\n```java\npublic class DebugMethodInterceptor implements MethodInterceptor {\n    /**\n     * @param o           代理对象（增强的对象）\n     * @param method      被拦截的方法（需要增强的方法）\n     * @param args        方法入参\n     * @param methodProxy 用于调用原始方法\n     */\n    @Override\n    public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n        //调用方法之前，我们可以添加自己的操作\n        System.out.println(\"before method \" + method.getName());\n        Object object = methodProxy.invokeSuper(o, args);\n        //调用方法之后，我们同样可以添加自己的操作\n        System.out.println(\"after method \" + method.getName());\n        return object;\n    }\n}\n```\n\n1. 获取代理类\n\n```java\npublic class CglibProxyFactory {\n    public static Object getProxy(Class<?> clazz) {\n        // 创建动态代理增强类\n        Enhancer enhancer = new Enhancer();\n        // 设置类加载器\n        enhancer.setClassLoader(clazz.getClassLoader());\n        // 设置被代理类\n        enhancer.setSuperclass(clazz);\n        // 设置方法拦截器\n        enhancer.setCallback(new DebugMethodInterceptor());\n        // 创建代理类\n        return enhancer.create();\n    }\n}\n```\n\n1. 实际使用\n\n   ```java\n   public class 静态代理和动态代理 {\n       public static void main(String[] args) {\n           AliSmsService aliSmsService = (AliSmsService) CglibProxyFactory.getProxy(AliSmsService.class);\n           aliSmsService.send(\"java\");\n       }\n   }\n   ```\n2. 执行结果：\n\n```java\nbefore method send\nsend message:java\nafter method send\n```\n\n#### 3.3. JDK动态代理和CGLIB动态代理对比\n\n1. JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。\n2. 就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。\n\n4、静态代理和动态代理的对比\n\n---\n\n1. 灵活性：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！\n2. JVM 层面：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的class文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\n","slug":"java-implementing-agent-mode-zxwpxc","published":1,"__permalink":"/post/java-implementing-agent-mode-zxwpxc.html","layout":"post","photos":[],"_id":"cm4zhl9an0001n1bm25lb3f5d","content":"<h1 id=\"Java实现代理模式\"><a href=\"#Java实现代理模式\" class=\"headerlink\" title=\"Java实现代理模式\"></a>Java实现代理模式</h1><p>Java实现代理模式</p>\n<p>1、代理模式</p>\n<hr>\n<p>代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</p>\n<p>代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。</p>\n<p>代理模式有<strong>静态代理</strong>和<strong>动态代理</strong>两种实现方式。</p>\n<p>2、静态代理</p>\n<hr>\n<p>静态代理中，我们对目标对象的每个方法的增强都是手动完成的（后面会具体演示代码），非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦(需要对每个目标类都单独写一个代理类)。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。</p>\n<p>上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。</p>\n<p>下面通过代码展示！ <strong>1</strong>​ **.<strong>​ ** 定义发送短信的接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2​-​-实现发送短信的接口\"><a href=\"#2​-​-实现发送短信的接口\" class=\"headerlink\" title=\"2​ **.​ ** 实现发送短信的接口\"></a><strong>2</strong>​ **.<strong>​ ** 实现发送短信的接口</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;真实的 send message : &quot;</span> + message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3​-​-创建代理类并同样实现发送短信的接口\"><a href=\"#3​-​-创建代理类并同样实现发送短信的接口\" class=\"headerlink\" title=\"3​ **.​ ** 创建代理类并同样实现发送短信的接口\"></a><strong>3</strong>​ **.<strong>​ ** 创建代理类并同样实现发送短信的接口</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsProxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SmsService smsService;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SmsProxy</span><span class=\"params\">(SmsService smsService)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.smsService = smsService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之前，我们可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代理 before method send()&quot;</span>);</span><br><span class=\"line\">        smsService.send(message);</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代理 after method send()&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4​-​-实际使用\"><a href=\"#4​-​-实际使用\" class=\"headerlink\" title=\"4​ **.​ ** 实际使用\"></a><strong>4</strong>​ **.<strong>​ ** 实际使用</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 静态代理和动态代理 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 静态代理</span></span><br><span class=\"line\">        <span class=\"type\">SmsService</span> <span class=\"variable\">smsService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SmsServiceImpl</span>();</span><br><span class=\"line\">        <span class=\"type\">SmsProxy</span> <span class=\"variable\">smsProxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SmsProxy</span>(smsService);</span><br><span class=\"line\">        smsProxy.send(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-执行结果：\"><a href=\"#5-执行结果：\" class=\"headerlink\" title=\"5.执行结果：\"></a>5.执行结果：</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代理 before method <span class=\"title function_\">send</span><span class=\"params\">()</span></span><br><span class=\"line\">真实的 send message : java</span><br><span class=\"line\">静态代理 after method <span class=\"title function_\">send</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n\n<p>3、动态代理</p>\n<hr>\n<p>相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类(CGLIB动态代理机制)。</p>\n<p>从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</p>\n<p>说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。</p>\n<p>动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。</p>\n<p>就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。</p>\n<p>guide-rpc-framework使用的是 JDK 动态代理，我们先来看看 JDK 动态代理的使用。</p>\n<p>另外，虽然 guide-rpc-framework 没有用到 CGLIB 动态代理 ，我们这里还是简单介绍一下其使用以及和JDK 动态代理的对比。</p>\n<h3 id=\"3-1-JDK-动态代理机制\"><a href=\"#3-1-JDK-动态代理机制\" class=\"headerlink\" title=\"3.1 JDK 动态代理机制\"></a>3.1 JDK 动态代理机制</h3><h4 id=\"3-1-1-介绍\"><a href=\"#3-1-1-介绍\" class=\"headerlink\" title=\"3.1.1 介绍\"></a>3.1.1 介绍</h4><p>在 Java 动态代理机制中 <code>*InvocationHandler*</code> 接口和 Proxy 类是核心。</p>\n<p>Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span><br><span class=\"line\"><span class=\"params\">                                      Class&lt;?&gt;[] interfaces,</span></span><br><span class=\"line\"><span class=\"params\">                                      InvocationHandler h)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> IllegalArgumentException</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    .......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法一共有 3 个参数：</p>\n<ol>\n<li>**loader：**类加载器，用于加载代理对象。</li>\n<li>**interfaces：**被代理类实现的一些接口；</li>\n<li>**h：**实现了 <code>InvocationHandler</code> 接口的对象；</li>\n</ol>\n<p>要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当你使用代理对象调用方法的时候实际会调用到这个方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> Throwable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>invoke()</code> 方法有下面三个参数：</p>\n<ol>\n<li>**proxy：**动态生成的代理类</li>\n<li>**methoh：**与代理类对象调用的方法相对应</li>\n<li>**args：**当前 method 方法的参数</li>\n</ol>\n<p>也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。</p>\n<h5 id=\"3-1-2-JDK-动态代理类使用步骤\"><a href=\"#3-1-2-JDK-动态代理类使用步骤\" class=\"headerlink\" title=\"3.1.2 JDK 动态代理类使用步骤\"></a>3.1.2 JDK 动态代理类使用步骤</h5><p>定义一个接口及其实现类； 自定义 InvocationHandler 并重写invoke方法，在 invoke 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑； 通过 Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h) 方法创建代理对象；</p>\n<h5 id=\"3-1-2-代码示例\"><a href=\"#3-1-2-代码示例\" class=\"headerlink\" title=\"3.1.2 代码示例\"></a>3.1.2 代码示例</h5><ol>\n<li>定义发送短信的接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>实现发送短信的接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;真实的 send message : &quot;</span> + message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>定义一个JDK动态代理类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DebugInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 代理类中的真实对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object target;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DebugInvocationHandler</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之前，我们可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;JDK动态代理 before method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;JDK动态代理 after method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>获取代理对象的工厂类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdkProxyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(</span><br><span class=\"line\">            target.getClass().getClassLoader(), <span class=\"comment\">// 目标类的类加载</span></span><br><span class=\"line\">            target.getClass().getInterfaces(),  <span class=\"comment\">// 代理需要实现的接口，可指定多个</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">DebugInvocationHandler</span>(target)   <span class=\"comment\">// 代理对象对应的自定义 InvocationHandler</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>实际使用</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 静态代理和动态代理 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SmsService</span> <span class=\"variable\">smsService1</span> <span class=\"operator\">=</span> (SmsService) JdkProxyFactory.getProxy(<span class=\"keyword\">new</span> <span class=\"title class_\">SmsServiceImpl</span>());</span><br><span class=\"line\">        smsService1.send(<span class=\"string\">&quot;Java!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>执行结果：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JDK动态代理 before method send</span><br><span class=\"line\">真实的 send message : Java!</span><br><span class=\"line\">JDK动态代理 after method send</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-CGLIB-动态代理机制\"><a href=\"#3-2-CGLIB-动态代理机制\" class=\"headerlink\" title=\"3.2. CGLIB 动态代理机制\"></a>3.2. CGLIB 动态代理机制</h3><h4 id=\"3-2-1-介绍\"><a href=\"#3-2-1-介绍\" class=\"headerlink\" title=\"3.2.1. 介绍\"></a>3.2.1. 介绍</h4><p>JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。</p>\n<p>CGLIB(Code Generation Library)是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用到了CGLIB， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。</p>\n<p>在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。</p>\n<p>你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MethodInterceptor</span></span><br><span class=\"line\"><span class=\"keyword\">extends</span> <span class=\"title class_\">Callback</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拦截被代理类中的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object obj, java.lang.reflect.Method method, Object[] args,</span></span><br><span class=\"line\"><span class=\"params\">                               MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>**obj：**被代理的对象（需要增强的对象）</li>\n<li>**method：**被拦截的方法（需要增强的方法）</li>\n<li>**args：**方法入参</li>\n<li>**proxy：**用于调用原始方法</li>\n</ol>\n<p>你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。</p>\n<h4 id=\"3-2-2-CGLIB-动态代理类使用步骤\"><a href=\"#3-2-2-CGLIB-动态代理类使用步骤\" class=\"headerlink\" title=\"3.2.2. CGLIB 动态代理类使用步骤\"></a>3.2.2. CGLIB 动态代理类使用步骤</h4><ol>\n<li>定义一个类；</li>\n<li>自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法，和 JDK 动态代理中的 <code>invoke</code> 方法类似；</li>\n<li>通过 <code>Enhancer</code> 类的 <code>create()</code>创建代理类；</li>\n</ol>\n<h4 id=\"3-2-3-代码示例\"><a href=\"#3-2-3-代码示例\" class=\"headerlink\" title=\"3.2.3. 代码示例\"></a>3.2.3. 代码示例</h4><p>不同于 JDK 动态代理不需要额外的依赖。CGLIB(Code Generation Library) 实际是属于一个开源项目，如果你要使用它的话，需要手动添加相关依赖。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cglib<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cglib<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>实现一个使用阿里云发送短信的类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AliSmsService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;send message:&quot;</span> + message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>自定义 MethodInterceptor（方法拦截器）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DebugMethodInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o           代理对象（增强的对象）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method      被拦截的方法（需要增强的方法）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args        方法入参</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> methodProxy 用于调用原始方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之前，我们可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> methodProxy.invokeSuper(o, args);</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;after method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>获取代理类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CglibProxyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建动态代理增强类</span></span><br><span class=\"line\">        <span class=\"type\">Enhancer</span> <span class=\"variable\">enhancer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 设置类加载器</span></span><br><span class=\"line\">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class=\"line\">        <span class=\"comment\">// 设置被代理类</span></span><br><span class=\"line\">        enhancer.setSuperclass(clazz);</span><br><span class=\"line\">        <span class=\"comment\">// 设置方法拦截器</span></span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">DebugMethodInterceptor</span>());</span><br><span class=\"line\">        <span class=\"comment\">// 创建代理类</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> enhancer.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>实际使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 静态代理和动态代理 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AliSmsService</span> <span class=\"variable\">aliSmsService</span> <span class=\"operator\">=</span> (AliSmsService) CglibProxyFactory.getProxy(AliSmsService.class);</span><br><span class=\"line\">        aliSmsService.send(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>执行结果：</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before method send</span><br><span class=\"line\">send message:java</span><br><span class=\"line\">after method send</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-JDK动态代理和CGLIB动态代理对比\"><a href=\"#3-3-JDK动态代理和CGLIB动态代理对比\" class=\"headerlink\" title=\"3.3. JDK动态代理和CGLIB动态代理对比\"></a>3.3. JDK动态代理和CGLIB动态代理对比</h4><ol>\n<li>JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。</li>\n<li>就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。</li>\n</ol>\n<p>4、静态代理和动态代理的对比</p>\n<hr>\n<ol>\n<li>灵活性：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！</li>\n<li>JVM 层面：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的class文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</li>\n</ol>\n","cover":false,"excerpt":"","more":"<h1 id=\"Java实现代理模式\"><a href=\"#Java实现代理模式\" class=\"headerlink\" title=\"Java实现代理模式\"></a>Java实现代理模式</h1><p>Java实现代理模式</p>\n<p>1、代理模式</p>\n<hr>\n<p>代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</p>\n<p>代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。</p>\n<p>代理模式有<strong>静态代理</strong>和<strong>动态代理</strong>两种实现方式。</p>\n<p>2、静态代理</p>\n<hr>\n<p>静态代理中，我们对目标对象的每个方法的增强都是手动完成的（后面会具体演示代码），非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦(需要对每个目标类都单独写一个代理类)。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。</p>\n<p>上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。</p>\n<p>下面通过代码展示！ <strong>1</strong>​ **.<strong>​ ** 定义发送短信的接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2​-​-实现发送短信的接口\"><a href=\"#2​-​-实现发送短信的接口\" class=\"headerlink\" title=\"2​ **.​ ** 实现发送短信的接口\"></a><strong>2</strong>​ **.<strong>​ ** 实现发送短信的接口</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;真实的 send message : &quot;</span> + message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3​-​-创建代理类并同样实现发送短信的接口\"><a href=\"#3​-​-创建代理类并同样实现发送短信的接口\" class=\"headerlink\" title=\"3​ **.​ ** 创建代理类并同样实现发送短信的接口\"></a><strong>3</strong>​ **.<strong>​ ** 创建代理类并同样实现发送短信的接口</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsProxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SmsService smsService;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SmsProxy</span><span class=\"params\">(SmsService smsService)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.smsService = smsService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之前，我们可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代理 before method send()&quot;</span>);</span><br><span class=\"line\">        smsService.send(message);</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代理 after method send()&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4​-​-实际使用\"><a href=\"#4​-​-实际使用\" class=\"headerlink\" title=\"4​ **.​ ** 实际使用\"></a><strong>4</strong>​ **.<strong>​ ** 实际使用</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 静态代理和动态代理 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 静态代理</span></span><br><span class=\"line\">        <span class=\"type\">SmsService</span> <span class=\"variable\">smsService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SmsServiceImpl</span>();</span><br><span class=\"line\">        <span class=\"type\">SmsProxy</span> <span class=\"variable\">smsProxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SmsProxy</span>(smsService);</span><br><span class=\"line\">        smsProxy.send(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-执行结果：\"><a href=\"#5-执行结果：\" class=\"headerlink\" title=\"5.执行结果：\"></a>5.执行结果：</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代理 before method <span class=\"title function_\">send</span><span class=\"params\">()</span></span><br><span class=\"line\">真实的 send message : java</span><br><span class=\"line\">静态代理 after method <span class=\"title function_\">send</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n\n<p>3、动态代理</p>\n<hr>\n<p>相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类(CGLIB动态代理机制)。</p>\n<p>从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</p>\n<p>说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。</p>\n<p>动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。</p>\n<p>就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。</p>\n<p>guide-rpc-framework使用的是 JDK 动态代理，我们先来看看 JDK 动态代理的使用。</p>\n<p>另外，虽然 guide-rpc-framework 没有用到 CGLIB 动态代理 ，我们这里还是简单介绍一下其使用以及和JDK 动态代理的对比。</p>\n<h3 id=\"3-1-JDK-动态代理机制\"><a href=\"#3-1-JDK-动态代理机制\" class=\"headerlink\" title=\"3.1 JDK 动态代理机制\"></a>3.1 JDK 动态代理机制</h3><h4 id=\"3-1-1-介绍\"><a href=\"#3-1-1-介绍\" class=\"headerlink\" title=\"3.1.1 介绍\"></a>3.1.1 介绍</h4><p>在 Java 动态代理机制中 <code>*InvocationHandler*</code> 接口和 Proxy 类是核心。</p>\n<p>Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span><br><span class=\"line\"><span class=\"params\">                                      Class&lt;?&gt;[] interfaces,</span></span><br><span class=\"line\"><span class=\"params\">                                      InvocationHandler h)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> IllegalArgumentException</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    .......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法一共有 3 个参数：</p>\n<ol>\n<li>**loader：**类加载器，用于加载代理对象。</li>\n<li>**interfaces：**被代理类实现的一些接口；</li>\n<li>**h：**实现了 <code>InvocationHandler</code> 接口的对象；</li>\n</ol>\n<p>要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当你使用代理对象调用方法的时候实际会调用到这个方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> Throwable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>invoke()</code> 方法有下面三个参数：</p>\n<ol>\n<li>**proxy：**动态生成的代理类</li>\n<li>**methoh：**与代理类对象调用的方法相对应</li>\n<li>**args：**当前 method 方法的参数</li>\n</ol>\n<p>也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。</p>\n<h5 id=\"3-1-2-JDK-动态代理类使用步骤\"><a href=\"#3-1-2-JDK-动态代理类使用步骤\" class=\"headerlink\" title=\"3.1.2 JDK 动态代理类使用步骤\"></a>3.1.2 JDK 动态代理类使用步骤</h5><p>定义一个接口及其实现类； 自定义 InvocationHandler 并重写invoke方法，在 invoke 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑； 通过 Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h) 方法创建代理对象；</p>\n<h5 id=\"3-1-2-代码示例\"><a href=\"#3-1-2-代码示例\" class=\"headerlink\" title=\"3.1.2 代码示例\"></a>3.1.2 代码示例</h5><ol>\n<li>定义发送短信的接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>实现发送短信的接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;真实的 send message : &quot;</span> + message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>定义一个JDK动态代理类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DebugInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 代理类中的真实对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object target;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DebugInvocationHandler</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之前，我们可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;JDK动态代理 before method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;JDK动态代理 after method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>获取代理对象的工厂类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdkProxyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(</span><br><span class=\"line\">            target.getClass().getClassLoader(), <span class=\"comment\">// 目标类的类加载</span></span><br><span class=\"line\">            target.getClass().getInterfaces(),  <span class=\"comment\">// 代理需要实现的接口，可指定多个</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">DebugInvocationHandler</span>(target)   <span class=\"comment\">// 代理对象对应的自定义 InvocationHandler</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>实际使用</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 静态代理和动态代理 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SmsService</span> <span class=\"variable\">smsService1</span> <span class=\"operator\">=</span> (SmsService) JdkProxyFactory.getProxy(<span class=\"keyword\">new</span> <span class=\"title class_\">SmsServiceImpl</span>());</span><br><span class=\"line\">        smsService1.send(<span class=\"string\">&quot;Java!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>执行结果：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JDK动态代理 before method send</span><br><span class=\"line\">真实的 send message : Java!</span><br><span class=\"line\">JDK动态代理 after method send</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-CGLIB-动态代理机制\"><a href=\"#3-2-CGLIB-动态代理机制\" class=\"headerlink\" title=\"3.2. CGLIB 动态代理机制\"></a>3.2. CGLIB 动态代理机制</h3><h4 id=\"3-2-1-介绍\"><a href=\"#3-2-1-介绍\" class=\"headerlink\" title=\"3.2.1. 介绍\"></a>3.2.1. 介绍</h4><p>JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。</p>\n<p>CGLIB(Code Generation Library)是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用到了CGLIB， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。</p>\n<p>在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。</p>\n<p>你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MethodInterceptor</span></span><br><span class=\"line\"><span class=\"keyword\">extends</span> <span class=\"title class_\">Callback</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拦截被代理类中的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object obj, java.lang.reflect.Method method, Object[] args,</span></span><br><span class=\"line\"><span class=\"params\">                               MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>**obj：**被代理的对象（需要增强的对象）</li>\n<li>**method：**被拦截的方法（需要增强的方法）</li>\n<li>**args：**方法入参</li>\n<li>**proxy：**用于调用原始方法</li>\n</ol>\n<p>你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。</p>\n<h4 id=\"3-2-2-CGLIB-动态代理类使用步骤\"><a href=\"#3-2-2-CGLIB-动态代理类使用步骤\" class=\"headerlink\" title=\"3.2.2. CGLIB 动态代理类使用步骤\"></a>3.2.2. CGLIB 动态代理类使用步骤</h4><ol>\n<li>定义一个类；</li>\n<li>自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法，和 JDK 动态代理中的 <code>invoke</code> 方法类似；</li>\n<li>通过 <code>Enhancer</code> 类的 <code>create()</code>创建代理类；</li>\n</ol>\n<h4 id=\"3-2-3-代码示例\"><a href=\"#3-2-3-代码示例\" class=\"headerlink\" title=\"3.2.3. 代码示例\"></a>3.2.3. 代码示例</h4><p>不同于 JDK 动态代理不需要额外的依赖。CGLIB(Code Generation Library) 实际是属于一个开源项目，如果你要使用它的话，需要手动添加相关依赖。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cglib<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cglib<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>实现一个使用阿里云发送短信的类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AliSmsService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;send message:&quot;</span> + message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>自定义 MethodInterceptor（方法拦截器）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DebugMethodInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o           代理对象（增强的对象）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method      被拦截的方法（需要增强的方法）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args        方法入参</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> methodProxy 用于调用原始方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之前，我们可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> methodProxy.invokeSuper(o, args);</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;after method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>获取代理类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CglibProxyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建动态代理增强类</span></span><br><span class=\"line\">        <span class=\"type\">Enhancer</span> <span class=\"variable\">enhancer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 设置类加载器</span></span><br><span class=\"line\">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class=\"line\">        <span class=\"comment\">// 设置被代理类</span></span><br><span class=\"line\">        enhancer.setSuperclass(clazz);</span><br><span class=\"line\">        <span class=\"comment\">// 设置方法拦截器</span></span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">DebugMethodInterceptor</span>());</span><br><span class=\"line\">        <span class=\"comment\">// 创建代理类</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> enhancer.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>实际使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 静态代理和动态代理 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AliSmsService</span> <span class=\"variable\">aliSmsService</span> <span class=\"operator\">=</span> (AliSmsService) CglibProxyFactory.getProxy(AliSmsService.class);</span><br><span class=\"line\">        aliSmsService.send(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>执行结果：</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before method send</span><br><span class=\"line\">send message:java</span><br><span class=\"line\">after method send</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-JDK动态代理和CGLIB动态代理对比\"><a href=\"#3-3-JDK动态代理和CGLIB动态代理对比\" class=\"headerlink\" title=\"3.3. JDK动态代理和CGLIB动态代理对比\"></a>3.3. JDK动态代理和CGLIB动态代理对比</h4><ol>\n<li>JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。</li>\n<li>就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。</li>\n</ol>\n<p>4、静态代理和动态代理的对比</p>\n<hr>\n<ol>\n<li>灵活性：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！</li>\n<li>JVM 层面：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的class文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</li>\n</ol>\n"},{"title":"Nacos配置中心并支持多配置文件","date":"2024-12-19T01:59:49.000Z","updated":"2024-12-19T16:12:14.000Z","comments":1,"toc":true,"_content":"\n# Nacos配置中心并支持多配置文件\n\n### 一、引入依赖包\n\n---\n\n```xml\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n</dependency>\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n</dependency>\n```\n\n> discovery和config分别为注册中心客户端和配置中心客户端\n>\n> 注意：\n>\n> 1. config，引入这个配置中心的依赖后，需要使用bootstrap.yml作为中转配置文件，读取的优先级为bootstrap.yml>application.yml\n> 2. 配置中心地址结尾不能带斜杠 否者会报异常\n\n### 二、单文件配置\n\n---\n\n```yml\nspring:\n  application:\n    name: onedata\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://172.20.23.140:80\n      config:\n         server-addr: http://172.20.23.140:80\n         group: DEFAULT_GROUP\n         file-extension: yml\n```\n\n三、多文件配置\n\n---\n\n1、创建bootstrap.yml,配置激活环境标识\n\n```yml\nspring:\n  profiles:\n    active: dev\n```\n\n2、创建bootstrap-dev.yml文件，配置连接nacos服务中心，加载多个配置文件\n\n**写法一：**\n\n```yml\nspring:\n  application:\n    name: mybatis-plus-join-practice\n  #配置nacos注册中心和配置中心\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://xxx:8848\n        username: nacos\n        password: nacos\n        namespace: dev\n        group: MYBATIS-PLUS-JOIN-PRACTICE\n      config:\n        server-addr: ${spring.cloud.nacos.discovery.server-addr}\n        username: ${spring.cloud.nacos.discovery.username}\n        password: ${spring.cloud.nacos.discovery.password}\n        namespace: ${spring.cloud.nacos.discovery.namespace}\n        file-extension: yml  # yaml格式\n        extension-configs:\n          - data-id: application.yml\n            group: ${spring.cloud.nacos.discovery.group}\n            refresh: true\n \n          - data-id: datasource.yml\n            group: ${spring.cloud.nacos.discovery.group}\n            refresh: true\n```\n\n**写法二：**\n\n```yaml\nspring:\n  application:\n    name: mybatis-plus-join-practice\n  #配置nacos注册中心和配置中心\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://xxx:8848\n        username: nacos\n        password: nacos\n        namespace: dev\n        group: MYBATIS-PLUS-JOIN-PRACTICE\n      config:\n        server-addr: ${spring.cloud.nacos.discovery.server-addr}\n        username: ${spring.cloud.nacos.discovery.username}\n        password: ${spring.cloud.nacos.discovery.password}\n        namespace: ${spring.cloud.nacos.discovery.namespace}\n        extension-configs[0]:\n          data-id: application.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n \n        extension-configs[1]:\n          data-id: datasource.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n```\n\n**写法三：**\n\n```yaml\nspring:\n  application:\n    name: mybatis-plus-join-practice\n  #配置nacos注册中心和配置中心\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://xxx:8848\n        username: nacos\n        password: nacos\n        namespace: dev\n        group: MYBATIS-PLUS-JOIN-PRACTICE\n      config:\n        server-addr: ${spring.cloud.nacos.discovery.server-addr}\n        username: ${spring.cloud.nacos.discovery.username}\n        password: ${spring.cloud.nacos.discovery.password}\n        namespace: ${spring.cloud.nacos.discovery.namespace}\n        shared-configs[0]:\n          data-id: application.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n \n        shared-configs[1]:\n          data-id: datasource.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n```\n\n说明： 1、以上三种写法都支持加载多个配置文件 1、内容中 extension-configs\\[0\\]、shared-configs\\[0\\] 加载的是 application.yml 配置文件 2、内容中 extension-configs\\[1\\]、shared-configs\\[1\\] 加载的是 datasource.yml 配置文件 3、配置文件在激活标识的 dev 环境的 MYBATIS-PLUS-PRACTICE 分组下\n\n> 1、在实际应用中，可以使用多文件配置，把spring配置和数据源配置分开\n>\n> 2、可以使用命名空间区分不同的环境，例如：dev,sit,uat等环境\n>\n> 3、权限控制开启方式，在conf/applicaiton.properties文件中修改属性值即可，如下\n>\n> `nacos.core.auth.enabled=true`\n>\n> 4、如果服务端开启了权限控制，注册中心和配置中心需要明确指定访问用户名和密码，命名空间才可以正常访问\n","source":"_posts/nacos-configuration-center-and-support-multi-configuration-files-zi2mmf.md","raw":"---\ntitle: Nacos配置中心并支持多配置文件\ndate: '2024-12-19 09:59:49'\nupdated: '2024-12-20 00:12:14'\npermalink: >-\n  /post/nacos-configuration-center-and-support-multi-configuration-files-zi2mmf.html\ncomments: true\ntoc: true\n---\n\n# Nacos配置中心并支持多配置文件\n\n### 一、引入依赖包\n\n---\n\n```xml\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n</dependency>\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n</dependency>\n```\n\n> discovery和config分别为注册中心客户端和配置中心客户端\n>\n> 注意：\n>\n> 1. config，引入这个配置中心的依赖后，需要使用bootstrap.yml作为中转配置文件，读取的优先级为bootstrap.yml>application.yml\n> 2. 配置中心地址结尾不能带斜杠 否者会报异常\n\n### 二、单文件配置\n\n---\n\n```yml\nspring:\n  application:\n    name: onedata\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://172.20.23.140:80\n      config:\n         server-addr: http://172.20.23.140:80\n         group: DEFAULT_GROUP\n         file-extension: yml\n```\n\n三、多文件配置\n\n---\n\n1、创建bootstrap.yml,配置激活环境标识\n\n```yml\nspring:\n  profiles:\n    active: dev\n```\n\n2、创建bootstrap-dev.yml文件，配置连接nacos服务中心，加载多个配置文件\n\n**写法一：**\n\n```yml\nspring:\n  application:\n    name: mybatis-plus-join-practice\n  #配置nacos注册中心和配置中心\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://xxx:8848\n        username: nacos\n        password: nacos\n        namespace: dev\n        group: MYBATIS-PLUS-JOIN-PRACTICE\n      config:\n        server-addr: ${spring.cloud.nacos.discovery.server-addr}\n        username: ${spring.cloud.nacos.discovery.username}\n        password: ${spring.cloud.nacos.discovery.password}\n        namespace: ${spring.cloud.nacos.discovery.namespace}\n        file-extension: yml  # yaml格式\n        extension-configs:\n          - data-id: application.yml\n            group: ${spring.cloud.nacos.discovery.group}\n            refresh: true\n \n          - data-id: datasource.yml\n            group: ${spring.cloud.nacos.discovery.group}\n            refresh: true\n```\n\n**写法二：**\n\n```yaml\nspring:\n  application:\n    name: mybatis-plus-join-practice\n  #配置nacos注册中心和配置中心\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://xxx:8848\n        username: nacos\n        password: nacos\n        namespace: dev\n        group: MYBATIS-PLUS-JOIN-PRACTICE\n      config:\n        server-addr: ${spring.cloud.nacos.discovery.server-addr}\n        username: ${spring.cloud.nacos.discovery.username}\n        password: ${spring.cloud.nacos.discovery.password}\n        namespace: ${spring.cloud.nacos.discovery.namespace}\n        extension-configs[0]:\n          data-id: application.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n \n        extension-configs[1]:\n          data-id: datasource.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n```\n\n**写法三：**\n\n```yaml\nspring:\n  application:\n    name: mybatis-plus-join-practice\n  #配置nacos注册中心和配置中心\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://xxx:8848\n        username: nacos\n        password: nacos\n        namespace: dev\n        group: MYBATIS-PLUS-JOIN-PRACTICE\n      config:\n        server-addr: ${spring.cloud.nacos.discovery.server-addr}\n        username: ${spring.cloud.nacos.discovery.username}\n        password: ${spring.cloud.nacos.discovery.password}\n        namespace: ${spring.cloud.nacos.discovery.namespace}\n        shared-configs[0]:\n          data-id: application.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n \n        shared-configs[1]:\n          data-id: datasource.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n```\n\n说明： 1、以上三种写法都支持加载多个配置文件 1、内容中 extension-configs\\[0\\]、shared-configs\\[0\\] 加载的是 application.yml 配置文件 2、内容中 extension-configs\\[1\\]、shared-configs\\[1\\] 加载的是 datasource.yml 配置文件 3、配置文件在激活标识的 dev 环境的 MYBATIS-PLUS-PRACTICE 分组下\n\n> 1、在实际应用中，可以使用多文件配置，把spring配置和数据源配置分开\n>\n> 2、可以使用命名空间区分不同的环境，例如：dev,sit,uat等环境\n>\n> 3、权限控制开启方式，在conf/applicaiton.properties文件中修改属性值即可，如下\n>\n> `nacos.core.auth.enabled=true`\n>\n> 4、如果服务端开启了权限控制，注册中心和配置中心需要明确指定访问用户名和密码，命名空间才可以正常访问\n","slug":"nacos-configuration-center-and-support-multi-configuration-files-zi2mmf","published":1,"__permalink":"/post/nacos-configuration-center-and-support-multi-configuration-files-zi2mmf.html","layout":"post","photos":[],"_id":"cm4zhl9ap0003n1bm2rxf0b02","content":"<h1 id=\"Nacos配置中心并支持多配置文件\"><a href=\"#Nacos配置中心并支持多配置文件\" class=\"headerlink\" title=\"Nacos配置中心并支持多配置文件\"></a>Nacos配置中心并支持多配置文件</h1><h3 id=\"一、引入依赖包\"><a href=\"#一、引入依赖包\" class=\"headerlink\" title=\"一、引入依赖包\"></a>一、引入依赖包</h3><hr>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>discovery和config分别为注册中心客户端和配置中心客户端</p>\n<p>注意：</p>\n<ol>\n<li>config，引入这个配置中心的依赖后，需要使用bootstrap.yml作为中转配置文件，读取的优先级为bootstrap.yml&gt;application.yml</li>\n<li>配置中心地址结尾不能带斜杠 否者会报异常</li>\n</ol>\n</blockquote>\n<h3 id=\"二、单文件配置\"><a href=\"#二、单文件配置\" class=\"headerlink\" title=\"二、单文件配置\"></a>二、单文件配置</h3><hr>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">onedata</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://172.20.23.140:80</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">         <span class=\"attr\">server-addr:</span> <span class=\"string\">http://172.20.23.140:80</span></span><br><span class=\"line\">         <span class=\"attr\">group:</span> <span class=\"string\">DEFAULT_GROUP</span></span><br><span class=\"line\">         <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br></pre></td></tr></table></figure>\n\n<p>三、多文件配置</p>\n<hr>\n<p>1、创建bootstrap.yml,配置激活环境标识</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<p>2、创建bootstrap-dev.yml文件，配置连接nacos服务中心，加载多个配置文件</p>\n<p><strong>写法一：</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mybatis-plus-join-practice</span></span><br><span class=\"line\">  <span class=\"comment\">#配置nacos注册中心和配置中心</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://xxx:8848</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">        <span class=\"attr\">group:</span> <span class=\"string\">MYBATIS-PLUS-JOIN-PRACTICE</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.username&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.password&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.namespace&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span>  <span class=\"comment\"># yaml格式</span></span><br><span class=\"line\">        <span class=\"attr\">extension-configs:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">data-id:</span> <span class=\"string\">application.yml</span></span><br><span class=\"line\">            <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">data-id:</span> <span class=\"string\">datasource.yml</span></span><br><span class=\"line\">            <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>写法二：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mybatis-plus-join-practice</span></span><br><span class=\"line\">  <span class=\"comment\">#配置nacos注册中心和配置中心</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://xxx:8848</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">        <span class=\"attr\">group:</span> <span class=\"string\">MYBATIS-PLUS-JOIN-PRACTICE</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.username&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.password&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.namespace&#125;</span></span><br><span class=\"line\">        <span class=\"string\">extension-configs[0]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">application.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"string\">extension-configs[1]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">datasource.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>写法三：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mybatis-plus-join-practice</span></span><br><span class=\"line\">  <span class=\"comment\">#配置nacos注册中心和配置中心</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://xxx:8848</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">        <span class=\"attr\">group:</span> <span class=\"string\">MYBATIS-PLUS-JOIN-PRACTICE</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.username&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.password&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.namespace&#125;</span></span><br><span class=\"line\">        <span class=\"string\">shared-configs[0]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">application.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"string\">shared-configs[1]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">datasource.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br></pre></td></tr></table></figure>\n\n<p>说明： 1、以上三种写法都支持加载多个配置文件 1、内容中 extension-configs[0]、shared-configs[0] 加载的是 application.yml 配置文件 2、内容中 extension-configs[1]、shared-configs[1] 加载的是 datasource.yml 配置文件 3、配置文件在激活标识的 dev 环境的 MYBATIS-PLUS-PRACTICE 分组下</p>\n<blockquote>\n<p>1、在实际应用中，可以使用多文件配置，把spring配置和数据源配置分开</p>\n<p>2、可以使用命名空间区分不同的环境，例如：dev,sit,uat等环境</p>\n<p>3、权限控制开启方式，在conf&#x2F;applicaiton.properties文件中修改属性值即可，如下</p>\n<p><code>nacos.core.auth.enabled=true</code></p>\n<p>4、如果服务端开启了权限控制，注册中心和配置中心需要明确指定访问用户名和密码，命名空间才可以正常访问</p>\n</blockquote>\n","cover":false,"excerpt":"","more":"<h1 id=\"Nacos配置中心并支持多配置文件\"><a href=\"#Nacos配置中心并支持多配置文件\" class=\"headerlink\" title=\"Nacos配置中心并支持多配置文件\"></a>Nacos配置中心并支持多配置文件</h1><h3 id=\"一、引入依赖包\"><a href=\"#一、引入依赖包\" class=\"headerlink\" title=\"一、引入依赖包\"></a>一、引入依赖包</h3><hr>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>discovery和config分别为注册中心客户端和配置中心客户端</p>\n<p>注意：</p>\n<ol>\n<li>config，引入这个配置中心的依赖后，需要使用bootstrap.yml作为中转配置文件，读取的优先级为bootstrap.yml&gt;application.yml</li>\n<li>配置中心地址结尾不能带斜杠 否者会报异常</li>\n</ol>\n</blockquote>\n<h3 id=\"二、单文件配置\"><a href=\"#二、单文件配置\" class=\"headerlink\" title=\"二、单文件配置\"></a>二、单文件配置</h3><hr>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">onedata</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://172.20.23.140:80</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">         <span class=\"attr\">server-addr:</span> <span class=\"string\">http://172.20.23.140:80</span></span><br><span class=\"line\">         <span class=\"attr\">group:</span> <span class=\"string\">DEFAULT_GROUP</span></span><br><span class=\"line\">         <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br></pre></td></tr></table></figure>\n\n<p>三、多文件配置</p>\n<hr>\n<p>1、创建bootstrap.yml,配置激活环境标识</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<p>2、创建bootstrap-dev.yml文件，配置连接nacos服务中心，加载多个配置文件</p>\n<p><strong>写法一：</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mybatis-plus-join-practice</span></span><br><span class=\"line\">  <span class=\"comment\">#配置nacos注册中心和配置中心</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://xxx:8848</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">        <span class=\"attr\">group:</span> <span class=\"string\">MYBATIS-PLUS-JOIN-PRACTICE</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.username&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.password&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.namespace&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span>  <span class=\"comment\"># yaml格式</span></span><br><span class=\"line\">        <span class=\"attr\">extension-configs:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">data-id:</span> <span class=\"string\">application.yml</span></span><br><span class=\"line\">            <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">data-id:</span> <span class=\"string\">datasource.yml</span></span><br><span class=\"line\">            <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>写法二：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mybatis-plus-join-practice</span></span><br><span class=\"line\">  <span class=\"comment\">#配置nacos注册中心和配置中心</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://xxx:8848</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">        <span class=\"attr\">group:</span> <span class=\"string\">MYBATIS-PLUS-JOIN-PRACTICE</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.username&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.password&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.namespace&#125;</span></span><br><span class=\"line\">        <span class=\"string\">extension-configs[0]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">application.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"string\">extension-configs[1]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">datasource.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>写法三：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mybatis-plus-join-practice</span></span><br><span class=\"line\">  <span class=\"comment\">#配置nacos注册中心和配置中心</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://xxx:8848</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">        <span class=\"attr\">group:</span> <span class=\"string\">MYBATIS-PLUS-JOIN-PRACTICE</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.username&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.password&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.namespace&#125;</span></span><br><span class=\"line\">        <span class=\"string\">shared-configs[0]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">application.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"string\">shared-configs[1]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">datasource.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br></pre></td></tr></table></figure>\n\n<p>说明： 1、以上三种写法都支持加载多个配置文件 1、内容中 extension-configs[0]、shared-configs[0] 加载的是 application.yml 配置文件 2、内容中 extension-configs[1]、shared-configs[1] 加载的是 datasource.yml 配置文件 3、配置文件在激活标识的 dev 环境的 MYBATIS-PLUS-PRACTICE 分组下</p>\n<blockquote>\n<p>1、在实际应用中，可以使用多文件配置，把spring配置和数据源配置分开</p>\n<p>2、可以使用命名空间区分不同的环境，例如：dev,sit,uat等环境</p>\n<p>3、权限控制开启方式，在conf&#x2F;applicaiton.properties文件中修改属性值即可，如下</p>\n<p><code>nacos.core.auth.enabled=true</code></p>\n<p>4、如果服务端开启了权限控制，注册中心和配置中心需要明确指定访问用户名和密码，命名空间才可以正常访问</p>\n</blockquote>\n"},{"title":"nginx安装部署","date":"2024-12-19T01:56:33.000Z","updated":"2024-12-20T01:30:32.000Z","excerpt":"本文介绍了Nginx的安装部署方法，包括Docker部署、源码部署和包管理工具安装三种方式。Docker部署部分提供了docker-compose.yml配置文件，用于设置Nginx容器的端口映射、环境变量、卷挂载等。源码部署部分详细说明了依赖安装、创建用户和组、编译安装Nginx的步骤，并提供了查看模块和操作命令的方法。包管理工具安装部分则分别介绍了在Ubuntu/Debian和CentOS/RHEL系统上使用apt和yum/dnf安装Nginx的步骤，包括添加仓库、安装、启动服务和设置开机自启动等。","comments":1,"toc":true,"_content":"\n# nginx安装部署\n\n# nginx安装部署\n\n## docker部署\n\n---\n\n**docker-compose.yml**\n\n```yaml\nversion: '3'\nservices:\n  nginx:\n    image: nginx:1.23.1\n    ports:\n    - 443:443\n    - 80:80\n    environment:\n      TZ: Asia/Shanghai\n    volumes:\n     - ./conf.d:/etc/nginx/conf.d:Z\n     - ./nginx.conf:/etc/nginx/nginx.conf:ro\n     - ./ssl:/etc/nginx/ssl_key:Z\n     - ./logs:/var/log/nginx:Z\n     - ./html:/etc/nginx/html:Z\n    command: [nginx-debug,'-g','daemon off;']\n```\n\n文件夹规划 nginx\n\n|-conf.d #文件夹，用于存放server的配置#​\n\n|-ssl.conf ## https配置文件\n\n|-docker-compose.yaml ## 主的docker-compose配置文件\n\n|-html ## 作为前端服务器用于存放前端文件\n\n|-logs ## 日志文件信息\n\n|-nginx.conf ## nginx主的配置文件，通用的http配置都放在这里\n\n|-ssl ## crt key的存放地址\n\n## 源码部署\n\n---\n\n### 依赖安装\n\n```shell\nyum -y install openssl openssl-devel make zlib zlib-devel gcc gcc-c++ libtool    pcre pcre-devel\n```\n\n### 创建没有登录的用户和用户组\n\n```shell\ngroupadd -r nginx\n\nuseradd -r -g nginx -s /sbin/nologin -d /usr/local/nginx -M nginx\n```\n\n* \\-r: 添加系统用户( 这里指将要被创建的系统用户`nginx`)\n* \\-g: 指定要创建的用户所属组( 这里指添加新系统用户`nginx`到`nginx`系统用户组 )\n* \\-s: 新帐户的登录`shell`( `/sbin/nologin` 这里设置为将要被创建系统用户`nginx`不能用来登录系统 )\n* \\-d: 新帐户的主目录( 这里指定将要被创建的系统用户`nginx`的家目录为 `/usr/local/nginx` )\n* \\-M: 不要创建用户的主目录( 也就是说将要被创建的系统用户`nginx`不会在 `/home` 目录下创建 `nginx` 家目录 )\n\n### 源码安装nginx\n\n```shell\nwget http://nginx.org/download/nginx-1.23.1.tar.gz\ntar -zvxf nginx-1.23.1.tar.gz -C ./nginx\ncd nginx/nginx-1.23.1\n./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module \nmake && make install\n```\n\n### 查看内置模块\n\n```shell\ncat ./auto/options |grep YES\n```\n\n### 查看自定义模块\n\n```shell\nnginx -V\n```\n\n### 操作命令\n\n```bash\ncd /usr/local/nginx/sbin\nnginx -c nginx.conf  # 启动\nnginx -s stop  # 关闭\nnginx -s reload # 重新加载配置\nnginx -s quit # 重启，先停止在启动\n```\n\n### 开机自启动\n\n在`rc.local`增加启动代码即可\n\n```bash\nvi /etc/rc.local\n /usr/local/nignx/sbin/nginx  -c /usr/local/nginx/conf/nginx.conf\n```\n\n设置rc.local的文件执行权限\n\n```bash\nchmod 755 rc.local\n```\n\n## 包管理工具安装\n\n安装 Nginx 可以使用多种包管理工具，具体取决于你的操作系统。以下是常见操作系统的安装方法:\n\n---\n\n### **1. 在 Ubuntu/Debian 上安装 Nginx**\n\n#### 使用 `apt`​ 包管理工具：\n\n1. **更新包列表**：\n\n    ```bash\n    sudo apt update\n    ```\n2. **安装 Nginx**：\n\n    ```bash\n    sudo apt install nginx\n    ```\n3. **启动 Nginx 服务**：\n\n    ```bash\n    sudo systemctl start nginx\n    ```\n4. **设置 Nginx 开机自启动**：\n\n    ```\n    sudo systemctl enable nginx\n    ```\n5. **验证安装**：  \n    打开浏览器，访问 `http://localhost`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### **2. 在 CentOS/RHEL 上安装 Nginx**\n\n#### 使用 `yum`​ 或 `dnf`​ 包管理工具：\n\n1. **添加 Nginx 官方仓库**：  \n    创建一个文件 `/etc/yum.repos.d/nginx.repo`​，并添加以下内容：\n\n    ```ini\n    [nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=0enabled=1\n    ```\n2. **安装 Nginx**：\n\n    ```bash\n    sudo yum install nginx\n    ```\n\n    或者使用 `dnf`​（适用于 CentOS 8+）：\n\n    ```bash\n    sudo dnf install nginx\n    ```\n3. **启动 Nginx 服务**：\n\n    ```bash\n    sudo systemctl start nginx\n    ```\n4. **设置 Nginx 开机自启动**：\n\n    ```\n    sudo systemctl enable nginx\n    ```\n5. **验证安装**：  \n    打开浏览器，访问 `http://<服务器IP>`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### **3. 在 macOS 上安装 Nginx**\n\n#### 使用 `Homebrew`​ 包管理工具：\n\n1. **安装 Homebrew**（如果尚未安装）：\n\n    ```\n    /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n    ```\n2. **安装 Nginx**：\n\n    ```\n    brew install nginx\n    ```\n3. **启动 Nginx 服务**：\n\n    ```\n    brew services start nginx\n    ```\n4. **验证安装**：  \n    打开浏览器，访问 `http://localhost:8080`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### **4. 在 Windows 上安装 Nginx**\n\nWindows 上没有直接的包管理工具安装 Nginx，但可以通过以下方式安装：\n\n1. **下载 Nginx**：  \n    访问 [Nginx 官方网站](http://nginx.org/en/download.html)，下载适合 Windows 的版本。\n2. **解压并运行**：\n\n    * 将下载的压缩包解压到一个目录（例如 `C:\\nginx`​）。\n    * 打开命令提示符，进入解压后的目录：\n\n      ```cmd\n      cd C:\\nginx\n      ```\n    * 启动 Nginx：\n\n      ```cmd\n      start nginx\n      ```\n3. **验证安装**：  \n    打开浏览器，访问 `http://localhost`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### 总结\n\n|操作系统|包管理工具|安装命令|\n| ---------------| ------------| -------------------------|\n|Ubuntu/Debian|​`apt`​|​`sudo apt install nginx`​|\n|CentOS/RHEL|​`yum/dnf`​|​`sudo yum install nginx`​|\n|macOS|​`Homebrew`​|​`brew install nginx`​|\n|Windows|手动安装|下载并解压 Nginx 压缩包|\n\n根据你的操作系统选择合适的安装方法即可。\n","source":"_posts/nginx-installation-deployment-z1jtjzq.md","raw":"---\ntitle: nginx安装部署\ndate: '2024-12-19 09:56:33'\nupdated: '2024-12-20 09:30:32'\nexcerpt: >-\n  本文介绍了Nginx的安装部署方法，包括Docker部署、源码部署和包管理工具安装三种方式。Docker部署部分提供了docker-compose.yml配置文件，用于设置Nginx容器的端口映射、环境变量、卷挂载等。源码部署部分详细说明了依赖安装、创建用户和组、编译安装Nginx的步骤，并提供了查看模块和操作命令的方法。包管理工具安装部分则分别介绍了在Ubuntu/Debian和CentOS/RHEL系统上使用apt和yum/dnf安装Nginx的步骤，包括添加仓库、安装、启动服务和设置开机自启动等。\ntags:\n  - nginx\n  - docker\n  - 源码部署\n  - 包管理\n  - 开机自启\ncategories:\n  - 部署指南\n  - 安装教程\n  - 配置管理\npermalink: /post/nginx-installation-deployment-z1jtjzq.html\ncomments: true\ntoc: true\n---\n\n# nginx安装部署\n\n# nginx安装部署\n\n## docker部署\n\n---\n\n**docker-compose.yml**\n\n```yaml\nversion: '3'\nservices:\n  nginx:\n    image: nginx:1.23.1\n    ports:\n    - 443:443\n    - 80:80\n    environment:\n      TZ: Asia/Shanghai\n    volumes:\n     - ./conf.d:/etc/nginx/conf.d:Z\n     - ./nginx.conf:/etc/nginx/nginx.conf:ro\n     - ./ssl:/etc/nginx/ssl_key:Z\n     - ./logs:/var/log/nginx:Z\n     - ./html:/etc/nginx/html:Z\n    command: [nginx-debug,'-g','daemon off;']\n```\n\n文件夹规划 nginx\n\n|-conf.d #文件夹，用于存放server的配置#​\n\n|-ssl.conf ## https配置文件\n\n|-docker-compose.yaml ## 主的docker-compose配置文件\n\n|-html ## 作为前端服务器用于存放前端文件\n\n|-logs ## 日志文件信息\n\n|-nginx.conf ## nginx主的配置文件，通用的http配置都放在这里\n\n|-ssl ## crt key的存放地址\n\n## 源码部署\n\n---\n\n### 依赖安装\n\n```shell\nyum -y install openssl openssl-devel make zlib zlib-devel gcc gcc-c++ libtool    pcre pcre-devel\n```\n\n### 创建没有登录的用户和用户组\n\n```shell\ngroupadd -r nginx\n\nuseradd -r -g nginx -s /sbin/nologin -d /usr/local/nginx -M nginx\n```\n\n* \\-r: 添加系统用户( 这里指将要被创建的系统用户`nginx`)\n* \\-g: 指定要创建的用户所属组( 这里指添加新系统用户`nginx`到`nginx`系统用户组 )\n* \\-s: 新帐户的登录`shell`( `/sbin/nologin` 这里设置为将要被创建系统用户`nginx`不能用来登录系统 )\n* \\-d: 新帐户的主目录( 这里指定将要被创建的系统用户`nginx`的家目录为 `/usr/local/nginx` )\n* \\-M: 不要创建用户的主目录( 也就是说将要被创建的系统用户`nginx`不会在 `/home` 目录下创建 `nginx` 家目录 )\n\n### 源码安装nginx\n\n```shell\nwget http://nginx.org/download/nginx-1.23.1.tar.gz\ntar -zvxf nginx-1.23.1.tar.gz -C ./nginx\ncd nginx/nginx-1.23.1\n./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module \nmake && make install\n```\n\n### 查看内置模块\n\n```shell\ncat ./auto/options |grep YES\n```\n\n### 查看自定义模块\n\n```shell\nnginx -V\n```\n\n### 操作命令\n\n```bash\ncd /usr/local/nginx/sbin\nnginx -c nginx.conf  # 启动\nnginx -s stop  # 关闭\nnginx -s reload # 重新加载配置\nnginx -s quit # 重启，先停止在启动\n```\n\n### 开机自启动\n\n在`rc.local`增加启动代码即可\n\n```bash\nvi /etc/rc.local\n /usr/local/nignx/sbin/nginx  -c /usr/local/nginx/conf/nginx.conf\n```\n\n设置rc.local的文件执行权限\n\n```bash\nchmod 755 rc.local\n```\n\n## 包管理工具安装\n\n安装 Nginx 可以使用多种包管理工具，具体取决于你的操作系统。以下是常见操作系统的安装方法:\n\n---\n\n### **1. 在 Ubuntu/Debian 上安装 Nginx**\n\n#### 使用 `apt`​ 包管理工具：\n\n1. **更新包列表**：\n\n    ```bash\n    sudo apt update\n    ```\n2. **安装 Nginx**：\n\n    ```bash\n    sudo apt install nginx\n    ```\n3. **启动 Nginx 服务**：\n\n    ```bash\n    sudo systemctl start nginx\n    ```\n4. **设置 Nginx 开机自启动**：\n\n    ```\n    sudo systemctl enable nginx\n    ```\n5. **验证安装**：  \n    打开浏览器，访问 `http://localhost`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### **2. 在 CentOS/RHEL 上安装 Nginx**\n\n#### 使用 `yum`​ 或 `dnf`​ 包管理工具：\n\n1. **添加 Nginx 官方仓库**：  \n    创建一个文件 `/etc/yum.repos.d/nginx.repo`​，并添加以下内容：\n\n    ```ini\n    [nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=0enabled=1\n    ```\n2. **安装 Nginx**：\n\n    ```bash\n    sudo yum install nginx\n    ```\n\n    或者使用 `dnf`​（适用于 CentOS 8+）：\n\n    ```bash\n    sudo dnf install nginx\n    ```\n3. **启动 Nginx 服务**：\n\n    ```bash\n    sudo systemctl start nginx\n    ```\n4. **设置 Nginx 开机自启动**：\n\n    ```\n    sudo systemctl enable nginx\n    ```\n5. **验证安装**：  \n    打开浏览器，访问 `http://<服务器IP>`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### **3. 在 macOS 上安装 Nginx**\n\n#### 使用 `Homebrew`​ 包管理工具：\n\n1. **安装 Homebrew**（如果尚未安装）：\n\n    ```\n    /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n    ```\n2. **安装 Nginx**：\n\n    ```\n    brew install nginx\n    ```\n3. **启动 Nginx 服务**：\n\n    ```\n    brew services start nginx\n    ```\n4. **验证安装**：  \n    打开浏览器，访问 `http://localhost:8080`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### **4. 在 Windows 上安装 Nginx**\n\nWindows 上没有直接的包管理工具安装 Nginx，但可以通过以下方式安装：\n\n1. **下载 Nginx**：  \n    访问 [Nginx 官方网站](http://nginx.org/en/download.html)，下载适合 Windows 的版本。\n2. **解压并运行**：\n\n    * 将下载的压缩包解压到一个目录（例如 `C:\\nginx`​）。\n    * 打开命令提示符，进入解压后的目录：\n\n      ```cmd\n      cd C:\\nginx\n      ```\n    * 启动 Nginx：\n\n      ```cmd\n      start nginx\n      ```\n3. **验证安装**：  \n    打开浏览器，访问 `http://localhost`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### 总结\n\n|操作系统|包管理工具|安装命令|\n| ---------------| ------------| -------------------------|\n|Ubuntu/Debian|​`apt`​|​`sudo apt install nginx`​|\n|CentOS/RHEL|​`yum/dnf`​|​`sudo yum install nginx`​|\n|macOS|​`Homebrew`​|​`brew install nginx`​|\n|Windows|手动安装|下载并解压 Nginx 压缩包|\n\n根据你的操作系统选择合适的安装方法即可。\n","slug":"nginx-installation-deployment-z1jtjzq","published":1,"__permalink":"/post/nginx-installation-deployment-z1jtjzq.html","layout":"post","photos":[],"_id":"cm4zhl9ar0005n1bm544hdq39","content":"<h1 id=\"nginx安装部署\"><a href=\"#nginx安装部署\" class=\"headerlink\" title=\"nginx安装部署\"></a>nginx安装部署</h1><h1 id=\"nginx安装部署-1\"><a href=\"#nginx安装部署-1\" class=\"headerlink\" title=\"nginx安装部署\"></a>nginx安装部署</h1><h2 id=\"docker部署\"><a href=\"#docker部署\" class=\"headerlink\" title=\"docker部署\"></a>docker部署</h2><hr>\n<p><strong>docker-compose.yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">nginx:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.23.1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">443</span><span class=\"string\">:443</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">80</span><span class=\"string\">:80</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">TZ:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./conf.d:/etc/nginx/conf.d:Z</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./nginx.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./ssl:/etc/nginx/ssl_key:Z</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./logs:/var/log/nginx:Z</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./html:/etc/nginx/html:Z</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">nginx-debug</span>,<span class=\"string\">&#x27;-g&#x27;</span>,<span class=\"string\">&#x27;daemon off;&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>文件夹规划 nginx</p>\n<p>|-conf.d #文件夹，用于存放server的配置#​</p>\n<p>|-ssl.conf ## https配置文件</p>\n<p>|-docker-compose.yaml ## 主的docker-compose配置文件</p>\n<p>|-html ## 作为前端服务器用于存放前端文件</p>\n<p>|-logs ## 日志文件信息</p>\n<p>|-nginx.conf ## nginx主的配置文件，通用的http配置都放在这里</p>\n<p>|-ssl ## crt key的存放地址</p>\n<h2 id=\"源码部署\"><a href=\"#源码部署\" class=\"headerlink\" title=\"源码部署\"></a>源码部署</h2><hr>\n<h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install openssl openssl-devel make zlib zlib-devel gcc gcc-c++ libtool    pcre pcre-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建没有登录的用户和用户组\"><a href=\"#创建没有登录的用户和用户组\" class=\"headerlink\" title=\"创建没有登录的用户和用户组\"></a>创建没有登录的用户和用户组</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd -r nginx</span><br><span class=\"line\"></span><br><span class=\"line\">useradd -r -g nginx -s /sbin/nologin -d /usr/local/nginx -M nginx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-r: 添加系统用户( 这里指将要被创建的系统用户<code>nginx</code>)</li>\n<li>-g: 指定要创建的用户所属组( 这里指添加新系统用户<code>nginx</code>到<code>nginx</code>系统用户组 )</li>\n<li>-s: 新帐户的登录<code>shell</code>( <code>/sbin/nologin</code> 这里设置为将要被创建系统用户<code>nginx</code>不能用来登录系统 )</li>\n<li>-d: 新帐户的主目录( 这里指定将要被创建的系统用户<code>nginx</code>的家目录为 <code>/usr/local/nginx</code> )</li>\n<li>-M: 不要创建用户的主目录( 也就是说将要被创建的系统用户<code>nginx</code>不会在 <code>/home</code> 目录下创建 <code>nginx</code> 家目录 )</li>\n</ul>\n<h3 id=\"源码安装nginx\"><a href=\"#源码安装nginx\" class=\"headerlink\" title=\"源码安装nginx\"></a>源码安装nginx</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.23.1.tar.gz</span><br><span class=\"line\">tar -zvxf nginx-1.23.1.tar.gz -C ./nginx</span><br><span class=\"line\">cd nginx/nginx-1.23.1</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module </span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看内置模块\"><a href=\"#查看内置模块\" class=\"headerlink\" title=\"查看内置模块\"></a>查看内置模块</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ./auto/options |grep YES</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看自定义模块\"><a href=\"#查看自定义模块\" class=\"headerlink\" title=\"查看自定义模块\"></a>查看自定义模块</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令\"></a>操作命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/nginx/sbin</span><br><span class=\"line\">nginx -c nginx.conf  <span class=\"comment\"># 启动</span></span><br><span class=\"line\">nginx -s stop  <span class=\"comment\"># 关闭</span></span><br><span class=\"line\">nginx -s reload <span class=\"comment\"># 重新加载配置</span></span><br><span class=\"line\">nginx -s quit <span class=\"comment\"># 重启，先停止在启动</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开机自启动\"><a href=\"#开机自启动\" class=\"headerlink\" title=\"开机自启动\"></a>开机自启动</h3><p>在<code>rc.local</code>增加启动代码即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/rc.local</span><br><span class=\"line\"> /usr/local/nignx/sbin/nginx  -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>设置rc.local的文件执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 755 rc.local</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包管理工具安装\"><a href=\"#包管理工具安装\" class=\"headerlink\" title=\"包管理工具安装\"></a>包管理工具安装</h2><p>安装 Nginx 可以使用多种包管理工具，具体取决于你的操作系统。以下是常见操作系统的安装方法:</p>\n<hr>\n<h3 id=\"1-在-Ubuntu-Debian-上安装-Nginx\"><a href=\"#1-在-Ubuntu-Debian-上安装-Nginx\" class=\"headerlink\" title=\"1. 在 Ubuntu&#x2F;Debian 上安装 Nginx\"></a><strong>1. 在 Ubuntu&#x2F;Debian 上安装 Nginx</strong></h3><h4 id=\"使用-apt​-包管理工具：\"><a href=\"#使用-apt​-包管理工具：\" class=\"headerlink\" title=\"使用 apt​ 包管理工具：\"></a>使用 <code>apt</code>​ 包管理工具：</h4><ol>\n<li><p><strong>更新包列表</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>安装 Nginx</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>启动 Nginx 服务</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>设置 Nginx 开机自启动</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://localhost</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"2-在-CentOS-RHEL-上安装-Nginx\"><a href=\"#2-在-CentOS-RHEL-上安装-Nginx\" class=\"headerlink\" title=\"2. 在 CentOS&#x2F;RHEL 上安装 Nginx\"></a><strong>2. 在 CentOS&#x2F;RHEL 上安装 Nginx</strong></h3><h4 id=\"使用-yum​-或-dnf​-包管理工具：\"><a href=\"#使用-yum​-或-dnf​-包管理工具：\" class=\"headerlink\" title=\"使用 yum​ 或 dnf​ 包管理工具：\"></a>使用 <code>yum</code>​ 或 <code>dnf</code>​ 包管理工具：</h4><ol>\n<li><p><strong>添加 Nginx 官方仓库</strong>：<br> 创建一个文件 <code>/etc/yum.repos.d/nginx.repo</code>​，并添加以下内容：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[nginx]</span><span class=\"attr\">name</span>=nginx repobaseurl=http://nginx.org/packages/centos/<span class=\"variable\">$releasever</span>/<span class=\"variable\">$basearch</span>/gpgcheck=<span class=\"number\">0</span>enabled=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>安装 Nginx</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> yum install nginx</span><br></pre></td></tr></table></figure>\n\n<p> 或者使用 <code>dnf</code>​（适用于 CentOS 8+）：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> dnf install nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>启动 Nginx 服务</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>设置 Nginx 开机自启动</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://&lt;服务器IP&gt;</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"3-在-macOS-上安装-Nginx\"><a href=\"#3-在-macOS-上安装-Nginx\" class=\"headerlink\" title=\"3. 在 macOS 上安装 Nginx\"></a><strong>3. 在 macOS 上安装 Nginx</strong></h3><h4 id=\"使用-Homebrew​-包管理工具：\"><a href=\"#使用-Homebrew​-包管理工具：\" class=\"headerlink\" title=\"使用 Homebrew​ 包管理工具：\"></a>使用 <code>Homebrew</code>​ 包管理工具：</h4><ol>\n<li><p><strong>安装 Homebrew</strong>（如果尚未安装）：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>安装 Nginx</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>启动 Nginx 服务</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://localhost:8080</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"4-在-Windows-上安装-Nginx\"><a href=\"#4-在-Windows-上安装-Nginx\" class=\"headerlink\" title=\"4. 在 Windows 上安装 Nginx\"></a><strong>4. 在 Windows 上安装 Nginx</strong></h3><p>Windows 上没有直接的包管理工具安装 Nginx，但可以通过以下方式安装：</p>\n<ol>\n<li><p><strong>下载 Nginx</strong>：<br> 访问 <a href=\"http://nginx.org/en/download.html\">Nginx 官方网站</a>，下载适合 Windows 的版本。</p>\n</li>\n<li><p><strong>解压并运行</strong>：</p>\n<ul>\n<li><p>将下载的压缩包解压到一个目录（例如 <code>C:\\nginx</code>​）。</p>\n</li>\n<li><p>打开命令提示符，进入解压后的目录：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> C:\\nginx</span><br></pre></td></tr></table></figure></li>\n<li><p>启动 Nginx：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">start</span> nginx</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://localhost</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><table>\n<thead>\n<tr>\n<th>操作系统</th>\n<th>包管理工具</th>\n<th>安装命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ubuntu&#x2F;Debian</td>\n<td>​<code>apt</code>​</td>\n<td>​<code>sudo apt install nginx</code>​</td>\n</tr>\n<tr>\n<td>CentOS&#x2F;RHEL</td>\n<td>​<code>yum/dnf</code>​</td>\n<td>​<code>sudo yum install nginx</code>​</td>\n</tr>\n<tr>\n<td>macOS</td>\n<td>​<code>Homebrew</code>​</td>\n<td>​<code>brew install nginx</code>​</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>手动安装</td>\n<td>下载并解压 Nginx 压缩包</td>\n</tr>\n</tbody></table>\n<p>根据你的操作系统选择合适的安装方法即可。</p>\n","cover":false,"more":"<h1 id=\"nginx安装部署\"><a href=\"#nginx安装部署\" class=\"headerlink\" title=\"nginx安装部署\"></a>nginx安装部署</h1><h1 id=\"nginx安装部署-1\"><a href=\"#nginx安装部署-1\" class=\"headerlink\" title=\"nginx安装部署\"></a>nginx安装部署</h1><h2 id=\"docker部署\"><a href=\"#docker部署\" class=\"headerlink\" title=\"docker部署\"></a>docker部署</h2><hr>\n<p><strong>docker-compose.yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">nginx:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.23.1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">443</span><span class=\"string\">:443</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">80</span><span class=\"string\">:80</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">TZ:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./conf.d:/etc/nginx/conf.d:Z</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./nginx.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./ssl:/etc/nginx/ssl_key:Z</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./logs:/var/log/nginx:Z</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./html:/etc/nginx/html:Z</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">nginx-debug</span>,<span class=\"string\">&#x27;-g&#x27;</span>,<span class=\"string\">&#x27;daemon off;&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>文件夹规划 nginx</p>\n<p>|-conf.d #文件夹，用于存放server的配置#​</p>\n<p>|-ssl.conf ## https配置文件</p>\n<p>|-docker-compose.yaml ## 主的docker-compose配置文件</p>\n<p>|-html ## 作为前端服务器用于存放前端文件</p>\n<p>|-logs ## 日志文件信息</p>\n<p>|-nginx.conf ## nginx主的配置文件，通用的http配置都放在这里</p>\n<p>|-ssl ## crt key的存放地址</p>\n<h2 id=\"源码部署\"><a href=\"#源码部署\" class=\"headerlink\" title=\"源码部署\"></a>源码部署</h2><hr>\n<h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install openssl openssl-devel make zlib zlib-devel gcc gcc-c++ libtool    pcre pcre-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建没有登录的用户和用户组\"><a href=\"#创建没有登录的用户和用户组\" class=\"headerlink\" title=\"创建没有登录的用户和用户组\"></a>创建没有登录的用户和用户组</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd -r nginx</span><br><span class=\"line\"></span><br><span class=\"line\">useradd -r -g nginx -s /sbin/nologin -d /usr/local/nginx -M nginx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-r: 添加系统用户( 这里指将要被创建的系统用户<code>nginx</code>)</li>\n<li>-g: 指定要创建的用户所属组( 这里指添加新系统用户<code>nginx</code>到<code>nginx</code>系统用户组 )</li>\n<li>-s: 新帐户的登录<code>shell</code>( <code>/sbin/nologin</code> 这里设置为将要被创建系统用户<code>nginx</code>不能用来登录系统 )</li>\n<li>-d: 新帐户的主目录( 这里指定将要被创建的系统用户<code>nginx</code>的家目录为 <code>/usr/local/nginx</code> )</li>\n<li>-M: 不要创建用户的主目录( 也就是说将要被创建的系统用户<code>nginx</code>不会在 <code>/home</code> 目录下创建 <code>nginx</code> 家目录 )</li>\n</ul>\n<h3 id=\"源码安装nginx\"><a href=\"#源码安装nginx\" class=\"headerlink\" title=\"源码安装nginx\"></a>源码安装nginx</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.23.1.tar.gz</span><br><span class=\"line\">tar -zvxf nginx-1.23.1.tar.gz -C ./nginx</span><br><span class=\"line\">cd nginx/nginx-1.23.1</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module </span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看内置模块\"><a href=\"#查看内置模块\" class=\"headerlink\" title=\"查看内置模块\"></a>查看内置模块</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ./auto/options |grep YES</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看自定义模块\"><a href=\"#查看自定义模块\" class=\"headerlink\" title=\"查看自定义模块\"></a>查看自定义模块</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令\"></a>操作命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/nginx/sbin</span><br><span class=\"line\">nginx -c nginx.conf  <span class=\"comment\"># 启动</span></span><br><span class=\"line\">nginx -s stop  <span class=\"comment\"># 关闭</span></span><br><span class=\"line\">nginx -s reload <span class=\"comment\"># 重新加载配置</span></span><br><span class=\"line\">nginx -s quit <span class=\"comment\"># 重启，先停止在启动</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开机自启动\"><a href=\"#开机自启动\" class=\"headerlink\" title=\"开机自启动\"></a>开机自启动</h3><p>在<code>rc.local</code>增加启动代码即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/rc.local</span><br><span class=\"line\"> /usr/local/nignx/sbin/nginx  -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>设置rc.local的文件执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 755 rc.local</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包管理工具安装\"><a href=\"#包管理工具安装\" class=\"headerlink\" title=\"包管理工具安装\"></a>包管理工具安装</h2><p>安装 Nginx 可以使用多种包管理工具，具体取决于你的操作系统。以下是常见操作系统的安装方法:</p>\n<hr>\n<h3 id=\"1-在-Ubuntu-Debian-上安装-Nginx\"><a href=\"#1-在-Ubuntu-Debian-上安装-Nginx\" class=\"headerlink\" title=\"1. 在 Ubuntu&#x2F;Debian 上安装 Nginx\"></a><strong>1. 在 Ubuntu&#x2F;Debian 上安装 Nginx</strong></h3><h4 id=\"使用-apt​-包管理工具：\"><a href=\"#使用-apt​-包管理工具：\" class=\"headerlink\" title=\"使用 apt​ 包管理工具：\"></a>使用 <code>apt</code>​ 包管理工具：</h4><ol>\n<li><p><strong>更新包列表</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>安装 Nginx</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>启动 Nginx 服务</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>设置 Nginx 开机自启动</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://localhost</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"2-在-CentOS-RHEL-上安装-Nginx\"><a href=\"#2-在-CentOS-RHEL-上安装-Nginx\" class=\"headerlink\" title=\"2. 在 CentOS&#x2F;RHEL 上安装 Nginx\"></a><strong>2. 在 CentOS&#x2F;RHEL 上安装 Nginx</strong></h3><h4 id=\"使用-yum​-或-dnf​-包管理工具：\"><a href=\"#使用-yum​-或-dnf​-包管理工具：\" class=\"headerlink\" title=\"使用 yum​ 或 dnf​ 包管理工具：\"></a>使用 <code>yum</code>​ 或 <code>dnf</code>​ 包管理工具：</h4><ol>\n<li><p><strong>添加 Nginx 官方仓库</strong>：<br> 创建一个文件 <code>/etc/yum.repos.d/nginx.repo</code>​，并添加以下内容：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[nginx]</span><span class=\"attr\">name</span>=nginx repobaseurl=http://nginx.org/packages/centos/<span class=\"variable\">$releasever</span>/<span class=\"variable\">$basearch</span>/gpgcheck=<span class=\"number\">0</span>enabled=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>安装 Nginx</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> yum install nginx</span><br></pre></td></tr></table></figure>\n\n<p> 或者使用 <code>dnf</code>​（适用于 CentOS 8+）：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> dnf install nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>启动 Nginx 服务</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>设置 Nginx 开机自启动</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://&lt;服务器IP&gt;</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"3-在-macOS-上安装-Nginx\"><a href=\"#3-在-macOS-上安装-Nginx\" class=\"headerlink\" title=\"3. 在 macOS 上安装 Nginx\"></a><strong>3. 在 macOS 上安装 Nginx</strong></h3><h4 id=\"使用-Homebrew​-包管理工具：\"><a href=\"#使用-Homebrew​-包管理工具：\" class=\"headerlink\" title=\"使用 Homebrew​ 包管理工具：\"></a>使用 <code>Homebrew</code>​ 包管理工具：</h4><ol>\n<li><p><strong>安装 Homebrew</strong>（如果尚未安装）：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>安装 Nginx</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>启动 Nginx 服务</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://localhost:8080</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"4-在-Windows-上安装-Nginx\"><a href=\"#4-在-Windows-上安装-Nginx\" class=\"headerlink\" title=\"4. 在 Windows 上安装 Nginx\"></a><strong>4. 在 Windows 上安装 Nginx</strong></h3><p>Windows 上没有直接的包管理工具安装 Nginx，但可以通过以下方式安装：</p>\n<ol>\n<li><p><strong>下载 Nginx</strong>：<br> 访问 <a href=\"http://nginx.org/en/download.html\">Nginx 官方网站</a>，下载适合 Windows 的版本。</p>\n</li>\n<li><p><strong>解压并运行</strong>：</p>\n<ul>\n<li><p>将下载的压缩包解压到一个目录（例如 <code>C:\\nginx</code>​）。</p>\n</li>\n<li><p>打开命令提示符，进入解压后的目录：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> C:\\nginx</span><br></pre></td></tr></table></figure></li>\n<li><p>启动 Nginx：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">start</span> nginx</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://localhost</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><table>\n<thead>\n<tr>\n<th>操作系统</th>\n<th>包管理工具</th>\n<th>安装命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ubuntu&#x2F;Debian</td>\n<td>​<code>apt</code>​</td>\n<td>​<code>sudo apt install nginx</code>​</td>\n</tr>\n<tr>\n<td>CentOS&#x2F;RHEL</td>\n<td>​<code>yum/dnf</code>​</td>\n<td>​<code>sudo yum install nginx</code>​</td>\n</tr>\n<tr>\n<td>macOS</td>\n<td>​<code>Homebrew</code>​</td>\n<td>​<code>brew install nginx</code>​</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>手动安装</td>\n<td>下载并解压 Nginx 压缩包</td>\n</tr>\n</tbody></table>\n<p>根据你的操作系统选择合适的安装方法即可。</p>\n"},{"title":"is-a 、have-a、和 like-a 的区别","date":"2024-12-19T15:27:21.000Z","updated":"2024-12-19T16:11:26.000Z","comments":1,"toc":true,"_content":"\n# is-a 、have-a、和 like-a 的区别\n\n### 1、is-a，has-a，like-a 是什么\n\n在面向对象设计的领域里，有若干种设计思路，主要有如下三种： \nis-a、has-a、like-a \njava 中在类、接口、抽象类中有很多体现。 \n了解 java 看这里：[什么是 Java](http://blog.csdn.net/ooppookid/article/details/51931003) \n了解类和对象看这里：[类、对象到底有什么秘密](http://blog.csdn.net/ooppookid/article/details/51161448) \n了解接口和抽象类看这里：[接口和抽象类有什么区别](http://blog.csdn.net/ooppookid/article/details/51173179)\n\n### 2、is-a 是什么\n\nis-a，顾名思义，是一个，代表继承关系。 \n如果 A is-a B，那么 B 就是 A 的父类。 \n一个类完全包含另一个类的所有属性及行为。 \n例如 PC 机是计算机，工作站也是计算机，PC 机和工作站是两种不同类型的计算机，但都继承了计算机的共同特性。因此在用 Java 语言实现时，应该将 PC 机和工作站定义成两种类，均继承计算机类。 \n了解更多继承看这里：[java 类的继承有什么意义](http://blog.csdn.net/ooppookid/article/details/51193477)\n\n### *3、has-a 是什么*\n\nhas-a，顾名思义，有一个，代表从属关系。 \n如果 A has a B，那么 B 就是 A 的组成部分。 \n同一种类的对象，通过它们的属性的不同值来区别。 \n例如一台 PC 机的操作系统是 Windows，另一台 PC 机的操作系统是 Linux。操作系统是 PC 机的一个成员变量，根据这一成员变量的不同值，可以区分不同的 PC 机对象。\n\n### 4、 like-a 是什么\n\nlike-a，顾名思义，像一个，代表组合关系。 \n如果 A like a B，那么 B 就是 A 的接口。 \n新类型有老类型的接口，但还包含其他函数，所以不能说它们完全相同。 \n例如一台手机可以说是一个微型计算机，但是手机的通讯功能显然不是计算机具备的行为，所以手机继承了计算机的特性，同时需要实现通讯功能，而通讯功能需要作为单独接口，而不是计算机的行为。\n\n### 5、is-a，has-a，like-a 如何应用\n\n如果你确定两件对象之间是 is-a 的关系，那么此时你应该使用继承；比如菱形、圆形和方形都是形状的一种，那么他们都应该从形状类继承。 \n如果你确定两件对象之间是 has-a 的关系，那么此时你应该使用聚合；比如电脑是由显示器、CPU、硬盘等组成的，那么你应该把显示器、CPU、硬盘这些类聚合成电脑类。 \n如果你确定两件对象之间是 like-a 的关系，那么此时你应该使用组合；比如空调继承于制冷机，但它同时有加热功能，那么你应该把让空调继承制冷机类，并实现加热接口。\n","source":"_posts/the-difference-between-isa-havea-and-likea-1u8avc.md","raw":"---\ntitle: is-a 、have-a、和 like-a 的区别\ndate: '2024-12-19 23:27:21'\nupdated: '2024-12-20 00:11:26'\npermalink: /post/the-difference-between-isa-havea-and-likea-1u8avc.html\ncomments: true\ntoc: true\n---\n\n# is-a 、have-a、和 like-a 的区别\n\n### 1、is-a，has-a，like-a 是什么\n\n在面向对象设计的领域里，有若干种设计思路，主要有如下三种： \nis-a、has-a、like-a \njava 中在类、接口、抽象类中有很多体现。 \n了解 java 看这里：[什么是 Java](http://blog.csdn.net/ooppookid/article/details/51931003) \n了解类和对象看这里：[类、对象到底有什么秘密](http://blog.csdn.net/ooppookid/article/details/51161448) \n了解接口和抽象类看这里：[接口和抽象类有什么区别](http://blog.csdn.net/ooppookid/article/details/51173179)\n\n### 2、is-a 是什么\n\nis-a，顾名思义，是一个，代表继承关系。 \n如果 A is-a B，那么 B 就是 A 的父类。 \n一个类完全包含另一个类的所有属性及行为。 \n例如 PC 机是计算机，工作站也是计算机，PC 机和工作站是两种不同类型的计算机，但都继承了计算机的共同特性。因此在用 Java 语言实现时，应该将 PC 机和工作站定义成两种类，均继承计算机类。 \n了解更多继承看这里：[java 类的继承有什么意义](http://blog.csdn.net/ooppookid/article/details/51193477)\n\n### *3、has-a 是什么*\n\nhas-a，顾名思义，有一个，代表从属关系。 \n如果 A has a B，那么 B 就是 A 的组成部分。 \n同一种类的对象，通过它们的属性的不同值来区别。 \n例如一台 PC 机的操作系统是 Windows，另一台 PC 机的操作系统是 Linux。操作系统是 PC 机的一个成员变量，根据这一成员变量的不同值，可以区分不同的 PC 机对象。\n\n### 4、 like-a 是什么\n\nlike-a，顾名思义，像一个，代表组合关系。 \n如果 A like a B，那么 B 就是 A 的接口。 \n新类型有老类型的接口，但还包含其他函数，所以不能说它们完全相同。 \n例如一台手机可以说是一个微型计算机，但是手机的通讯功能显然不是计算机具备的行为，所以手机继承了计算机的特性，同时需要实现通讯功能，而通讯功能需要作为单独接口，而不是计算机的行为。\n\n### 5、is-a，has-a，like-a 如何应用\n\n如果你确定两件对象之间是 is-a 的关系，那么此时你应该使用继承；比如菱形、圆形和方形都是形状的一种，那么他们都应该从形状类继承。 \n如果你确定两件对象之间是 has-a 的关系，那么此时你应该使用聚合；比如电脑是由显示器、CPU、硬盘等组成的，那么你应该把显示器、CPU、硬盘这些类聚合成电脑类。 \n如果你确定两件对象之间是 like-a 的关系，那么此时你应该使用组合；比如空调继承于制冷机，但它同时有加热功能，那么你应该把让空调继承制冷机类，并实现加热接口。\n","slug":"the-difference-between-isa-havea-and-likea-1u8avc","published":1,"__permalink":"/post/the-difference-between-isa-havea-and-likea-1u8avc.html","layout":"post","photos":[],"_id":"cm4zhl9as0007n1bmdhjdc4za","content":"<h1 id=\"is-a-、have-a、和-like-a-的区别\"><a href=\"#is-a-、have-a、和-like-a-的区别\" class=\"headerlink\" title=\"is-a 、have-a、和 like-a 的区别\"></a>is-a 、have-a、和 like-a 的区别</h1><h3 id=\"1、is-a，has-a，like-a-是什么\"><a href=\"#1、is-a，has-a，like-a-是什么\" class=\"headerlink\" title=\"1、is-a，has-a，like-a 是什么\"></a>1、is-a，has-a，like-a 是什么</h3><p>在面向对象设计的领域里，有若干种设计思路，主要有如下三种：<br>is-a、has-a、like-a<br>java 中在类、接口、抽象类中有很多体现。<br>了解 java 看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51931003\">什么是 Java</a><br>了解类和对象看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51161448\">类、对象到底有什么秘密</a><br>了解接口和抽象类看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51173179\">接口和抽象类有什么区别</a></p>\n<h3 id=\"2、is-a-是什么\"><a href=\"#2、is-a-是什么\" class=\"headerlink\" title=\"2、is-a 是什么\"></a>2、is-a 是什么</h3><p>is-a，顾名思义，是一个，代表继承关系。<br>如果 A is-a B，那么 B 就是 A 的父类。<br>一个类完全包含另一个类的所有属性及行为。<br>例如 PC 机是计算机，工作站也是计算机，PC 机和工作站是两种不同类型的计算机，但都继承了计算机的共同特性。因此在用 Java 语言实现时，应该将 PC 机和工作站定义成两种类，均继承计算机类。<br>了解更多继承看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51193477\">java 类的继承有什么意义</a></p>\n<h3 id=\"3、has-a-是什么\"><a href=\"#3、has-a-是什么\" class=\"headerlink\" title=\"3、has-a 是什么\"></a><em>3、has-a 是什么</em></h3><p>has-a，顾名思义，有一个，代表从属关系。<br>如果 A has a B，那么 B 就是 A 的组成部分。<br>同一种类的对象，通过它们的属性的不同值来区别。<br>例如一台 PC 机的操作系统是 Windows，另一台 PC 机的操作系统是 Linux。操作系统是 PC 机的一个成员变量，根据这一成员变量的不同值，可以区分不同的 PC 机对象。</p>\n<h3 id=\"4、-like-a-是什么\"><a href=\"#4、-like-a-是什么\" class=\"headerlink\" title=\"4、 like-a 是什么\"></a>4、 like-a 是什么</h3><p>like-a，顾名思义，像一个，代表组合关系。<br>如果 A like a B，那么 B 就是 A 的接口。<br>新类型有老类型的接口，但还包含其他函数，所以不能说它们完全相同。<br>例如一台手机可以说是一个微型计算机，但是手机的通讯功能显然不是计算机具备的行为，所以手机继承了计算机的特性，同时需要实现通讯功能，而通讯功能需要作为单独接口，而不是计算机的行为。</p>\n<h3 id=\"5、is-a，has-a，like-a-如何应用\"><a href=\"#5、is-a，has-a，like-a-如何应用\" class=\"headerlink\" title=\"5、is-a，has-a，like-a 如何应用\"></a>5、is-a，has-a，like-a 如何应用</h3><p>如果你确定两件对象之间是 is-a 的关系，那么此时你应该使用继承；比如菱形、圆形和方形都是形状的一种，那么他们都应该从形状类继承。<br>如果你确定两件对象之间是 has-a 的关系，那么此时你应该使用聚合；比如电脑是由显示器、CPU、硬盘等组成的，那么你应该把显示器、CPU、硬盘这些类聚合成电脑类。<br>如果你确定两件对象之间是 like-a 的关系，那么此时你应该使用组合；比如空调继承于制冷机，但它同时有加热功能，那么你应该把让空调继承制冷机类，并实现加热接口。</p>\n","cover":false,"excerpt":"","more":"<h1 id=\"is-a-、have-a、和-like-a-的区别\"><a href=\"#is-a-、have-a、和-like-a-的区别\" class=\"headerlink\" title=\"is-a 、have-a、和 like-a 的区别\"></a>is-a 、have-a、和 like-a 的区别</h1><h3 id=\"1、is-a，has-a，like-a-是什么\"><a href=\"#1、is-a，has-a，like-a-是什么\" class=\"headerlink\" title=\"1、is-a，has-a，like-a 是什么\"></a>1、is-a，has-a，like-a 是什么</h3><p>在面向对象设计的领域里，有若干种设计思路，主要有如下三种：<br>is-a、has-a、like-a<br>java 中在类、接口、抽象类中有很多体现。<br>了解 java 看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51931003\">什么是 Java</a><br>了解类和对象看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51161448\">类、对象到底有什么秘密</a><br>了解接口和抽象类看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51173179\">接口和抽象类有什么区别</a></p>\n<h3 id=\"2、is-a-是什么\"><a href=\"#2、is-a-是什么\" class=\"headerlink\" title=\"2、is-a 是什么\"></a>2、is-a 是什么</h3><p>is-a，顾名思义，是一个，代表继承关系。<br>如果 A is-a B，那么 B 就是 A 的父类。<br>一个类完全包含另一个类的所有属性及行为。<br>例如 PC 机是计算机，工作站也是计算机，PC 机和工作站是两种不同类型的计算机，但都继承了计算机的共同特性。因此在用 Java 语言实现时，应该将 PC 机和工作站定义成两种类，均继承计算机类。<br>了解更多继承看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51193477\">java 类的继承有什么意义</a></p>\n<h3 id=\"3、has-a-是什么\"><a href=\"#3、has-a-是什么\" class=\"headerlink\" title=\"3、has-a 是什么\"></a><em>3、has-a 是什么</em></h3><p>has-a，顾名思义，有一个，代表从属关系。<br>如果 A has a B，那么 B 就是 A 的组成部分。<br>同一种类的对象，通过它们的属性的不同值来区别。<br>例如一台 PC 机的操作系统是 Windows，另一台 PC 机的操作系统是 Linux。操作系统是 PC 机的一个成员变量，根据这一成员变量的不同值，可以区分不同的 PC 机对象。</p>\n<h3 id=\"4、-like-a-是什么\"><a href=\"#4、-like-a-是什么\" class=\"headerlink\" title=\"4、 like-a 是什么\"></a>4、 like-a 是什么</h3><p>like-a，顾名思义，像一个，代表组合关系。<br>如果 A like a B，那么 B 就是 A 的接口。<br>新类型有老类型的接口，但还包含其他函数，所以不能说它们完全相同。<br>例如一台手机可以说是一个微型计算机，但是手机的通讯功能显然不是计算机具备的行为，所以手机继承了计算机的特性，同时需要实现通讯功能，而通讯功能需要作为单独接口，而不是计算机的行为。</p>\n<h3 id=\"5、is-a，has-a，like-a-如何应用\"><a href=\"#5、is-a，has-a，like-a-如何应用\" class=\"headerlink\" title=\"5、is-a，has-a，like-a 如何应用\"></a>5、is-a，has-a，like-a 如何应用</h3><p>如果你确定两件对象之间是 is-a 的关系，那么此时你应该使用继承；比如菱形、圆形和方形都是形状的一种，那么他们都应该从形状类继承。<br>如果你确定两件对象之间是 has-a 的关系，那么此时你应该使用聚合；比如电脑是由显示器、CPU、硬盘等组成的，那么你应该把显示器、CPU、硬盘这些类聚合成电脑类。<br>如果你确定两件对象之间是 like-a 的关系，那么此时你应该使用组合；比如空调继承于制冷机，但它同时有加热功能，那么你应该把让空调继承制冷机类，并实现加热接口。</p>\n"},{"title":"Nginx配置TCP代理指南","date":"2024-12-19T01:56:33.000Z","updated":"2024-12-20T06:29:51.000Z","excerpt":"本指南介绍了如何使用Nginx配置TCP代理，以实现高性能的负载均衡和反向代理。主要步骤包括：\n\n1. **安装Nginx**：确保系统已安装Nginx，可通过官方网站或包管理器获取。\n2. **编辑Nginx配置文件**：在`/etc/nginx/nginx.conf`中添加`stream`块，配置`upstream`和`server`，将请求转发到后端服务器。\n3. **重新加载配置**：使用`sudo nginx -s reload`命令使配置生效。\n4. **验证代理设置**：通过`telnet`等工具测试代理是否正常工作。\n5. **监控和调整配置**：定期监控Nginx性能，根据负载情况进行调整。\n\n通过这些步骤，您可以在环境中配置Nginx，实现高效的TCP代理服务。","comments":1,"toc":true,"_content":"\n# Nginx配置TCP代理指南\n\n# Nginx配置TCP代理指南\n\n使用Nginx作为TCP代理是一种有效的方式，可以实现高性能的负载均衡和反向代理。本篇指南将介绍如何配置Nginx以用作TCP代理。\n\n## 步骤1：安装Nginx\n\n---\n\n首先，确保您的系统已经安装了Nginx。您可以从Nginx官方网站或适用于您的操作系统的软件包管理器中获取Nginx。\n\n## 步骤2：编辑Nginx配置文件\n\n---\n\n默认情况下，Nginx的主配置文件位于/etc/nginx/nginx.conf。在继续之前，请备份此文件，并确保具有root权限。\n\n使用文本编辑器打开nginx.conf文件，并进行以下配置更改：\n\n* 在http块之后，添加一个新的stream块：\n\n```\nstream {\n    # 配置项添加在这里\n}\n```\n\n* 在stream块内，添加upstream和server配置。例如，以下配置将将请求转发到两个后端服务器，端口分别为192.168.1.10:8080和192.168.1.11:8080：\n\n```\nstream {\n    upstream my_backend_servers {\n        server 192.168.1.10:8080;\n        server 192.168.1.11:8080;\n    }\n\n    server {\n        listen 80;\n        proxy_pass my_backend_servers;\n    }\n}\n```\n\n* 根据您的需求，可以根据需要添加更多的upstream和server块。\n\n## 步骤3：重新加载配置\n\n---\n\n保存并关闭配置文件后，使用以下命令重新加载Nginx配置：\n\n```\nsudo nginx -s reload\n```\n\n## 步骤4：验证代理设置\n\n---\n\n现在，您的Nginx已配置为TCP代理。您可以使用telnet工具或其他任何适合您需求的工具来验证代理是否正常工作。\n\n例如，您可以使用以下命令将请求发送到Nginx代理服务器：\n\n```\ntelnet localhost 80\n```\n\n根据您的实际配置，您可能需要更改\"localhost\"为相应的IP地址和端口号。\n\n## 步骤5：监控和调整配置\n\n---\n\n建议您定期监控Nginx的性能，并根据负载情况进行必要的调整。您可以使用Nginx的日志文件、监控工具和系统性能工具来跟踪Nginx的表现并作出相应的改进。\n\n这就是使用Nginx作为TCP代理的简单指南。通过按照上述步骤，在您的环境中配置Nginx，您可以实现高效的TCP代理服务。\n","source":"_posts/nginx-configuration-tcp-agency-guide-kqsal.md","raw":"---\ntitle: Nginx配置TCP代理指南\ndate: '2024-12-19 09:56:33'\nupdated: '2024-12-20 14:29:51'\nexcerpt: >-\n  本指南介绍了如何使用Nginx配置TCP代理，以实现高性能的负载均衡和反向代理。主要步骤包括：\n\n\n  1. **安装Nginx**：确保系统已安装Nginx，可通过官方网站或包管理器获取。\n\n  2.\n  **编辑Nginx配置文件**：在`/etc/nginx/nginx.conf`中添加`stream`块，配置`upstream`和`server`，将请求转发到后端服务器。\n\n  3. **重新加载配置**：使用`sudo nginx -s reload`命令使配置生效。\n\n  4. **验证代理设置**：通过`telnet`等工具测试代理是否正常工作。\n\n  5. **监控和调整配置**：定期监控Nginx性能，根据负载情况进行调整。\n\n\n  通过这些步骤，您可以在环境中配置Nginx，实现高效的TCP代理服务。\ntags:\n  - nginx\n  - tcp代理\n  - 配置指南\n  - 负载均衡\n  - 性能监控\ncategories:\n  - 网络配置\n  - 性能监控\n  - 负载均衡\npermalink: /post/nginx-configuration-tcp-agency-guide-kqsal.html\ncomments: true\ntoc: true\n---\n\n# Nginx配置TCP代理指南\n\n# Nginx配置TCP代理指南\n\n使用Nginx作为TCP代理是一种有效的方式，可以实现高性能的负载均衡和反向代理。本篇指南将介绍如何配置Nginx以用作TCP代理。\n\n## 步骤1：安装Nginx\n\n---\n\n首先，确保您的系统已经安装了Nginx。您可以从Nginx官方网站或适用于您的操作系统的软件包管理器中获取Nginx。\n\n## 步骤2：编辑Nginx配置文件\n\n---\n\n默认情况下，Nginx的主配置文件位于/etc/nginx/nginx.conf。在继续之前，请备份此文件，并确保具有root权限。\n\n使用文本编辑器打开nginx.conf文件，并进行以下配置更改：\n\n* 在http块之后，添加一个新的stream块：\n\n```\nstream {\n    # 配置项添加在这里\n}\n```\n\n* 在stream块内，添加upstream和server配置。例如，以下配置将将请求转发到两个后端服务器，端口分别为192.168.1.10:8080和192.168.1.11:8080：\n\n```\nstream {\n    upstream my_backend_servers {\n        server 192.168.1.10:8080;\n        server 192.168.1.11:8080;\n    }\n\n    server {\n        listen 80;\n        proxy_pass my_backend_servers;\n    }\n}\n```\n\n* 根据您的需求，可以根据需要添加更多的upstream和server块。\n\n## 步骤3：重新加载配置\n\n---\n\n保存并关闭配置文件后，使用以下命令重新加载Nginx配置：\n\n```\nsudo nginx -s reload\n```\n\n## 步骤4：验证代理设置\n\n---\n\n现在，您的Nginx已配置为TCP代理。您可以使用telnet工具或其他任何适合您需求的工具来验证代理是否正常工作。\n\n例如，您可以使用以下命令将请求发送到Nginx代理服务器：\n\n```\ntelnet localhost 80\n```\n\n根据您的实际配置，您可能需要更改\"localhost\"为相应的IP地址和端口号。\n\n## 步骤5：监控和调整配置\n\n---\n\n建议您定期监控Nginx的性能，并根据负载情况进行必要的调整。您可以使用Nginx的日志文件、监控工具和系统性能工具来跟踪Nginx的表现并作出相应的改进。\n\n这就是使用Nginx作为TCP代理的简单指南。通过按照上述步骤，在您的环境中配置Nginx，您可以实现高效的TCP代理服务。\n","slug":"nginx-configuration-tcp-agency-guide-kqsal","published":1,"__permalink":"/post/nginx-configuration-tcp-agency-guide-kqsal.html","layout":"post","photos":[],"_id":"cm4zhl9aw000bn1bm7xaz5i2s","content":"<h1 id=\"Nginx配置TCP代理指南\"><a href=\"#Nginx配置TCP代理指南\" class=\"headerlink\" title=\"Nginx配置TCP代理指南\"></a>Nginx配置TCP代理指南</h1><h1 id=\"Nginx配置TCP代理指南-1\"><a href=\"#Nginx配置TCP代理指南-1\" class=\"headerlink\" title=\"Nginx配置TCP代理指南\"></a>Nginx配置TCP代理指南</h1><p>使用Nginx作为TCP代理是一种有效的方式，可以实现高性能的负载均衡和反向代理。本篇指南将介绍如何配置Nginx以用作TCP代理。</p>\n<h2 id=\"步骤1：安装Nginx\"><a href=\"#步骤1：安装Nginx\" class=\"headerlink\" title=\"步骤1：安装Nginx\"></a>步骤1：安装Nginx</h2><hr>\n<p>首先，确保您的系统已经安装了Nginx。您可以从Nginx官方网站或适用于您的操作系统的软件包管理器中获取Nginx。</p>\n<h2 id=\"步骤2：编辑Nginx配置文件\"><a href=\"#步骤2：编辑Nginx配置文件\" class=\"headerlink\" title=\"步骤2：编辑Nginx配置文件\"></a>步骤2：编辑Nginx配置文件</h2><hr>\n<p>默认情况下，Nginx的主配置文件位于&#x2F;etc&#x2F;nginx&#x2F;nginx.conf。在继续之前，请备份此文件，并确保具有root权限。</p>\n<p>使用文本编辑器打开nginx.conf文件，并进行以下配置更改：</p>\n<ul>\n<li>在http块之后，添加一个新的stream块：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream &#123;</span><br><span class=\"line\">    # 配置项添加在这里</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在stream块内，添加upstream和server配置。例如，以下配置将将请求转发到两个后端服务器，端口分别为192.168.1.10:8080和192.168.1.11:8080：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream &#123;</span><br><span class=\"line\">    upstream my_backend_servers &#123;</span><br><span class=\"line\">        server 192.168.1.10:8080;</span><br><span class=\"line\">        server 192.168.1.11:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        proxy_pass my_backend_servers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据您的需求，可以根据需要添加更多的upstream和server块。</li>\n</ul>\n<h2 id=\"步骤3：重新加载配置\"><a href=\"#步骤3：重新加载配置\" class=\"headerlink\" title=\"步骤3：重新加载配置\"></a>步骤3：重新加载配置</h2><hr>\n<p>保存并关闭配置文件后，使用以下命令重新加载Nginx配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"步骤4：验证代理设置\"><a href=\"#步骤4：验证代理设置\" class=\"headerlink\" title=\"步骤4：验证代理设置\"></a>步骤4：验证代理设置</h2><hr>\n<p>现在，您的Nginx已配置为TCP代理。您可以使用telnet工具或其他任何适合您需求的工具来验证代理是否正常工作。</p>\n<p>例如，您可以使用以下命令将请求发送到Nginx代理服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet localhost 80</span><br></pre></td></tr></table></figure>\n\n<p>根据您的实际配置，您可能需要更改”localhost”为相应的IP地址和端口号。</p>\n<h2 id=\"步骤5：监控和调整配置\"><a href=\"#步骤5：监控和调整配置\" class=\"headerlink\" title=\"步骤5：监控和调整配置\"></a>步骤5：监控和调整配置</h2><hr>\n<p>建议您定期监控Nginx的性能，并根据负载情况进行必要的调整。您可以使用Nginx的日志文件、监控工具和系统性能工具来跟踪Nginx的表现并作出相应的改进。</p>\n<p>这就是使用Nginx作为TCP代理的简单指南。通过按照上述步骤，在您的环境中配置Nginx，您可以实现高效的TCP代理服务。</p>\n","cover":false,"more":"<h1 id=\"Nginx配置TCP代理指南\"><a href=\"#Nginx配置TCP代理指南\" class=\"headerlink\" title=\"Nginx配置TCP代理指南\"></a>Nginx配置TCP代理指南</h1><h1 id=\"Nginx配置TCP代理指南-1\"><a href=\"#Nginx配置TCP代理指南-1\" class=\"headerlink\" title=\"Nginx配置TCP代理指南\"></a>Nginx配置TCP代理指南</h1><p>使用Nginx作为TCP代理是一种有效的方式，可以实现高性能的负载均衡和反向代理。本篇指南将介绍如何配置Nginx以用作TCP代理。</p>\n<h2 id=\"步骤1：安装Nginx\"><a href=\"#步骤1：安装Nginx\" class=\"headerlink\" title=\"步骤1：安装Nginx\"></a>步骤1：安装Nginx</h2><hr>\n<p>首先，确保您的系统已经安装了Nginx。您可以从Nginx官方网站或适用于您的操作系统的软件包管理器中获取Nginx。</p>\n<h2 id=\"步骤2：编辑Nginx配置文件\"><a href=\"#步骤2：编辑Nginx配置文件\" class=\"headerlink\" title=\"步骤2：编辑Nginx配置文件\"></a>步骤2：编辑Nginx配置文件</h2><hr>\n<p>默认情况下，Nginx的主配置文件位于&#x2F;etc&#x2F;nginx&#x2F;nginx.conf。在继续之前，请备份此文件，并确保具有root权限。</p>\n<p>使用文本编辑器打开nginx.conf文件，并进行以下配置更改：</p>\n<ul>\n<li>在http块之后，添加一个新的stream块：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream &#123;</span><br><span class=\"line\">    # 配置项添加在这里</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在stream块内，添加upstream和server配置。例如，以下配置将将请求转发到两个后端服务器，端口分别为192.168.1.10:8080和192.168.1.11:8080：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream &#123;</span><br><span class=\"line\">    upstream my_backend_servers &#123;</span><br><span class=\"line\">        server 192.168.1.10:8080;</span><br><span class=\"line\">        server 192.168.1.11:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        proxy_pass my_backend_servers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据您的需求，可以根据需要添加更多的upstream和server块。</li>\n</ul>\n<h2 id=\"步骤3：重新加载配置\"><a href=\"#步骤3：重新加载配置\" class=\"headerlink\" title=\"步骤3：重新加载配置\"></a>步骤3：重新加载配置</h2><hr>\n<p>保存并关闭配置文件后，使用以下命令重新加载Nginx配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"步骤4：验证代理设置\"><a href=\"#步骤4：验证代理设置\" class=\"headerlink\" title=\"步骤4：验证代理设置\"></a>步骤4：验证代理设置</h2><hr>\n<p>现在，您的Nginx已配置为TCP代理。您可以使用telnet工具或其他任何适合您需求的工具来验证代理是否正常工作。</p>\n<p>例如，您可以使用以下命令将请求发送到Nginx代理服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet localhost 80</span><br></pre></td></tr></table></figure>\n\n<p>根据您的实际配置，您可能需要更改”localhost”为相应的IP地址和端口号。</p>\n<h2 id=\"步骤5：监控和调整配置\"><a href=\"#步骤5：监控和调整配置\" class=\"headerlink\" title=\"步骤5：监控和调整配置\"></a>步骤5：监控和调整配置</h2><hr>\n<p>建议您定期监控Nginx的性能，并根据负载情况进行必要的调整。您可以使用Nginx的日志文件、监控工具和系统性能工具来跟踪Nginx的表现并作出相应的改进。</p>\n<p>这就是使用Nginx作为TCP代理的简单指南。通过按照上述步骤，在您的环境中配置Nginx，您可以实现高效的TCP代理服务。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm4zhl9ar0005n1bm544hdq39","category_id":"cm4zhl9at0008n1bm9v9y2817","_id":"cm4zhl9b2000on1bm6w6b5oiz"},{"post_id":"cm4zhl9ar0005n1bm544hdq39","category_id":"cm4zhl9ay000en1bm9hvi4q53","_id":"cm4zhl9b2000rn1bmf76ycb2c"},{"post_id":"cm4zhl9ar0005n1bm544hdq39","category_id":"cm4zhl9az000in1bm84ruccmq","_id":"cm4zhl9b2000tn1bm7sxxh6jq"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","category_id":"cm4zhl9ax000cn1bmhzgy7yrk","_id":"cm4zhl9b3000wn1bm703cfyrt"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","category_id":"cm4zhl9az000gn1bmb3e876ke","_id":"cm4zhl9b3000xn1bm530bggcc"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","category_id":"cm4zhl9b0000kn1bm7la0fc0z","_id":"cm4zhl9b3000zn1bmc64pghjq"}],"PostTag":[{"post_id":"cm4zhl9ar0005n1bm544hdq39","tag_id":"cm4zhl9av0009n1bm6beh9fx0","_id":"cm4zhl9b1000mn1bmbbb57xlg"},{"post_id":"cm4zhl9ar0005n1bm544hdq39","tag_id":"cm4zhl9ax000dn1bmbuou7wrx","_id":"cm4zhl9b2000nn1bm39kvb2yp"},{"post_id":"cm4zhl9ar0005n1bm544hdq39","tag_id":"cm4zhl9ay000fn1bm8fnzfohn","_id":"cm4zhl9b2000qn1bmh41e1u0p"},{"post_id":"cm4zhl9ar0005n1bm544hdq39","tag_id":"cm4zhl9az000hn1bm8cky6oia","_id":"cm4zhl9b2000sn1bm7cz6fwlz"},{"post_id":"cm4zhl9ar0005n1bm544hdq39","tag_id":"cm4zhl9az000jn1bm8404di7i","_id":"cm4zhl9b3000vn1bm7cl91jm8"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","tag_id":"cm4zhl9av0009n1bm6beh9fx0","_id":"cm4zhl9b40011n1bm0kc99edd"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","tag_id":"cm4zhl9b2000pn1bm72hh2kib","_id":"cm4zhl9b40012n1bm0qlu3ywn"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","tag_id":"cm4zhl9b2000un1bm24as3et8","_id":"cm4zhl9b40013n1bmdm2qeimx"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","tag_id":"cm4zhl9b3000yn1bme2xbe0ia","_id":"cm4zhl9b40014n1bmh4yc207o"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","tag_id":"cm4zhl9b30010n1bm52x3dfj9","_id":"cm4zhl9b40015n1bmf0ewbv4x"}],"Tag":[{"name":"nginx","_id":"cm4zhl9av0009n1bm6beh9fx0"},{"name":"docker","_id":"cm4zhl9ax000dn1bmbuou7wrx"},{"name":"源码部署","_id":"cm4zhl9ay000fn1bm8fnzfohn"},{"name":"包管理","_id":"cm4zhl9az000hn1bm8cky6oia"},{"name":"开机自启","_id":"cm4zhl9az000jn1bm8404di7i"},{"name":"tcp代理","_id":"cm4zhl9b2000pn1bm72hh2kib"},{"name":"配置指南","_id":"cm4zhl9b2000un1bm24as3et8"},{"name":"负载均衡","_id":"cm4zhl9b3000yn1bme2xbe0ia"},{"name":"性能监控","_id":"cm4zhl9b30010n1bm52x3dfj9"}]}}