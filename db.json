{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/anzhiyu/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/512.png","path":"img/512.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/comment_bg.png","path":"img/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/default_cover.jpg","path":"img/default_cover.jpg","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/16.png","path":"img/siteicon/16.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/32.png","path":"img/siteicon/32.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/apple-icon-180.png","path":"img/siteicon/apple-icon-180.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-192.maskable.png","path":"img/siteicon/manifest-icon-192.maskable.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-512.maskable.png","path":"img/siteicon/manifest-icon-512.maskable.png","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/ai_abstract.js","path":"js/anzhiyu/ai_abstract.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/comment_barrage.js","path":"js/anzhiyu/comment_barrage.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/people.js","path":"js/anzhiyu/people.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/random_friends_post.js","path":"js/anzhiyu/random_friends_post.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/right_click_menu.js","path":"js/anzhiyu/right_click_menu.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/anzhiyu/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/link.yml","hash":"ccc926b6ec16d16c2582f6145ba99e8ffe7235d8","modified":1751350775695},{"_id":"source/_posts/java-implementing-agent-mode-zxwpxc.md","hash":"c4834ca4183b01192eb33f4f88882f479de46ffc","modified":1751350967181},{"_id":"source/_posts/nacos-configuration-center-and-support-multi-configuration-files-zi2mmf.md","hash":"597c0384c9f5f1ae7b7980ee216dc5c2b9ce3344","modified":1751350967186},{"_id":"source/_posts/nginx-configuration-tcp-agency-guide-kqsal.md","hash":"b61f36ada4d5c4f708b90ad1020cfbecc4d562f7","modified":1751350967199},{"_id":"source/_posts/nginx-installation-deployment-z1jtjzq.md","hash":"f72ee070de52ed3d740a9bfee330494a61256e0c","modified":1751350967189},{"_id":"source/_posts/the-difference-between-isa-havea-and-likea-1u8avc.md","hash":"e5cb89da285301d175cae8950a710523e5e0d4b1","modified":1751350967195},{"_id":"source/about/index.md","hash":"87c3c424392111f90342bc901ae93b33c39c6faa","modified":1751350775703},{"_id":"source/archives/index.md","hash":"a01add9c02ebbd621e30ada64612b53fcd1dc0df","modified":1751350775704},{"_id":"source/categories/index.md","hash":"15e7ac04d90487555bd2ceeb477cf0a0d8356577","modified":1751351794278},{"_id":"source/link/index.md","hash":"e7ab633d6c93563d5926aa75436bc5741ca64aa7","modified":1751350775705},{"_id":"source/tags/index.md","hash":"c94a02d36bddc95f1c4b1a722bf4d3122b5082a1","modified":1751351814888},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1751350779881},{"_id":"themes/butterfly/README.md","hash":"20a91bea7f7ada8b8195d2abff106a7ce21bba20","modified":1751350779882},{"_id":"themes/butterfly/README_CN.md","hash":"9d729ee2ffc5e5f703ccfbfbbb7b286d59071125","modified":1751350779882},{"_id":"themes/butterfly/_config.yml","hash":"c6fab3700a6502b5790ca20d20113020544ea048","modified":1751350779883},{"_id":"themes/butterfly/package.json","hash":"2b6fb6f62b9fa6a829311ffd532ae760fbd0a7db","modified":1751350779945},{"_id":"themes/butterfly/plugins.yml","hash":"7bb2c7350c0c57850aa30213cd0f26553a614702","modified":1751350779945},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"3b572099a992e30267f5fe4cd3c582ff7ac9f083","modified":1751350779878},{"_id":"themes/butterfly/languages/default.yml","hash":"90e9e2f36dc51aa77eb7804ae048b4876035b12d","modified":1751350779884},{"_id":"themes/butterfly/languages/en.yml","hash":"68127be0e6b44cfc5f31353d8b275c02939b3ff9","modified":1751350779885},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"2dcc70a011b37890215ae0fd6d8f8c78aa8af6b0","modified":1751350779885},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"1392e7b8c678cdfb54f55523693e66abc7d80538","modified":1751350779886},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1751350779887},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1751350779887},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1751350779943},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1751350779943},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1751350779944},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1751350779945},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"eed9190301095b35081aa2658204cc3f15b9f5e1","modified":1751350779879},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1751350779879},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1751350779880},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1751350779880},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1751350779881},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1751350779888},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"50eea5aa78cdeb6c72dd22f0aeabc407cc0f712e","modified":1751350779889},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1751350779889},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ea8d4e8ac6af93cd268ba8f6ffcb80417bc2501e","modified":1751350779889},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"96df62e34661d8ca4a45267286127479e5178a79","modified":1751350779898},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1751350779903},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"f448bf73103b88de4443e52d600e871cf3de3e32","modified":1751350779905},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9277fead4c29dbe93976f078adaa26e8f9253da3","modified":1751350779905},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1751350779947},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1751350779948},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1751350779948},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1751350779949},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"b1dfc3c898b886eab1241b068fc27d7a26a3b7d2","modified":1751350779949},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"0a336dfe5ed08952fa0df1532421df38a74a20d6","modified":1751350779950},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1751350779951},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5ed2d7ef240c927fe1b7a7fb5bf9e55e2bfd55a5","modified":1751350779951},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"0df22d7dbfa766a65cb6032a1f003348f4307cfe","modified":1751350779951},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1751350779952},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"cdd992c8577d583c237b6aac9f5077d8200879b2","modified":1751350779952},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"b12895e0765d596494e5526d121de0dd5a7c23d3","modified":1751350779953},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"b55f71347d2ead097c7f98c0ec792b091433345c","modified":1751350779953},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c74d6a9b8f71e69447f7847a5f5e81555d68b140","modified":1751350779954},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1751350779955},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"17c0095bc8d612a268cdcab000b1742dc4c6f811","modified":1751350779955},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"164d5f1c2d1b4cb5a813a6fc574016743a53c019","modified":1751350779956},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1751350779956},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ec77b3093f5de67e7032f40a5b12f1389f6f6ff","modified":1751350779957},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"5d08c3552f7d3c80a724ca628bff66321abe2e5a","modified":1751350779958},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"c863d2732ce4bdc084f2d0db92f50f80328c1007","modified":1751350779958},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"b013dc0a3d57d2caa18b89263f23871da9ec456d","modified":1751350779959},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"289f85847c58f0b2b7d98a68e370a2896edb8949","modified":1751350779959},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1751350779960},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"35d54adc92e717cc32e13515122b025fd1a98ea2","modified":1751350779960},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"dc56e5182dd3813dc977c9bf8556dcc7615e467b","modified":1751350779961},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"7c448886f230adb4f4a0208c88fff809abcb5637","modified":1751350779962},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"e611074a5a7f489a8b04afac0a3f7f882ce26532","modified":1751350779963},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1751350780007},{"_id":"themes/butterfly/source/css/var.styl","hash":"950250f66faeb611a67540e0fa6cedbcf5a7a321","modified":1751350780008},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1726415344477},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1726415344477},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1726415344477},{"_id":"themes/butterfly/source/js/main.js","hash":"59cd756a94ecdf3ec7b18f50691a8a6305f7a65a","modified":1751350780011},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"d776c670e4076ad6049dbb64cdee7a734b51d37f","modified":1751350780013},{"_id":"themes/butterfly/source/js/utils.js","hash":"7b871fe0c4456660cff4c7b9cc4ed089adac2caf","modified":1751350780014},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1751350779890},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1751350779890},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"39e1ca0a54eb5fd3688a78737417a1aaa50914c9","modified":1751350779891},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1751350779891},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1751350779891},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a7c929b90ae52b78b39b1728e3ab0e3db1cb7b9a","modified":1751350779892},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1751350779894},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1751350779894},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"1bef867c799ba158c5417272fb137539951aa120","modified":1751350779895},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1751350779896},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1751350779896},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"cc99b2dc5c6b1f74391b0da609853ebc11de9610","modified":1751350779896},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"7a641b5dd45b970e1dafd1433eb32ea149e55cf2","modified":1751350779897},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"766baca6ddce49d1724a02312387b292ff2d0bdc","modified":1751350779898},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1751350779899},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"a6fde4835d6460ce7baf792fd5e1977fad73db25","modified":1751350779899},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1751350779900},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"90eb453b14f6b5c25bfd8d28aa67783603a1411d","modified":1751350779900},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1726415344464},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1751350779901},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e37681bc9c169d4220f26ecda2b3d5c02b6b9a0f","modified":1751350779902},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1751350779903},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"0abad416b1974a17e5be7817931d5fe799180170","modified":1751350779904},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"912df10a053db3135968e92b6fd1a707ee94c968","modified":1751350779904},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1751350779908},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1751350779923},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1751350779932},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"9b734d99963f3e7f562597dcf60485ccbf6e961c","modified":1751350779932},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1751350779932},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"dfb5e16a7e7106bb20b2ac2d0df1251d0fc79609","modified":1751350779936},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1751350779937},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1751350779937},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1751350779938},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"ab037bf5794638bd30da4cf7cf106e5d03b5f696","modified":1751350779938},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1751350779938},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1751350779939},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"8e22f53886a57a68286970d8af8b4c950fd4a1d7","modified":1751350779940},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1751350779940},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"d48d77af1670bd568d784794408bf524a448bfcc","modified":1751350779940},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1751350779941},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1751350779941},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1751350779942},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1751350779942},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"8df529f71e25f1c0a00e533de7944ed3d1ba7bd8","modified":1751350779943},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"e920dae9ce00177922468db49240f5aca0af4f64","modified":1751350779964},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"0421da07907b3d98df64239e073b23fbb3f04149","modified":1751350779965},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"41054740cfbd1357138785464f6859681ca58493","modified":1751350779965},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1751350779970},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"aae70ddd126b2e40158e45036abecbfa33cbfbba","modified":1751350779986},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1751350779986},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1751350779987},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"5e27f7842af82ff7498d4b59787ce9ca90fa9e6f","modified":1751350779987},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"964bda8acf4180a15c33e1d8447fc3140baa4c68","modified":1751350779987},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1751350779988},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1751350779989},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"7ae27854a737a02eca89b0b92db94cb298fef59e","modified":1751350779989},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1751350779990},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c0b11a1a5f52e3a6af4e312a8134c93eda18a7dd","modified":1751350779991},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"0322237e762db401d7b4aa33168d0b9334a9ec26","modified":1751350779992},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"80ee9d0bfe5d38aac1f0cdcea5fc88b71d310041","modified":1751350779992},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"15ea7564b2e3bf46bc91fb6e49c94d057b37caaf","modified":1751350779993},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"dbc855795a881f8c805bf5c9c5c4d5d542a648ec","modified":1751350779993},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"a22fd15048d21452f0015d0765d295d730203308","modified":1751350779994},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1751350779994},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1751350779995},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1751350779995},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"df7a51fcabbadab5aa31770e3202a47c9599bbb7","modified":1751350779995},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1751350779996},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"a977cd8161ef4d6ddd5293e81403519076657430","modified":1751350779997},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1751350779998},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"37db99299af380e9111dce2a78a5049b301b13e0","modified":1751350779999},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0b23010154e19f37f0c4af0110f9f834d6d41a13","modified":1751350780000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"8a53d7ba5ca2f5eb4124b684e7845b648583f658","modified":1751350780000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1751350780001},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"3e9355b76f87e2ee90f652855282b37ab5ae0b3e","modified":1751350780002},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1751350780002},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1751350780003},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1751350780003},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1751350780003},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1751350780004},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"353b95f9a6c2c1e777d978118cb61f909ccbf89c","modified":1751350780005},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1751350780005},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1751350780007},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a7c2fe73cc05ad3525909b86ad0ede1a9f2d3b48","modified":1751350780012},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"ab3904451ae1d78903424b8b2ef815c8571e1749","modified":1751350780013},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"8f95aca305b56ccd7c8c7367b03d26db816ebd5f","modified":1751350779906},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"58f37823f6cd9a194fb50f7ca7c2233e49939034","modified":1751350779907},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1751350779908},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1751350779908},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4b98145d6584d586cabf033493282afc72ae816a","modified":1751350779909},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1751350779910},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1751350779910},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7e233f872aea6fd6beccdc9efd86b1bf9ec9f12d","modified":1751350779910},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1751350779911},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1751350779912},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"08a85e52fc800d3562df869e5e2613313e76fce6","modified":1751350779912},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"09d2ab2570b67e6f09244a898ccab5567cb82ace","modified":1751350779913},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"0d960849d5b05d27ec87627b983ca35f2411b9e8","modified":1751350779913},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"1157118db9f5d7c0c5a0fc7c346f6e934ca00d52","modified":1751350779913},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"799da8f3015e6fe440681b21644bcb3810a5518c","modified":1751350779914},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"6d40b521eec4136f6742c548a4445ed593470b1b","modified":1751350779914},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5373b822aa72ddb96f2f1f4baf6c058b40d705d6","modified":1751350779915},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"364d1fd655baca9132038ef1e312abde2c0bc7de","modified":1751350779916},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"f78c9c20c86d58c7cf099f6f8d6097103d7d43e5","modified":1751350779917},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"11f5dca1432e59f22955aaf4ac3e9de6b286d887","modified":1751350779918},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"1eab7ca1cb16c6786f9c3ca0efef8cc15e444ab4","modified":1751350779918},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c86c8fc1a28514a02a1f6a25ca9ec05eb3955b7","modified":1751350779918},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1751350779919},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1751350779920},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"09c2ef4bc6d005f96dfa48b1d9af1ec095c5266d","modified":1751350779920},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"7f450664e6323a076ae59c393b0f22167cfa82e5","modified":1751350779921},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"9942a903227350960c1d0716e59516ae79ac24a8","modified":1751350779921},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b65a42167df5fb07e2a63f312a58c321d3112a90","modified":1751350779922},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"4ed7c74087e81c6fcaf4fca7dced58b4e19f4cb1","modified":1751350779922},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"efb72547fc2d470a124f5636391128dc59627498","modified":1751350779922},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1751350779924},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1751350779924},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"bb944185f4bb9f9a9b9d70ee215f66ccd6d4c6cf","modified":1751350779925},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"c682e4d61017fb0dd2e837bfcc242371f1a13364","modified":1751350779925},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"9f2f6eef005800e81fc5d038c8e9a57d2f49ab6f","modified":1751350779927},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"d8898e427acd91ceb97d6a7ee3acb011ca86b9fc","modified":1751350779927},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"fc8814bd016d039874ec2fc24dcb78587892e2a6","modified":1751350779928},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1751350779929},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"a4e52188b6effeee1df2a01dcbf4105de76a61a8","modified":1751350779929},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"17520a86de12ae585289463c066d3ac91b78a2ff","modified":1751350779930},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"ecfff55b2c7f6d87ce4d5028fdf9f8c0bf155c73","modified":1751350779930},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"0544d91c0bc9e26e0fe1b5ff490f4a8540ed1ee1","modified":1751350779931},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"90338ac4cd114d324fe1caaaeea8be9ca05d6a46","modified":1751350779933},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"52a06a2e039f44383085333cac69f3f4e7d0ad3a","modified":1751350779934},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1751350779934},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"420a86e73d0d748ac234fd00d06d9e433ca5e3f2","modified":1751350779935},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1751350779935},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"c16ee69b5ca8db016db0508d014ae0867c4ce929","modified":1751350779935},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1751350779935},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1751350779967},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1751350779967},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1751350779968},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1751350779969},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"7c9cc43e1d2577f7151039d58e603c30860fd281","modified":1751350779970},{"_id":"public/search.xml","hash":"9a650dcac8413fa5ed8365ac2313a711d847bc6d","modified":1734864600486},{"_id":"public/404.html","hash":"e108414c370c5d039de837319dfa5a4fbf0f1a45","modified":1734864600486},{"_id":"public/about/index.html","hash":"cd8695ee6d8b776dc20df8507dee81474ca0e9be","modified":1734864600486},{"_id":"public/tags/index.html","hash":"15a091d6735e8193f7502cac87c2e5cefa89e148","modified":1734864600486},{"_id":"public/archives/index.html","hash":"6780fa881ff27dcf5750f9661ba3991e304b379a","modified":1734864600486},{"_id":"public/categories/index.html","hash":"1989e8cdc1b38a9f2e584cc56826230fa43a58ee","modified":1734864600486},{"_id":"public/link/index.html","hash":"00cccc91a89524f59e1aee035e17f5251005024b","modified":1734864600486},{"_id":"public/post/the-difference-between-isa-havea-and-likea-1u8avc.html","hash":"7705ea42aff6bf9bd8176aee122d247ed7350752","modified":1734864600486},{"_id":"public/post/nacos-configuration-center-and-support-multi-configuration-files-zi2mmf.html","hash":"17edecd686dde7bbe1f43a7f64eda1fa4079ee88","modified":1734864600486},{"_id":"public/post/nginx-installation-deployment-z1jtjzq.html","hash":"8113453e699adbc271556eea55c24ee2271851b7","modified":1734864600486},{"_id":"public/post/nginx-configuration-tcp-agency-guide-kqsal.html","hash":"92eee6f46dfcb8d3402d3e88e97599c3b096e44a","modified":1734864600486},{"_id":"public/post/java-implementing-agent-mode-zxwpxc.html","hash":"83b3a0acf56a3e3e895906ad7792f176f8896449","modified":1734864600486},{"_id":"public/archives/2024/index.html","hash":"ad6de39edd8ac14de96b31f3f7ef49af07d03926","modified":1734864600486},{"_id":"public/archives/2024/12/index.html","hash":"c96720fc9a4885cc4cd79dc962b7ccb81b0437a1","modified":1734864600486},{"_id":"public/categories/部署指南/index.html","hash":"ba49c25b5e80b28c4d9c87a747198c28f99f74b2","modified":1734864600486},{"_id":"public/categories/网络配置/index.html","hash":"f071acfba227fc35d8dadbb95e89519b483d929b","modified":1734864600486},{"_id":"public/categories/部署指南/安装教程/index.html","hash":"5ff49d4b3459743cb63ba54ca55d7254c57b3467","modified":1734864600486},{"_id":"public/categories/网络配置/性能监控/index.html","hash":"2b98d1ae99d4243928844b0a1d625a1b476bed15","modified":1734864600486},{"_id":"public/categories/部署指南/安装教程/配置管理/index.html","hash":"82bf8edf89081cca1c9be2397d643bb839b018ee","modified":1734864600486},{"_id":"public/categories/网络配置/性能监控/负载均衡/index.html","hash":"51a2b13f7e5ea11c32892c996215738fc5336186","modified":1734864600486},{"_id":"public/index.html","hash":"0a8f8ea0abf09a9adcad67e0fa51e3235d8bad26","modified":1734864600486},{"_id":"public/tags/nginx/index.html","hash":"009a6330d7b923dc486de754d1594cf8683e548e","modified":1734864600486},{"_id":"public/tags/docker/index.html","hash":"c801f5178feedc7ad6865d3b7b3ca244b22bbc67","modified":1734864600486},{"_id":"public/tags/源码部署/index.html","hash":"e8bbdcfba994e47c23e108f979c2c0103137a0b9","modified":1734864600486},{"_id":"public/tags/包管理/index.html","hash":"6ea3f00779e08eb2114e8eb8e22ec4fe457c71e8","modified":1734864600486},{"_id":"public/tags/开机自启/index.html","hash":"0a8fb84f068fc7f360d98aed6dedd0c9394c3003","modified":1734864600486},{"_id":"public/tags/tcp代理/index.html","hash":"c40863d712c224290b281fc03b906c771a32a1c8","modified":1734864600486},{"_id":"public/tags/配置指南/index.html","hash":"1c4e80a9ea0f398c1d61dbf9114ac93aed22f343","modified":1734864600486},{"_id":"public/tags/负载均衡/index.html","hash":"3c7f7c76657c2794fc27a65d813d479c8230ac92","modified":1734864600486},{"_id":"public/tags/性能监控/index.html","hash":"16257a1fcc61c9c469a4552aae8fd4b4444fdfd6","modified":1734864600486},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1734864600486},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1734864600486},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1734864600486},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734864600486},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1734864600486},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1734864600486},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1734864600486},{"_id":"public/css/index.css","hash":"d893594918c5d5481d440c397981969c808376b8","modified":1734864600486},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1734864600486},{"_id":"public/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1734864600486},{"_id":"source/_posts/asynchronous-operation-after-spring-transaction-operation-z1rhawf.md","hash":"454cb5f1a9723c4df9ce48806b8e85c66ab6bfca","modified":1751350967208},{"_id":"source/_posts/computer-status-2pq0or.md","hash":"27ac015bde95b357b06e1c4658e56b396a412cdd","modified":1751350967212},{"_id":"source/_posts/java-list-itzf4.md","hash":"14096d6200915705c43b8b9682a38762c6573aef","modified":1751350967218},{"_id":"source/_posts/nginx-configuration-rtsp-service-1p9fjr.md","hash":"7bb26434369b519ff6e742375a5619a7324ff9fe","modified":1751350967222},{"_id":"source/_posts/nginx-turn-on-the-webdav-service-zadzub.md","hash":"7b9fc270ec1d5d39c271d00b21278b3bec573321","modified":1751350967241},{"_id":"source/_posts/port-occupation-treatment-2ogd9p.md","hash":"063b72c88288679e49804cf55b38128910ad2d2c","modified":1751350967235},{"_id":"source/_posts/press-a-copy-component-z2ezflv.md","hash":"3eb7cd79368a082e55d210b1e4a4f09f2972749a","modified":1751350967243},{"_id":"source/_posts/siyuan-notedockercompose-oneclick-deployment-1wlgle.md","hash":"fa9e8bbbb4d4e653c25102f1bb8a9d2dee44349f","modified":1751350967248},{"_id":"source/_posts/springboot-introduces-local-jar-packages-1lmxzy.md","hash":"c45456521b90f5208cef3dd499abffec53734115","modified":1751350967253},{"_id":"source/_posts/test-the-linux-system-disk-read-and-write-performance-linux-disk-read-and-write-test-z1eep63.md","hash":"2fa46f674fa77fdb76f46c24306208275267cc11","modified":1751350967260},{"_id":"source/_posts/use-in-grammar-in-mybatisplus-1bihse.md","hash":"f2afe396160bc893b5fa926bdb135b404c20a2d0","modified":1751350967270},{"_id":"source/_posts/use-redis-as-a-message-queue-in-java-zniajv.md","hash":"2fbdae81fb3ecd1e8534610ca02299c5a9c2b582","modified":1751350967273},{"_id":"source/_posts/yum-source-replacement-1jg9tx.md","hash":"1574260e14dcc9aa4bd6c890a701f48b0bac535d","modified":1751350967281},{"_id":"themes/anzhiyu/source/css/_extra/home_top/random-banner.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1751351172605},{"_id":"themes/anzhiyu/.gitignore","hash":"17b9594db1006e57f76e109924db33e54f0f2d87","modified":1751351172485},{"_id":"themes/anzhiyu/LICENSE","hash":"1eba7caf09a39110ad2f542e3ed8700d1a69c6d3","modified":1751351172486},{"_id":"themes/anzhiyu/README.md","hash":"2342370ab20c202c24ee530d80749f158d416fc3","modified":1751351172486},{"_id":"themes/anzhiyu/README_EN.md","hash":"23597148859005cb89e9b6a0be708bf95ae557fb","modified":1751351172487},{"_id":"themes/anzhiyu/sw-rules.js","hash":"91eb0c94682ce1bffdbbd07a5bb7e5c6e00aa8c6","modified":1751351172671},{"_id":"themes/anzhiyu/plugins.yml","hash":"1b66b55771dbac1866909fa306358d11b255821e","modified":1751351172557},{"_id":"themes/anzhiyu/_config.yml","hash":"f37684d60a5159e264ff803b61185653748fc22d","modified":1751351172488},{"_id":"themes/anzhiyu/package.json","hash":"a7f83155236c1dd6a309171efaa0680e78afd748","modified":1751351172556},{"_id":"themes/anzhiyu/languages/default.yml","hash":"8f22a9946744a2a4682564cf2c7e5f8dde6f1c25","modified":1751351172488},{"_id":"themes/anzhiyu/languages/en.yml","hash":"824f3a5bfe0f5848cc4a919c183bae214e660242","modified":1751351172488},{"_id":"themes/anzhiyu/languages/zh-CN.yml","hash":"5f6fad5076023da2d1fae9f5277e081168b0c1eb","modified":1751351172489},{"_id":"themes/anzhiyu/languages/zh-TW.yml","hash":"00d538fc38c1a88fd126c2e57c29dd860e9bc2bd","modified":1751351172489},{"_id":"themes/anzhiyu/layout/archive.pug","hash":"6a61277de07cf2724c865f251cb6f2385a6664ae","modified":1751351172490},{"_id":"themes/anzhiyu/layout/category.pug","hash":"3028789225ac853000b7a84aa3a0715afd7bfb0a","modified":1751351172490},{"_id":"themes/anzhiyu/layout/post.pug","hash":"666241d431679ea7f9c94ce345bac8405f6bc5e7","modified":1751351172555},{"_id":"themes/anzhiyu/layout/page.pug","hash":"57db7a52cbf647256b0346e6c0cd1539732a77e8","modified":1751351172555},{"_id":"themes/anzhiyu/layout/tag.pug","hash":"fe81f8e8193dae2db7693e5464d4746704bbecdf","modified":1751351172556},{"_id":"themes/anzhiyu/source/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1751351172648},{"_id":"themes/anzhiyu/layout/index.pug","hash":"818aeebcd24466aade30e632ee5275f92e73baea","modified":1751351172554},{"_id":"themes/anzhiyu/.github/workflows/issue_close_question.yml","hash":"a83655836dee52bcec1470bc394aa7dbc2cb487e","modified":1751351172483},{"_id":"themes/anzhiyu/.github/workflows/issue_close_stale.yml","hash":"b7b75a00b86da3b9361d37e5e17926e66e376d13","modified":1751351172483},{"_id":"themes/anzhiyu/.github/workflows/issue_duplicate.yml","hash":"9ce2c4845fd229e7a01d9f61da1c9b1fa0c030ec","modified":1751351172483},{"_id":"themes/anzhiyu/.github/workflows/issue_invalid.yml","hash":"a4f2e5af1651d4683e2988137c7b366f5dc37bdf","modified":1751351172483},{"_id":"themes/anzhiyu/.github/workflows/issue_question.yml","hash":"7a10849dedf026ddcab8b0d3c8205ad6fe5b8327","modified":1751351172483},{"_id":"themes/anzhiyu/.github/workflows/issue_wontfix.yml","hash":"288b1971d78e4e6d284e96d924c87c264737830d","modified":1751351172484},{"_id":"themes/anzhiyu/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1751351172485},{"_id":"themes/anzhiyu/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1751351172485},{"_id":"themes/anzhiyu/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"1c50c14dd6b66ab636a8852e9b967c40671f1200","modified":1751351172481},{"_id":"themes/anzhiyu/.github/ISSUE_TEMPLATE/config.yml","hash":"9d8e5494501458ed1cfeb2eb9e9a57b124dc5010","modified":1751351172481},{"_id":"themes/anzhiyu/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"0aaafd614172a6ca77a9b41fd3e81e885e8cfec7","modified":1751351172482},{"_id":"themes/anzhiyu/layout/includes/404.pug","hash":"799817011e194e6b1fc9ccb5530f5d96d59cfcc0","modified":1751351172491},{"_id":"themes/anzhiyu/layout/includes/additional-js.pug","hash":"5940f3f42d441667ac3ad2ff76b7b9ba79343e9a","modified":1751351172491},{"_id":"themes/anzhiyu/layout/includes/bbTimeList.pug","hash":"e5e64f90df68d2679dd6593b02fb6c64c8ce8620","modified":1751351172496},{"_id":"themes/anzhiyu/layout/includes/footer.pug","hash":"bcc45f9b91ddaa561fc3239e834381238964aad7","modified":1751351172498},{"_id":"themes/anzhiyu/layout/includes/categoryGroup.pug","hash":"e08a308acca100cec2ccc086b9c2cff047582fda","modified":1751351172497},{"_id":"themes/anzhiyu/layout/includes/head.pug","hash":"c1c11b576897466aa5009dc32e884ee9b55162e3","modified":1751351172498},{"_id":"themes/anzhiyu/layout/includes/layout.pug","hash":"9b19516e186b6145441e38ed575eab6c065da001","modified":1751351172508},{"_id":"themes/anzhiyu/layout/includes/mourn.pug","hash":"fec8325d90968ccf376fc87b81671e26ba8fc702","modified":1751351172512},{"_id":"themes/anzhiyu/layout/includes/music.pug","hash":"f45cee9da98d854f78f7fdd8f14c4be427a09d51","modified":1751351172512},{"_id":"themes/anzhiyu/layout/includes/pagination.pug","hash":"7884c6ef7b71dd3f4ebb5a3de2c062d7668b96a5","modified":1751351172519},{"_id":"themes/anzhiyu/layout/includes/shortcutKey.pug","hash":"738d2932e68a782be2a80a6af2db1014c272cfe7","modified":1751351172522},{"_id":"themes/anzhiyu/layout/includes/rightside.pug","hash":"5462d757964e470d1d7abe0a7ba3d6a9566e0e00","modified":1751351172522},{"_id":"themes/anzhiyu/layout/includes/sidebar.pug","hash":"fc56ee028770e230d4705ab74cba054c174ae500","modified":1751351172523},{"_id":"themes/anzhiyu/scripts/events/404.js","hash":"16484d781b273f20c4fbddf27ca283e03d7c0910","modified":1751351172559},{"_id":"themes/anzhiyu/scripts/events/cdn.js","hash":"fec4fbd14b29611684cc5a9ec1ba7a5b8a5cc996","modified":1751351172560},{"_id":"themes/anzhiyu/scripts/events/comment.js","hash":"176332aa4d01728d0bd084e9b02c60167dc307dd","modified":1751351172560},{"_id":"themes/anzhiyu/scripts/events/init.js","hash":"404b1200a3be17dbc14ccbb293aa17389d3a834b","modified":1751351172561},{"_id":"themes/anzhiyu/scripts/events/merge_config.js","hash":"38de538f3398c1be907c91f611344f4cc1009555","modified":1751351172562},{"_id":"themes/anzhiyu/scripts/events/stylus.js","hash":"c4de22ef3e1e84a96f9e48d450b3dbaeb5b85ecf","modified":1751351172562},{"_id":"themes/anzhiyu/scripts/events/welcome.js","hash":"6c3f69381c11fdb651684bcc04c077bcff892a2f","modified":1751351172563},{"_id":"themes/anzhiyu/scripts/helpers/aside_archives.js","hash":"12be80b9828008e9dd6aa7f57e875acda88e7046","modified":1751351172566},{"_id":"themes/anzhiyu/scripts/helpers/aside_categories.js","hash":"6e97bc9b99fac73561793bc746e9199636f1cf78","modified":1751351172566},{"_id":"themes/anzhiyu/scripts/helpers/catalog_list.js","hash":"f2ba64e35ee507ecbcaa4a3516ea95f1f7abefac","modified":1751351172567},{"_id":"themes/anzhiyu/scripts/helpers/findArchiveLength.js","hash":"612acfe4fd0d1d86676496dbb8e3e78dba030605","modified":1751351172567},{"_id":"themes/anzhiyu/scripts/helpers/get_version.js","hash":"799ae97c1368c395649444b9e5a71f9074852522","modified":1751351172568},{"_id":"themes/anzhiyu/scripts/helpers/random.js","hash":"feeabd29864fe8a2e50edc4d6c7523897f38aaca","modified":1751351172570},{"_id":"themes/anzhiyu/scripts/helpers/inject_head_js.js","hash":"52f710f99904521c37fc1f19a33929799ceeafe2","modified":1751351172569},{"_id":"themes/anzhiyu/scripts/helpers/related_post.js","hash":"b6960063129984f1c6760e21c8215a4739fdbac5","modified":1751351172571},{"_id":"themes/anzhiyu/scripts/helpers/page.js","hash":"b0a3c347ae90ac998fa17e9e67b7cd290d4d7ab7","modified":1751351172570},{"_id":"themes/anzhiyu/scripts/helpers/sort_attr_post.js","hash":"1cf55b611e4342f5a0c0e26bf69cf2a401cdcfff","modified":1751351172571},{"_id":"themes/anzhiyu/scripts/helpers/year.js","hash":"94f15ddba7d29cdcc4dd52ed6c35c9c29cc19d37","modified":1751351172572},{"_id":"themes/anzhiyu/scripts/helpers/tags_page_list.js","hash":"59b5ae1970f4575d8e32309d7b4040fe55acee38","modified":1751351172572},{"_id":"themes/anzhiyu/scripts/filters/random_cover.js","hash":"17497ecec828b68005762d627c54dde42de0806f","modified":1751351172565},{"_id":"themes/anzhiyu/scripts/filters/post_lazyload.js","hash":"19f85dc094e3d2b72244cc0ef59e60f88373b779","modified":1751351172564},{"_id":"themes/anzhiyu/scripts/tag/btns.js","hash":"84992525efbccb9e87bbc72dfef2968212cabf2e","modified":1751351172573},{"_id":"themes/anzhiyu/scripts/tag/bilibili.js","hash":"cc3f9f29f777dea0e4714ce08be4edb301c0b768","modified":1751351172573},{"_id":"themes/anzhiyu/scripts/tag/Introduction-card.js","hash":"15d1a82549af21ef55dd40758c16ddf26a17fe22","modified":1751351172573},{"_id":"themes/anzhiyu/scripts/tag/checkbox.js","hash":"636cef0f4500a14b123c6b21187fb67989472cbd","modified":1751351172575},{"_id":"themes/anzhiyu/scripts/tag/dogeplayer.js","hash":"facf3251b8eb2fd26f2d78906934d463d0adbd0f","modified":1751351172576},{"_id":"themes/anzhiyu/scripts/tag/button.js","hash":"8f6d382ea394bef44da90cdf197dd2e207d5c7db","modified":1751351172575},{"_id":"themes/anzhiyu/scripts/tag/flink.js","hash":"f987ce74edeee13a83fe526c234626eeae0588f0","modified":1751351172576},{"_id":"themes/anzhiyu/scripts/tag/folding.js","hash":"93f56903a307b4ce54963b40050fbb9aeb5baf47","modified":1751351172577},{"_id":"themes/anzhiyu/scripts/tag/gallery.js","hash":"3fb27bd4b176b15f2e3a54d452ae4ef922c763d3","modified":1751351172578},{"_id":"themes/anzhiyu/scripts/tag/hide.js","hash":"8c9275fd1a357670a84577306b5e9568ab875a7b","modified":1751351172578},{"_id":"themes/anzhiyu/scripts/tag/image.js","hash":"382cae620f3917cc99762942ad40b3ff146216ba","modified":1751351172579},{"_id":"themes/anzhiyu/scripts/tag/iconfont.js","hash":"ea983f7c8dd060ed411044df1c10aa6b72dec34f","modified":1751351172579},{"_id":"themes/anzhiyu/scripts/tag/inline-labels.js","hash":"eaaedc3d65384e0beb4306534ef4ed202b46da18","modified":1751351172579},{"_id":"themes/anzhiyu/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1751351172580},{"_id":"themes/anzhiyu/scripts/tag/link.js","hash":"9b7f81107a7c9d887060f6d3309f444090d7ccc3","modified":1751351172581},{"_id":"themes/anzhiyu/scripts/tag/label.js","hash":"160cce6b5d58187dea0cb907116cda2bbfe6ee1c","modified":1751351172580},{"_id":"themes/anzhiyu/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1751351172582},{"_id":"themes/anzhiyu/scripts/tag/media.js","hash":"ebe4a6ebe34e8d77c0652c63bd5f763439743eb2","modified":1751351172581},{"_id":"themes/anzhiyu/scripts/tag/mermaid.js","hash":"e1a5e8e412cbbb3fc361136e9a5408170b7d93f8","modified":1751351172581},{"_id":"themes/anzhiyu/scripts/tag/site.js","hash":"b085ab9682b8465b1399c60889283d809a91e980","modified":1751351172583},{"_id":"themes/anzhiyu/scripts/tag/span.js","hash":"89aaa0678188aa85ec18116af4b036f80ca7c073","modified":1751351172583},{"_id":"themes/anzhiyu/scripts/tag/tabs.js","hash":"5dac02bb83aab3ff2afb3317ef7a2a626440671f","modified":1751351172583},{"_id":"themes/anzhiyu/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1751351172584},{"_id":"themes/anzhiyu/scripts/tag/tip.js","hash":"0c2833f461168fa04c23bfd87f1274976d611fc1","modified":1751351172584},{"_id":"themes/anzhiyu/source/css/index.styl","hash":"10e57f33d5326128dd736135d15c8d46162d27de","modified":1751351172647},{"_id":"themes/anzhiyu/source/css/var.styl","hash":"94afa286f44875f20b7bc1b983069bee0b97058c","modified":1751351172648},{"_id":"themes/anzhiyu/source/img/512.png","hash":"6988b23a31304d9de45b95a1e7c05dd42024e560","modified":1751351172650},{"_id":"themes/anzhiyu/source/img/comment_bg.png","hash":"91612a887446fb436e9151981e2289f2a426a3e5","modified":1751351172651},{"_id":"themes/anzhiyu/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1751351172650},{"_id":"themes/anzhiyu/source/img/default_cover.jpg","hash":"455fa65e2736f61ac36360dd4f76fc1ab6a1cdd5","modified":1751351172651},{"_id":"themes/anzhiyu/source/img/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1751351172651},{"_id":"themes/anzhiyu/source/js/tw_cn.js","hash":"b3dfb877a3f2e66086b9e4f714f906df6f104700","modified":1751351172671},{"_id":"themes/anzhiyu/source/js/main.js","hash":"426ef036cb913ebb2aabe24bac1681757464b47c","modified":1751351172669},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/clock.pug","hash":"475ef93ee833f283e02a0a0e4e5a0ab8743e7e19","modified":1751351172494},{"_id":"themes/anzhiyu/source/js/utils.js","hash":"8072d375ba873eb6d7d649f39689b4b03c33cb1d","modified":1751351172671},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/ai-info.pug","hash":"73ca24d63adbab59ef206771107a90f3afb61d56","modified":1751351172493},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/console.pug","hash":"e05a5f1debeb6a48e918e04097f0a4551c93a405","modified":1751351172494},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/rightmenu.pug","hash":"60a6829fed3cfebf7bdab3475a4c0291a82a678c","modified":1751351172495},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/tags-group-all.pug","hash":"b3fd7a18a9b87500348eb36be62ca29e91b58dd8","modified":1751351172496},{"_id":"themes/anzhiyu/layout/includes/bili-banner/index.pug","hash":"e3954ae43a708a560894fb28a21ac369a5b2d422","modified":1751351172497},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/log-js.pug","hash":"b298ec00407d7e30b744a56ee8df8cec39989e52","modified":1751351172495},{"_id":"themes/anzhiyu/layout/includes/head/analytics.pug","hash":"c1e45d4d0bd905ddcd2282de4fe89be92e67847d","modified":1751351172500},{"_id":"themes/anzhiyu/layout/includes/head/config.pug","hash":"41f77ddd5c3259d7f74f831b40dfa6ab202a990a","modified":1751351172501},{"_id":"themes/anzhiyu/layout/includes/head/Open_Graph.pug","hash":"2f0a172bd29333a2c6301ba4b86a74173f5502d3","modified":1751351172500},{"_id":"themes/anzhiyu/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1751351172502},{"_id":"themes/anzhiyu/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1751351172504},{"_id":"themes/anzhiyu/layout/includes/head/config_site.pug","hash":"c50d21cd3ee0d45d8fe65ed679c4d131ef4ed7e6","modified":1751351172501},{"_id":"themes/anzhiyu/layout/includes/head/pwa.pug","hash":"0fc38262a891a66f98972fe0389ad9a5e1abdb7d","modified":1751351172503},{"_id":"themes/anzhiyu/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1751351172502},{"_id":"themes/anzhiyu/layout/includes/header/index.pug","hash":"b4a9f655175fca7cfe9ef3ba3866d763271fa081","modified":1751351172505},{"_id":"themes/anzhiyu/layout/includes/head/preconnect.pug","hash":"01cf3be31783c0432ee2c79a8dc4c1422832cbe0","modified":1751351172503},{"_id":"themes/anzhiyu/layout/includes/header/nav.pug","hash":"846131493ff841e15ff7dd145033331851b5af18","modified":1751351172506},{"_id":"themes/anzhiyu/layout/includes/header/menu_item.pug","hash":"c3f390d17d92da630892f275dc935f04a7a18dbf","modified":1751351172505},{"_id":"themes/anzhiyu/layout/includes/header/post-info.pug","hash":"0c43738c963d97cc3e28c95004d0d689fb395217","modified":1751351172506},{"_id":"themes/anzhiyu/layout/includes/header/social.pug","hash":"7e9ee70012fdef99e80aa92fb301e27900a8ec6b","modified":1751351172507},{"_id":"themes/anzhiyu/layout/includes/loading/fullpage-loading.pug","hash":"1ffb745ce3a56f5ab180cdf08907d3e3ea20d387","modified":1751351172510},{"_id":"themes/anzhiyu/layout/includes/loading/index.pug","hash":"81362a8c82029119d02b33f0f7bed249950040f0","modified":1751351172510},{"_id":"themes/anzhiyu/layout/includes/loading/pace.pug","hash":"8f25b42cb6c2c07ea609ad69c243bb11463d8b60","modified":1751351172510},{"_id":"themes/anzhiyu/layout/includes/mixins/article-sort.pug","hash":"7527afa245ae66e8913d72627e9bea7bdc38ad50","modified":1751351172511},{"_id":"themes/anzhiyu/layout/includes/mixins/post-ui.pug","hash":"4b9b6377d14e3bdf977ed130324c8d043945f057","modified":1751351172511},{"_id":"themes/anzhiyu/layout/includes/page/about.pug","hash":"ac7e135290f744b005e6c1f38a89d7e1159c61e2","modified":1751351172513},{"_id":"themes/anzhiyu/layout/includes/page/album.pug","hash":"6473c0f664bc1d7b02ecbb1321a895d506dc5094","modified":1751351172514},{"_id":"themes/anzhiyu/layout/includes/page/album_detail.pug","hash":"b056b5cc18876665316e235b60247cdc589c8f99","modified":1751351172514},{"_id":"themes/anzhiyu/layout/includes/page/categories.pug","hash":"2a9ad7e38cda70a54e7a65a513f0748fdee3ca9e","modified":1751351172515},{"_id":"themes/anzhiyu/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1751351172515},{"_id":"themes/anzhiyu/layout/includes/page/equipment.pug","hash":"7bd7f12123eb8d6b5ea65397642fec92cdbcdb1e","modified":1751351172516},{"_id":"themes/anzhiyu/layout/includes/page/fcircle.pug","hash":"42998c6f90aa1e5ec87ba628e42b2a16889970e1","modified":1751351172517},{"_id":"themes/anzhiyu/layout/includes/page/essay.pug","hash":"0e317d13c40e8393962cf5fa39fee6cf82601007","modified":1751351172517},{"_id":"themes/anzhiyu/layout/includes/page/flink.pug","hash":"7cf8f32581202e60fdc960f2f73ef9bcec5ff27f","modified":1751351172518},{"_id":"themes/anzhiyu/layout/includes/page/room.pug","hash":"c509876ab0488cdc3a21f0dcbea01abdcae58a31","modified":1751351172519},{"_id":"themes/anzhiyu/layout/includes/page/tags.pug","hash":"affa27b6fa972c2868dc7a445342becea43476b9","modified":1751351172519},{"_id":"themes/anzhiyu/layout/includes/page/music.pug","hash":"2cee254ce63d5890e6cabb358b29e0c01275abc3","modified":1751351172518},{"_id":"themes/anzhiyu/layout/includes/popup/index.pug","hash":"d7144d918882727b60af84269761e6e4ce1987ad","modified":1751351172520},{"_id":"themes/anzhiyu/layout/includes/post/post-copyright.pug","hash":"c0849c39a27d1e2952dc59df1f0200856e21068a","modified":1751351172520},{"_id":"themes/anzhiyu/layout/includes/post/ptool.pug","hash":"90ad5d7c0ab8da38d71b514c6d4e14488f5c66c8","modified":1751351172521},{"_id":"themes/anzhiyu/layout/includes/post/reward.pug","hash":"22af38003ab111e6449c029310a32021bb2a00a3","modified":1751351172521},{"_id":"themes/anzhiyu/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1751351172523},{"_id":"themes/anzhiyu/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1751351172533},{"_id":"themes/anzhiyu/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1751351172539},{"_id":"themes/anzhiyu/layout/includes/third-party/footerBarSubtitle.pug","hash":"62cefd8319c3819e2d0606a047cb90583c28cb78","modified":1751351172533},{"_id":"themes/anzhiyu/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1751351172540},{"_id":"themes/anzhiyu/layout/includes/third-party/pjax.pug","hash":"e0f26227c21544960b9abeb9ef7e9e5a02fffc64","modified":1751351172540},{"_id":"themes/anzhiyu/layout/includes/third-party/subtitle.pug","hash":"d561d36229692e2c8a9ee45a7c24c0c2b3599170","modified":1751351172545},{"_id":"themes/anzhiyu/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1751351172547},{"_id":"themes/anzhiyu/layout/includes/widget/card_announcement.pug","hash":"ac60c45ae916120aab1e5c5039444029042eb3a4","modified":1751351172548},{"_id":"themes/anzhiyu/layout/includes/widget/card_archives.pug","hash":"aea77a8644328f08b79f18d3b43702b0d8eb853c","modified":1751351172548},{"_id":"themes/anzhiyu/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1751351172549},{"_id":"themes/anzhiyu/layout/includes/widget/card_author.pug","hash":"fd12d544418d11495878dedd6dc0155078cc48bb","modified":1751351172549},{"_id":"themes/anzhiyu/layout/includes/widget/card_console_tags.pug","hash":"2d9385004542fe1ce615a9b4f33e45e98eb7befc","modified":1751351172551},{"_id":"themes/anzhiyu/layout/includes/widget/card_console_archives.pug","hash":"cd4626a66fe724241d8a219e78308136b4919c6f","modified":1751351172550},{"_id":"themes/anzhiyu/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1751351172550},{"_id":"themes/anzhiyu/layout/includes/widget/card_newest_comment.pug","hash":"f136d6265e7a4e77772853c248a26804d35697dd","modified":1751351172551},{"_id":"themes/anzhiyu/layout/includes/widget/card_post_toc.pug","hash":"9c849ba0451a314a1d97016be7b12f04c3ce6444","modified":1751351172551},{"_id":"themes/anzhiyu/layout/includes/widget/card_recent_post.pug","hash":"1740e6ef4e483c108dd6af5808ed7e99c644a4d0","modified":1751351172552},{"_id":"themes/anzhiyu/layout/includes/widget/card_tags.pug","hash":"b8315b369164ee12c79cd0d1ebc11753e3c26f4d","modified":1751351172552},{"_id":"themes/anzhiyu/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1751351172553},{"_id":"themes/anzhiyu/layout/includes/widget/card_webinfo.pug","hash":"7d3cae5dac3e0b2993798839df3d3cfac1fd97e9","modified":1751351172553},{"_id":"themes/anzhiyu/layout/includes/widget/index.pug","hash":"4b20439472a1cefd958afc6c882617c6fad6a0cd","modified":1751351172554},{"_id":"themes/anzhiyu/layout/includes/widget/card_weixin.pug","hash":"7725687c5db4329d989350f2d3e1de72b6e69156","modified":1751351172554},{"_id":"themes/anzhiyu/layout/includes/top/top.pug","hash":"2b68f90a9f14f29828602289da867226b2e3c144","modified":1751351172546},{"_id":"themes/anzhiyu/source/css/_highlight/highlight.styl","hash":"67c3f00d450ee4f992c2561cd4fd9e6b3bba2099","modified":1751351172615},{"_id":"themes/anzhiyu/source/css/_highlight/theme.styl","hash":"fd8115debce97b92c31927abb877de1bdf55fa83","modified":1751351172618},{"_id":"themes/anzhiyu/source/css/_global/function.styl","hash":"67ae8fa268d4dfe7ac691adbb1b0fdf7d2afab8f","modified":1751351172613},{"_id":"themes/anzhiyu/source/css/_global/index.styl","hash":"2c2a0bb1ec71246eaccc80e944ea75ed61c4d1b6","modified":1751351172614},{"_id":"themes/anzhiyu/source/css/_global/icon.styl","hash":"0a8e0470910209033479ef515013bb968db9e4b5","modified":1751351172614},{"_id":"themes/anzhiyu/source/css/_global/loading.styl","hash":"0dea01a2d462685b952fa41f51de784149b45e4f","modified":1751351172615},{"_id":"themes/anzhiyu/source/css/_layout/404.styl","hash":"6c984a3a6ac4599ea11f56f218ab575242a6217e","modified":1751351172619},{"_id":"themes/anzhiyu/source/css/_layout/aside.styl","hash":"fadd9e7e75b4b2c269310928859d5ec734aaf056","modified":1751351172619},{"_id":"themes/anzhiyu/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1751351172621},{"_id":"themes/anzhiyu/source/css/_layout/banner.styl","hash":"31df78e8a76590d735d27c82196b9ce0ba6e722f","modified":1751351172620},{"_id":"themes/anzhiyu/source/css/_layout/head.styl","hash":"f093d83d13d778cd0e0053e1b4dde63d66d4bce2","modified":1751351172623},{"_id":"themes/anzhiyu/source/css/_layout/comments.styl","hash":"74a11d371c2e3a7f02ab314f769483960399b2b0","modified":1751351172621},{"_id":"themes/anzhiyu/source/css/_layout/footer.styl","hash":"fe3004296f8eff61155b7095f78bfa7bc2331d08","modified":1751351172622},{"_id":"themes/anzhiyu/source/css/_layout/nav.styl","hash":"978915633e99e1d49bd06b94bea2eb405c8fcba0","modified":1751351172624},{"_id":"themes/anzhiyu/source/css/_layout/home_top.styl","hash":"1df055ba6519f6920029cc4400fc39d89602440f","modified":1751351172623},{"_id":"themes/anzhiyu/source/css/_layout/oneGraphFlow.styl","hash":"3a2a8549df55fb053871576be20e7e85fe4cda37","modified":1751351172625},{"_id":"themes/anzhiyu/source/css/_layout/post.styl","hash":"ec6a5d69475f528dfd08a7cc0877d904a4b4bcbf","modified":1751351172626},{"_id":"themes/anzhiyu/source/css/_layout/ptool.styl","hash":"d9ca5e1a7b584c96246fb626aa74f85766c481aa","modified":1751351172626},{"_id":"themes/anzhiyu/source/css/_layout/rightmenu.styl","hash":"67ed9f69ce7e88af1d96667e112f5592d1435730","modified":1751351172628},{"_id":"themes/anzhiyu/source/css/_layout/reward.styl","hash":"a1db997b40d35bcbb270937d76bf54021bccdda2","modified":1751351172627},{"_id":"themes/anzhiyu/source/css/_layout/relatedposts.styl","hash":"96825d6fec11a7caca5d7be6ce67b985a5be8bb2","modified":1751351172627},{"_id":"themes/anzhiyu/source/css/_layout/rightside.styl","hash":"5d92b9bb99515d391323ddcaa91bfcdc5be41f44","modified":1751351172628},{"_id":"themes/anzhiyu/source/css/_layout/shortcutKey.styl","hash":"9f45ebfba4fd0c6bde7877b06d7e1b3b1e7da405","modified":1751351172628},{"_id":"themes/anzhiyu/source/css/_layout/sidebar.styl","hash":"1414615f345f00cc85bfc81d33268a95a2cb1090","modified":1751351172629},{"_id":"themes/anzhiyu/source/css/_layout/third-party.styl","hash":"b5f366f4c5286ca4321c832852feddda1f18c960","modified":1751351172629},{"_id":"themes/anzhiyu/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1751351172631},{"_id":"themes/anzhiyu/source/css/_page/archives.styl","hash":"f70bfb4e5b5b59c5713695927c2140957dc7aa1f","modified":1751351172632},{"_id":"themes/anzhiyu/source/css/_page/about.styl","hash":"08e81e2fa5b5e761211115c733e657f56fbdc507","modified":1751351172631},{"_id":"themes/anzhiyu/source/css/_layout/pagination.styl","hash":"e12ff8f89458b17659e58dc65fdd2b9e7d7b4c68","modified":1751351172625},{"_id":"themes/anzhiyu/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1751351172632},{"_id":"themes/anzhiyu/source/css/_page/common.styl","hash":"2ad261e7a747e2e43757f4c11324c9ed459fdbc5","modified":1751351172633},{"_id":"themes/anzhiyu/source/css/_page/flink.styl","hash":"342b32142741c6a51f5219c93b9e3fad95430145","modified":1751351172634},{"_id":"themes/anzhiyu/source/css/_page/homepage.styl","hash":"8310390419d1eb5b23ae48aced4a87b0318e85be","modified":1751351172635},{"_id":"themes/anzhiyu/source/css/_page/equipment.styl","hash":"5a4cbddb41aee76cb2a9c5433b7b5a487f118da7","modified":1751351172633},{"_id":"themes/anzhiyu/source/css/_page/music.styl","hash":"cfeba567ccb6bc421261d71a2e50242a955ba099","modified":1751351172635},{"_id":"themes/anzhiyu/source/css/_page/tag_page.styl","hash":"7a93cd4509a16b845ce2a9044320f43214dbcdc5","modified":1751351172636},{"_id":"themes/anzhiyu/source/css/_page/reward.styl","hash":"bbe91f4f0525a01901be2794f698ed99f5cb58bd","modified":1751351172636},{"_id":"themes/anzhiyu/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1751351172636},{"_id":"themes/anzhiyu/source/css/_mode/darkmode.styl","hash":"c0e081e0fac44041942c1dcb2f799095c4116e20","modified":1751351172630},{"_id":"themes/anzhiyu/source/css/_mode/readmode.styl","hash":"618694850dfa8fac81e21ea369fb8f5589ac0d0f","modified":1751351172630},{"_id":"themes/anzhiyu/source/css/_tags/Introduction-card.styl","hash":"12a3b3ad1e97d0a4fa63521c4eaf2b1025a95719","modified":1751351172638},{"_id":"themes/anzhiyu/source/css/_tags/bilbili.styl","hash":"e909f60fbbdcbd072fcb1a4c2eeafa237a13b6b0","modified":1751351172638},{"_id":"themes/anzhiyu/source/css/_tags/btns.styl","hash":"0e22fdd43f698d2b27999301ca2a8bb392ac04cf","modified":1751351172638},{"_id":"themes/anzhiyu/source/css/_tags/button.styl","hash":"ea2018ba7cbc2e11d413231556d5b001cdbd5117","modified":1751351172639},{"_id":"themes/anzhiyu/source/css/_tags/checkbox.styl","hash":"3f1fcb0973ccea197afef26e0d515b3800dae348","modified":1751351172639},{"_id":"themes/anzhiyu/source/css/_tags/folding.styl","hash":"f4c117ccd9ffec997a36347358050021e60df498","modified":1751351172639},{"_id":"themes/anzhiyu/source/css/_tags/gallery.styl","hash":"99f2edcee8318b8cf5911fe344b89f58df7f313c","modified":1751351172640},{"_id":"themes/anzhiyu/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1751351172641},{"_id":"themes/anzhiyu/source/css/_tags/hide.styl","hash":"4de1984c5fdf774ef2f8e856ea188729d06743b6","modified":1751351172641},{"_id":"themes/anzhiyu/source/css/_tags/image.styl","hash":"f0043e6d5542e63a919162a545fa228acc8e1ef9","modified":1751351172642},{"_id":"themes/anzhiyu/source/css/_tags/inline-labels.styl","hash":"25a32624cab8b623634bb797cde7f2c6baff5a15","modified":1751351172642},{"_id":"themes/anzhiyu/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1751351172642},{"_id":"themes/anzhiyu/source/css/_tags/media.styl","hash":"da94e08918d1468871e69e265969d501310d3553","modified":1751351172643},{"_id":"themes/anzhiyu/source/css/_tags/site-card.styl","hash":"d497a9c654b927e1579a8a8513573bafacc7150a","modified":1751351172644},{"_id":"themes/anzhiyu/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1751351172643},{"_id":"themes/anzhiyu/source/css/_tags/note.styl","hash":"c991d29f0b970d4b738656501847cc70161dc594","modified":1751351172643},{"_id":"themes/anzhiyu/source/css/_tags/span.styl","hash":"252220ebb7f8e3bbff620b4d254a4703dfea7f3e","modified":1751351172644},{"_id":"themes/anzhiyu/source/css/_search/algolia.styl","hash":"e1dda3de7bbfce226bb8300db15a930176289a27","modified":1751351172636},{"_id":"themes/anzhiyu/source/css/_tags/tip.styl","hash":"4682fa963d6e667e24fe35a18b5d351c640a2769","modified":1751351172646},{"_id":"themes/anzhiyu/source/css/_tags/timeline.styl","hash":"f538fe0525c6491ac24b23ae2f9c1d2c396494fd","modified":1751351172645},{"_id":"themes/anzhiyu/source/css/_search/index.styl","hash":"c315988ee28ad853aaa2060055d10aa88225a131","modified":1751351172636},{"_id":"themes/anzhiyu/source/css/_tags/tabs.styl","hash":"ead8a25eb164a361990c8a4cef3afb45d9dc33d9","modified":1751351172645},{"_id":"themes/anzhiyu/source/css/_search/local-search.styl","hash":"45792c13c7c439d412b7dc597d74d24f3b598406","modified":1751351172637},{"_id":"themes/anzhiyu/source/css/_third-party/normalize.min.css","hash":"a1d57065668c1695a10032cea26dc4b5cd143690","modified":1751351172646},{"_id":"themes/anzhiyu/source/css/_third-party/twikoo.styl","hash":"1040ba99c7b14ca3d71e0e517310307376892af6","modified":1751351172647},{"_id":"themes/anzhiyu/source/css/_third-party/snackbar.styl","hash":"86a40c9b534498dadbf5076c1d6f84c030da5184","modified":1751351172646},{"_id":"themes/anzhiyu/source/img/siteicon/16.png","hash":"8dc6ca32ff1264f7c1c3a8f62727a8c96ea7525b","modified":1751351172662},{"_id":"themes/anzhiyu/source/img/siteicon/32.png","hash":"147aae33224066ef2a5987c3cbbfa4309c49cef4","modified":1751351172663},{"_id":"themes/anzhiyu/source/img/siteicon/apple-icon-180.png","hash":"7f580ec4819c9ef10b1306102152f4473f037a98","modified":1751351172664},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-192.maskable.png","hash":"528b94ebcd34fb55436d64fdda76ef43ccbf031f","modified":1751351172664},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-512.maskable.png","hash":"6f8b4b3df8d1498db55a559f7106dc9b6e6af647","modified":1751351172664},{"_id":"themes/anzhiyu/source/js/anzhiyu/ai_abstract.js","hash":"c857f20164ed3efddc284bbf7ef56eee8cc37bcd","modified":1751351172666},{"_id":"themes/anzhiyu/source/js/anzhiyu/comment_barrage.js","hash":"1fb6922cb6d9345fc73d7f516c48a3799d7cdebd","modified":1751351172667},{"_id":"themes/anzhiyu/source/js/anzhiyu/people.js","hash":"c76d30b73f575cd9e0659600b05cf3819f20b17c","modified":1751351172667},{"_id":"themes/anzhiyu/source/js/anzhiyu/random_friends_post.js","hash":"03b34e7fc4c0b5748f036a45e822be75b282b86c","modified":1751351172667},{"_id":"themes/anzhiyu/source/js/anzhiyu/right_click_menu.js","hash":"0de57a2c37a799fec0979ea3195f4dd3827e9514","modified":1751351172668},{"_id":"themes/anzhiyu/source/js/search/algolia.js","hash":"51bcf73660635454d66dd2b7a906caf69afa9518","modified":1751351172670},{"_id":"themes/anzhiyu/source/js/search/local-search.js","hash":"23e1b201d825afc1063b51031c5c172dfdeb49d4","modified":1751351172670},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/artalk.pug","hash":"32b1ec70a6e350c7839b50110a0949d39b827db8","modified":1751351172524},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/index.pug","hash":"5a6072e73874997e27dce1bf47f3d37922430336","modified":1751351172525},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7e233f872aea6fd6beccdc9efd86b1bf9ec9f12d","modified":1751351172525},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/waline.pug","hash":"6dd328b615f7ecf604fb0a1fbb1479e89674ea4b","modified":1751351172526},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/artalk.pug","hash":"d3fc4c539bb4e70539ba0f90debd06791be28466","modified":1751351172530},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1751351172526},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/giscus.pug","hash":"52db09844df436f026f6f0896190bdbf6f15a473","modified":1751351172530},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/index.pug","hash":"dffbe34a6030c9c4022928b3bdb7df71c93a0aa3","modified":1751351172531},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/js.pug","hash":"6bdb7e04d7e6c2a1608ad5a43866ced2fca9955e","modified":1751351172531},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/twikoo.pug","hash":"a60562048ff32bde1ceb8b5975158c85db2e16f2","modified":1751351172531},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/waline.pug","hash":"2fed41601733bf3b1a437aa40b9101987b9a95a2","modified":1751351172532},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/valine.pug","hash":"cfcbc39104ff3bb44bdb41d9b6dab8388005b750","modified":1751351172531},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/chatra.pug","hash":"08a85e52fc800d3562df869e5e2613313e76fce6","modified":1751351172527},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/crisp.pug","hash":"09d2ab2570b67e6f09244a898ccab5567cb82ace","modified":1751351172528},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/daovoice.pug","hash":"0d960849d5b05d27ec87627b983ca35f2411b9e8","modified":1751351172528},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/index.pug","hash":"085b6ec501eef02bb82157712cde35bf5cdf639e","modified":1751351172529},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/tidio.pug","hash":"26bbedadf03ca8e1d8a8f1d39444cbe3413f8872","modified":1751351172529},{"_id":"themes/anzhiyu/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1751351172534},{"_id":"themes/anzhiyu/layout/includes/third-party/math/katex.pug","hash":"65a432d2c54b9269ddaa68715dbcd8724ed32efb","modified":1751351172535},{"_id":"themes/anzhiyu/layout/includes/third-party/math/mathjax.pug","hash":"bb944185f4bb9f9a9b9d70ee215f66ccd6d4c6cf","modified":1751351172536},{"_id":"themes/anzhiyu/layout/includes/third-party/math/mermaid.pug","hash":"0b0123024cf64a23de92f9668d71f61558cf8f60","modified":1751351172536},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/artalk.pug","hash":"c46c9af5f626063aaafe5b0c027f4f6be06d4fcf","modified":1751351172537},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"25b1e1cc5eca5a45f738071c3c66ca7a156b3740","modified":1751351172538},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/index.pug","hash":"cb4021a8bbb4045c2ecca1a161921ea45fb1506f","modified":1751351172537},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/valine.pug","hash":"836d25b645aba02c7148547aed4a1be4f6146e07","modified":1751351172538},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/waline.pug","hash":"5aaffe9f673e5148493e14c84ceab50652e8a0e6","modified":1751351172539},{"_id":"themes/anzhiyu/layout/includes/third-party/runtime/runtime-js.pug","hash":"f76b4d84993a26e919bbc7cd531c5da5c5edd0c0","modified":1751351172541},{"_id":"themes/anzhiyu/layout/includes/third-party/search/algolia.pug","hash":"7d48985c136472a9a3170d4c57758bb275f6ec7b","modified":1751351172542},{"_id":"themes/anzhiyu/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1751351172543},{"_id":"themes/anzhiyu/layout/includes/third-party/search/docsearch.pug","hash":"4e0b2a779654022dff37f74aaad24e1f04280657","modified":1751351172542},{"_id":"themes/anzhiyu/layout/includes/third-party/search/local-search.pug","hash":"928accb5fb5978b851b1d19abcd464258dd10e06","modified":1751351172543},{"_id":"themes/anzhiyu/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1751351172544},{"_id":"themes/anzhiyu/layout/includes/third-party/share/index.pug","hash":"a47fe41f39f0073d98baa72adbde87b2d1499049","modified":1751351172544},{"_id":"themes/anzhiyu/source/css/_extra/album/album.css","hash":"d79cc995aca04bb0072b206668a8530ff4bdacb6","modified":1751351172586},{"_id":"themes/anzhiyu/layout/includes/third-party/share/share-js.pug","hash":"b45fc15c3ae7db3a0fbce0d6da74a72a95ca8a2b","modified":1751351172545},{"_id":"themes/anzhiyu/source/css/_extra/album/album_detail.css","hash":"868db4e9e51e2bbe2d6555c957ecf56d50032c3c","modified":1751351172586},{"_id":"themes/anzhiyu/source/css/_extra/aside_weixin/aside_weixin.css","hash":"a96b0559ca915f2aa1f2a80412bb75cfce6fea38","modified":1751351172587},{"_id":"themes/anzhiyu/source/css/_extra/anzhiyu/custom.css","hash":"262291db00a343991c5472131804a4fd00deed4f","modified":1751351172586},{"_id":"themes/anzhiyu/source/css/_extra/catalog_list/catalog_list.css","hash":"027a9fb2d501c82d4bb6d69e2e76a7fa8be27f11","modified":1751351172587},{"_id":"themes/anzhiyu/source/css/_extra/categoryBar/categoryBar.css","hash":"07ef90cb816c5fef8114031bfbe7f7741b6b9b98","modified":1751351172587},{"_id":"themes/anzhiyu/source/css/_extra/code/code.css","hash":"bb9e145a87748f2db0441ab2ea79ef4a7e03356e","modified":1751351172591},{"_id":"themes/anzhiyu/source/css/_extra/code/details_summary.css","hash":"71d98974fca9d899bcb5c429b3ab3e9e1cb88bba","modified":1751351172591},{"_id":"themes/anzhiyu/source/css/_extra/clock/clock.css","hash":"581be0a5214a5534e4cf81ceb3184737e5f2d987","modified":1751351172589},{"_id":"themes/anzhiyu/source/css/_extra/commentBarrage/commentBarrage.css","hash":"335861ca0fc4aa4be700b769c871038743ea95dd","modified":1751351172591},{"_id":"themes/anzhiyu/source/css/_extra/essay_page/essay_page.css","hash":"99d7a0fece8d6e69da5ba570acb77016e92113fd","modified":1751351172594},{"_id":"themes/anzhiyu/source/css/_extra/essay_page/home_essay_bar.css","hash":"69c4c9acd4a42c6fad4bb507e45cf01b5f0aa37b","modified":1751351172594},{"_id":"themes/anzhiyu/source/css/_extra/console/console.css","hash":"0c22c5c2a004b09bb913ce52caf7ff115c8d7ef5","modified":1751351172592},{"_id":"themes/anzhiyu/source/css/_extra/fix/aplayer.css","hash":"d8beefb88560e30178b8baab596791e51b4d5451","modified":1751351172595},{"_id":"themes/anzhiyu/source/css/_extra/fix/bilibili-bangumi.css","hash":"0cb28adec6878ebd7a9372f289e21280b2bc7259","modified":1751351172595},{"_id":"themes/anzhiyu/source/css/_extra/fix/bilibili-ratio.css","hash":"628352103e72c98e6d2b25f1cdb39070bd0f021c","modified":1751351172595},{"_id":"themes/anzhiyu/source/css/_extra/fix/categories.css","hash":"b6f7f3e384f0497926ffda4a6db1ccfc90307651","modified":1751351172596},{"_id":"themes/anzhiyu/source/css/_extra/fix/comments.css","hash":"7c2a30ceeb7519c96eda1c2ef67b6873ba3f24d2","modified":1751351172597},{"_id":"themes/anzhiyu/source/css/_extra/fix/clock.css","hash":"adb0616fdb157a880d1ab01bfb51e522df8c3523","modified":1751351172596},{"_id":"themes/anzhiyu/source/css/_extra/fix/fcircle_page.css","hash":"16833b57f9dbb1d72cdf4a3cd80751a315a0bb27","modified":1751351172598},{"_id":"themes/anzhiyu/source/css/_extra/fix/dark.css","hash":"dfc609b95f31544177babc76dade1720fe7cda42","modified":1751351172597},{"_id":"themes/anzhiyu/source/css/_extra/fix/gitcalendar.css","hash":"b3081e90ff9994e0ed0206065bbb07daa90d6e29","modified":1751351172599},{"_id":"themes/anzhiyu/source/css/_extra/fix/hexo-tag-dplayer.css","hash":"7ded42d62e0ba475b9789977ed7236a6c1b32007","modified":1751351172599},{"_id":"themes/anzhiyu/source/css/_extra/fix/link_page.css","hash":"ced162602659f3cb0e423ef15c532cc7c99d6123","modified":1751351172600},{"_id":"themes/anzhiyu/source/css/_extra/fix/hide-block.css","hash":"cb6319200511548acd5642f4c6d9a3115a778b35","modified":1751351172600},{"_id":"themes/anzhiyu/source/css/_extra/fix/radius.css","hash":"a55321b326f241d0788359d5366172d7aeb734e1","modified":1751351172601},{"_id":"themes/anzhiyu/source/css/_extra/fix/site-card.css","hash":"f56eff8b96c773ae6a8e97ef0e1c822feabe5854","modified":1751351172601},{"_id":"themes/anzhiyu/source/css/_extra/fix/overflow.css","hash":"b2dafcb1bc1fa4c06f648245f11acdaf7a878d05","modified":1751351172601},{"_id":"themes/anzhiyu/source/css/_extra/friends/friends.css","hash":"171868650c64cb995cfab069b3c128b5d07e3d38","modified":1751351172603},{"_id":"themes/anzhiyu/source/css/_extra/footer/footer.css","hash":"497980fa313ff7045c0756a32dc08101dcc3013d","modified":1751351172602},{"_id":"themes/anzhiyu/source/css/_extra/greeting_box/greeting_box.css","hash":"9c54f33a8f22064e803b2a8324f93549021f5aa4","modified":1751351172603},{"_id":"themes/anzhiyu/source/css/_extra/home_top/categorygroup.css","hash":"b38d1dd55da2ff3e18e32628a5484e46e880d6b9","modified":1751351172604},{"_id":"themes/anzhiyu/source/css/_extra/home_top/home_top.css","hash":"954a9eca322a5eb3fd04ad5a71f61927b0c35400","modified":1751351172604},{"_id":"themes/anzhiyu/source/css/_extra/home_top/home_top_post_group.css","hash":"4f60d12d4f174453223be2070ed608de4ad5d14d","modified":1751351172605},{"_id":"themes/anzhiyu/source/css/_extra/home_top/swiperstyle.css","hash":"33f5a0731ac439871dd54aad7528431df091b551","modified":1751351172606},{"_id":"themes/anzhiyu/source/css/_extra/home_top/top_group_banner.css","hash":"4b3090b0f5f01dbd4b1706e4104962b15c05f8d0","modified":1751351172607},{"_id":"themes/anzhiyu/source/css/_extra/local_search/local_search.css","hash":"9fc79ed81a5f0476172fe688ecba08e7b8e3be03","modified":1751351172608},{"_id":"themes/anzhiyu/source/css/_extra/reward/about-reward.css","hash":"2201faa78b7a9ded910f59abe28df2b897fd23b0","modified":1751351172609},{"_id":"themes/anzhiyu/source/css/_extra/reset/reset.css","hash":"4651067de360b4e00dd361795a74a7ed2a5a62ff","modified":1751351172608},{"_id":"themes/anzhiyu/source/css/_extra/room/room.css","hash":"5a730fdec4fd9e1d8b38e407ba1d139abd6a17d2","modified":1751351172610},{"_id":"themes/anzhiyu/source/css/_extra/single_card/single_card.css","hash":"f7690f0dde69437f2222a9889ea957a185a7fbb6","modified":1751351172611},{"_id":"themes/anzhiyu/source/css/_extra/skills/skills.css","hash":"12901c0c77345fbd92edf591ee98266919eed259","modified":1751351172612},{"_id":"themes/anzhiyu/source/css/_extra/tag/link.css","hash":"da429802cbe2cf45b66115d03c682e9463c34dc1","modified":1751351172612},{"_id":"themes/anzhiyu/source/css/_extra/runtime/runtime.css","hash":"6e8dbcf6e505cd96192c8b75970ff65f98acf51c","modified":1751351172611},{"_id":"themes/anzhiyu/source/css/_extra/tag/site.css","hash":"8735ce339b410a72fc314af37f5d7ffd783fad05","modified":1751351172613},{"_id":"themes/anzhiyu/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1751351172616},{"_id":"themes/anzhiyu/source/css/_highlight/highlight/index.styl","hash":"58680cd4ff5767afeabe4d4cfb621c0c2d7a68e4","modified":1751351172617},{"_id":"themes/anzhiyu/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1751351172617},{"_id":"themes/anzhiyu/source/css/_highlight/prismjs/index.styl","hash":"78398d5c407a30a561c1c98baccaabd9633edd27","modified":1751351172618},{"_id":"themes/anzhiyu/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1751351172618},{"_id":"themes/anzhiyu/source/img/404.jpg","hash":"030b9c7c9d654b3d67c1249a6e5900bf40c79373","modified":1751351172649},{"_id":"themes/anzhiyu/source/img/friend_404.gif","hash":"4c0a482bce3710942aff900d62c48333827e5a53","modified":1751351172656},{"_id":"themes/anzhiyu/source/img/loading.gif","hash":"b9e8d78b86bc48d565e26c8c1ea275c2c758fb0d","modified":1751351172662}],"Category":[{"name":"部署指南","_id":"cm4zhl9at0008n1bm9v9y2817"},{"name":"网络配置","_id":"cm4zhl9ax000cn1bmhzgy7yrk"},{"name":"安装教程","parent":"cm4zhl9at0008n1bm9v9y2817","_id":"cm4zhl9ay000en1bm9hvi4q53"},{"name":"性能监控","parent":"cm4zhl9ax000cn1bmhzgy7yrk","_id":"cm4zhl9az000gn1bmb3e876ke"},{"name":"配置管理","parent":"cm4zhl9ay000en1bm9hvi4q53","_id":"cm4zhl9az000in1bm84ruccmq"},{"name":"负载均衡","parent":"cm4zhl9az000gn1bmb3e876ke","_id":"cm4zhl9b0000kn1bm7la0fc0z"},{"name":"事务管理","_id":"cmck5581t0002ssvw4rtoelqr"},{"name":"系统休眠","_id":"cmck558200005ssvwhocb9zuv"},{"name":"java","_id":"cmck558220008ssvw9f613z7i"},{"name":"异步操作","parent":"cmck5581t0002ssvw4rtoelqr","_id":"cmck55827000cssvw2qy724i0"},{"name":" 配置指南","_id":"cmck5582a000gssvw0q1n7ssu"},{"name":"工具类","parent":"cmck558220008ssvw9f613z7i","_id":"cmck5582d000lssvwbyqf1i8x"},{"name":"服务器","_id":"cmck5582g000qssvw7szkfohh"},{"name":"前端开发","_id":"cmck5582i000xssvw5vrw6lo4"},{"name":"Spring框架","parent":"cmck55827000cssvw2qy724i0","_id":"cmck5582i0011ssvwbguf2ys5"},{"name":"Docker","_id":"cmck5582j0013ssvw27f390gd"},{"name":"Spring","_id":"cmck5582j0018ssvw89va0m2l"},{"name":"RTSP服务","parent":"cmck5582a000gssvw0q1n7ssu","_id":"cmck5582k001essvwg22cbihx"},{"name":"Linux系统","_id":"cmck5582k001gssvwfoh53qt2"},{"name":"mybatis","_id":"cmck5582l001issvwdmuxefwp"},{"name":"Java","_id":"cmck5582m001kssvw05of6nd5"},{"name":"网络配置","parent":"cmck5582g000qssvw7szkfohh","_id":"cmck5582n001pssvw3o4t3x4m"},{"name":"linux","_id":"cmck5582n001tssvw5ca3corf"},{"name":"组件设计","parent":"cmck5582i000xssvw5vrw6lo4","_id":"cmck5582o001wssvwhcvc70f3"},{"name":"笔记软件","parent":"cmck5582j0013ssvw27f390gd","_id":"cmck5582p001zssvw2bhr4fz0"},{"name":"Java","parent":"cmck5582j0018ssvw89va0m2l","_id":"cmck5582q0023ssvw3mfshj47"},{"name":"Nginx安装","parent":"cmck5582k001essvwg22cbihx","_id":"cmck5582s0027ssvwew6yhgbr"},{"name":"磁盘测试","parent":"cmck5582k001gssvwfoh53qt2","_id":"cmck5582s002assvwcbgr6ojo"},{"name":"Redis","parent":"cmck5582m001kssvw05of6nd5","_id":"cmck5582t002dssvw712wcqmx"},{"name":"WebDAV","parent":"cmck5582n001pssvw3o4t3x4m","_id":"cmck5582t002hssvwcm8fhqbg"},{"name":"代码示例","parent":"cmck5582o001wssvwhcvc70f3","_id":"cmck5582u002nssvw4hqcg4s1"},{"name":"开源","parent":"cmck5582p001zssvw2bhr4fz0","_id":"cmck5582v002sssvw6wdka9ob"},{"name":"Maven","parent":"cmck5582q0023ssvw3mfshj47","_id":"cmck5582x002yssvw5d5154mv"},{"name":"消息队列","parent":"cmck5582t002dssvw712wcqmx","_id":"cmck5582x0032ssvwdb4t0kfo"}],"Data":[{"_id":"link","data":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"IT Tools","link":"https://ittools.top/","avatar":"https://ittools.top/android-chrome-192x192.png","descr":"开发人员工具网站"},{"name":"Linux命令","link":"https://linux.forz.fun/","avatar":"https://linux.forz.fun/img/favicon.ico","descr":"Linux命令手册"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"关于","date":"2024-09-15T16:36:01.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2024-09-16 00:36:01\ntype: about\n---\n","updated":"2025-07-01T06:19:35.703Z","path":"about/index.html","_id":"cm4zhl9ak0000n1bmelk55l2c","comments":1,"layout":"page","content":"","cover":false,"excerpt":"","more":""},{"title":"标签","date":"2024-09-15T16:21:00.000Z","type":"tags","comments":0,"top_img":false,"orderby":"random","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2024-09-16 00:21:00\ntype: \"tags\"\ncomments: false\ntop_img: false\norderby: random\norder: 1\n---\n","updated":"2025-07-01T06:36:54.888Z","path":"tags/index.html","_id":"cm4zhl9ao0002n1bmamt0ah91","layout":"page","content":"","cover":false,"excerpt":"","more":""},{"title":"archives","date":"2024-09-15T16:41:00.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2024-09-16 00:41:00\ntype: archives\n---\n","updated":"2025-07-01T06:19:35.704Z","path":"archives/index.html","_id":"cm4zhl9aq0004n1bm4yfygmm3","comments":1,"layout":"page","content":"","cover":false,"excerpt":"","more":""},{"title":"分类","date":"2024-09-15T16:21:37.000Z","aside":false,"top_img":false,"type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2024-09-16 00:21:37\naside: false\ntop_img: false\ntype: \"categories\"\n---\n","updated":"2025-07-01T06:36:34.278Z","path":"categories/index.html","_id":"cm4zhl9as0006n1bm0qam3s4q","comments":1,"layout":"page","content":"","cover":false,"excerpt":"","more":""},{"title":"友情链接","date":"2024-09-15T16:22:14.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2024-09-16 00:22:14\ntype: \"link\"\n---\n","updated":"2025-07-01T06:19:35.705Z","path":"link/index.html","_id":"cm4zhl9av000an1bm7qk5d8jo","comments":1,"layout":"page","content":"","cover":false,"excerpt":"","more":""}],"Post":[{"title":"Java实现代理模式","date":"2024-12-19T01:55:21.000Z","updated":"2024-12-19T16:10:15.000Z","comments":1,"toc":true,"abbrlink":43440,"_content":"\n# Java实现代理模式\n\nJava实现代理模式\n\n1、代理模式\n\n---\n\n代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。\n\n代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。\n\n代理模式有**静态代理**和**动态代理**两种实现方式。\n\n2、静态代理\n\n---\n\n静态代理中，我们对目标对象的每个方法的增强都是手动完成的（后面会具体演示代码），非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦(需要对每个目标类都单独写一个代理类)。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。\n\n上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。\n\n下面通过代码展示！ **1**​ **.**​ ** 定义发送短信的接口**\n\n```java\npublic interface SmsService {\n    String send(String message);\n}\n```\n\n##### **2**​ **.**​ ** 实现发送短信的接口**\n\n```java\npublic class SmsServiceImpl implements SmsService {\n    public String send(String message) {\n        System.out.println(\"真实的 send message : \" + message);\n        return message;\n    }\n}\n```\n\n##### **3**​ **.**​ ** 创建代理类并同样实现发送短信的接口**\n\n```java\npublic class SmsProxy implements SmsService {\n \n    private final SmsService smsService;\n \n    public SmsProxy(SmsService smsService) {\n        this.smsService = smsService;\n    }\n \n    @Override\n    public String send(String message) {\n        //调用方法之前，我们可以添加自己的操作\n        System.out.println(\"静态代理 before method send()\");\n        smsService.send(message);\n        //调用方法之后，我们同样可以添加自己的操作\n        System.out.println(\"静态代理 after method send()\");\n        return message;\n    }\n}\n```\n\n##### **4**​ **.**​ ** 实际使用**\n\n```java\npublic class 静态代理和动态代理 {\n    public static void main(String[] args) {\n        // 静态代理\n        SmsService smsService = new SmsServiceImpl();\n        SmsProxy smsProxy = new SmsProxy(smsService);\n        smsProxy.send(\"java\");\n    }\n}\n```\n\n##### 5.执行结果：\n\n```java\n静态代理 before method send()\n真实的 send message : java\n静态代理 after method send()\n```\n\n3、动态代理\n\n---\n\n相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类(CGLIB动态代理机制)。\n\n从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\n\n说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。\n\n动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。\n\n就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。\n\nguide-rpc-framework使用的是 JDK 动态代理，我们先来看看 JDK 动态代理的使用。\n\n另外，虽然 guide-rpc-framework 没有用到 CGLIB 动态代理 ，我们这里还是简单介绍一下其使用以及和JDK 动态代理的对比。\n\n### 3.1 JDK 动态代理机制\n\n#### 3.1.1 介绍\n\n在 Java 动态代理机制中 `*InvocationHandler*` 接口和 Proxy 类是核心。\n\nProxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。\n\n```java\n    public static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n        throws IllegalArgumentException\n    {\n        .......\n    }\n```\n\n这个方法一共有 3 个参数：\n\n1. \\*\\*loader：\\*\\*类加载器，用于加载代理对象。\n2. \\*\\*interfaces：\\*\\*被代理类实现的一些接口；\n3. \\*\\*h：\\*\\*实现了 `InvocationHandler` 接口的对象；\n\n要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。\n\n```java\npublic interface InvocationHandler {\n    // 当你使用代理对象调用方法的时候实际会调用到这个方法\n    public Object invoke(Object proxy, Method method, Object[] args)\n        throws Throwable;\n}\n```\n\n`invoke()` 方法有下面三个参数：\n\n1. \\*\\*proxy：\\*\\*动态生成的代理类\n2. \\*\\*methoh：\\*\\*与代理类对象调用的方法相对应\n3. \\*\\*args：\\*\\*当前 method 方法的参数\n\n也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。\n\n##### 3.1.2 JDK 动态代理类使用步骤\n\n定义一个接口及其实现类； 自定义 InvocationHandler 并重写invoke方法，在 invoke 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑； 通过 Proxy.newProxyInstance(ClassLoader loader,Class<?>\\[\\] interfaces,InvocationHandler h) 方法创建代理对象；\n\n##### 3.1.2 代码示例\n\n1. 定义发送短信的接口\n\n```java\npublic interface SmsService {\n    String send(String message);\n}\n```\n\n1. 实现发送短信的接口\n\n```java\npublic class SmsServiceImpl implements SmsService {\n    public String send(String message) {\n        System.out.println(\"真实的 send message : \" + message);\n        return message;\n    }\n}\n```\n\n1. 定义一个JDK动态代理类\n\n```java\npublic class DebugInvocationHandler implements InvocationHandler {\n    // 代理类中的真实对象\n    private final Object target;\n \n    public DebugInvocationHandler(Object target) {\n        this.target = target;\n    }\n \n    public Object invoke(Object proxy, Method method, Object[] args) throws InvocationTargetException, IllegalAccessException {\n        //调用方法之前，我们可以添加自己的操作\n        System.out.println(\"JDK动态代理 before method \" + method.getName());\n        Object result = method.invoke(target, args);\n        //调用方法之后，我们同样可以添加自己的操作\n        System.out.println(\"JDK动态代理 after method \" + method.getName());\n        return result;\n    }\n}\n```\n\n1. 获取代理对象的工厂类\n\n```java\npublic class JdkProxyFactory {\n    public static Object getProxy(Object target) {\n        return Proxy.newProxyInstance(\n            target.getClass().getClassLoader(), // 目标类的类加载\n            target.getClass().getInterfaces(),  // 代理需要实现的接口，可指定多个\n            new DebugInvocationHandler(target)   // 代理对象对应的自定义 InvocationHandler\n        );\n    }\n}\n```\n\n1. 实际使用\n\n```java\npublic class 静态代理和动态代理 {\n    public static void main(String[] args) {\n        SmsService smsService1 = (SmsService) JdkProxyFactory.getProxy(new SmsServiceImpl());\n        smsService1.send(\"Java!\");\n    }\n}\n```\n\n1. 执行结果：\n\n```java\nJDK动态代理 before method send\n真实的 send message : Java!\nJDK动态代理 after method send\n```\n\n### 3.2. CGLIB 动态代理机制\n\n#### 3.2.1. 介绍\n\nJDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。\n\nCGLIB(Code Generation Library)是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用到了CGLIB， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。\n\n在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。\n\n你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。\n\n```java\npublic interface MethodInterceptor\nextends Callback{\n    // 拦截被代理类中的方法\n    public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args,\n                               MethodProxy proxy) throws Throwable;\n}\n```\n\n1. \\*\\*obj：\\*\\*被代理的对象（需要增强的对象）\n2. \\*\\*method：\\*\\*被拦截的方法（需要增强的方法）\n3. \\*\\*args：\\*\\*方法入参\n4. \\*\\*proxy：\\*\\*用于调用原始方法\n\n你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。\n\n#### 3.2.2. CGLIB 动态代理类使用步骤\n\n1. 定义一个类；\n2. 自定义 `MethodInterceptor` 并重写 `intercept` 方法，`intercept` 用于拦截增强被代理类的方法，和 JDK 动态代理中的 `invoke` 方法类似；\n3. 通过 `Enhancer` 类的 `create()`创建代理类；\n\n#### 3.2.3. 代码示例\n\n不同于 JDK 动态代理不需要额外的依赖。CGLIB(Code Generation Library) 实际是属于一个开源项目，如果你要使用它的话，需要手动添加相关依赖。\n\n```xml\n<dependency>\n  <groupId>cglib</groupId>\n  <artifactId>cglib</artifactId>\n  <version>3.3.0</version>\n</dependency>\n```\n\n1. 实现一个使用阿里云发送短信的类\n\n```java\npublic class AliSmsService {\n    public String send(String message) {\n        System.out.println(\"send message:\" + message);\n        return message;\n    }\n}\n```\n\n1. 自定义 MethodInterceptor（方法拦截器）\n\n```java\npublic class DebugMethodInterceptor implements MethodInterceptor {\n    /**\n     * @param o           代理对象（增强的对象）\n     * @param method      被拦截的方法（需要增强的方法）\n     * @param args        方法入参\n     * @param methodProxy 用于调用原始方法\n     */\n    @Override\n    public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n        //调用方法之前，我们可以添加自己的操作\n        System.out.println(\"before method \" + method.getName());\n        Object object = methodProxy.invokeSuper(o, args);\n        //调用方法之后，我们同样可以添加自己的操作\n        System.out.println(\"after method \" + method.getName());\n        return object;\n    }\n}\n```\n\n1. 获取代理类\n\n```java\npublic class CglibProxyFactory {\n    public static Object getProxy(Class<?> clazz) {\n        // 创建动态代理增强类\n        Enhancer enhancer = new Enhancer();\n        // 设置类加载器\n        enhancer.setClassLoader(clazz.getClassLoader());\n        // 设置被代理类\n        enhancer.setSuperclass(clazz);\n        // 设置方法拦截器\n        enhancer.setCallback(new DebugMethodInterceptor());\n        // 创建代理类\n        return enhancer.create();\n    }\n}\n```\n\n1. 实际使用\n\n   ```java\n   public class 静态代理和动态代理 {\n       public static void main(String[] args) {\n           AliSmsService aliSmsService = (AliSmsService) CglibProxyFactory.getProxy(AliSmsService.class);\n           aliSmsService.send(\"java\");\n       }\n   }\n   ```\n2. 执行结果：\n\n```java\nbefore method send\nsend message:java\nafter method send\n```\n\n#### 3.3. JDK动态代理和CGLIB动态代理对比\n\n1. JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。\n2. 就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。\n\n4、静态代理和动态代理的对比\n\n---\n\n1. 灵活性：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！\n2. JVM 层面：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的class文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\n","source":"_posts/java-implementing-agent-mode-zxwpxc.md","raw":"---\ntitle: Java实现代理模式\ndate: '2024-12-19 09:55:21'\nupdated: '2024-12-20 00:10:15'\npermalink: /post/java-implementing-agent-mode-zxwpxc.html\ncomments: true\ntoc: true\nabbrlink: 43440\n---\n\n# Java实现代理模式\n\nJava实现代理模式\n\n1、代理模式\n\n---\n\n代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。\n\n代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。\n\n代理模式有**静态代理**和**动态代理**两种实现方式。\n\n2、静态代理\n\n---\n\n静态代理中，我们对目标对象的每个方法的增强都是手动完成的（后面会具体演示代码），非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦(需要对每个目标类都单独写一个代理类)。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。\n\n上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。\n\n下面通过代码展示！ **1**​ **.**​ ** 定义发送短信的接口**\n\n```java\npublic interface SmsService {\n    String send(String message);\n}\n```\n\n##### **2**​ **.**​ ** 实现发送短信的接口**\n\n```java\npublic class SmsServiceImpl implements SmsService {\n    public String send(String message) {\n        System.out.println(\"真实的 send message : \" + message);\n        return message;\n    }\n}\n```\n\n##### **3**​ **.**​ ** 创建代理类并同样实现发送短信的接口**\n\n```java\npublic class SmsProxy implements SmsService {\n \n    private final SmsService smsService;\n \n    public SmsProxy(SmsService smsService) {\n        this.smsService = smsService;\n    }\n \n    @Override\n    public String send(String message) {\n        //调用方法之前，我们可以添加自己的操作\n        System.out.println(\"静态代理 before method send()\");\n        smsService.send(message);\n        //调用方法之后，我们同样可以添加自己的操作\n        System.out.println(\"静态代理 after method send()\");\n        return message;\n    }\n}\n```\n\n##### **4**​ **.**​ ** 实际使用**\n\n```java\npublic class 静态代理和动态代理 {\n    public static void main(String[] args) {\n        // 静态代理\n        SmsService smsService = new SmsServiceImpl();\n        SmsProxy smsProxy = new SmsProxy(smsService);\n        smsProxy.send(\"java\");\n    }\n}\n```\n\n##### 5.执行结果：\n\n```java\n静态代理 before method send()\n真实的 send message : java\n静态代理 after method send()\n```\n\n3、动态代理\n\n---\n\n相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类(CGLIB动态代理机制)。\n\n从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\n\n说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。\n\n动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。\n\n就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。\n\nguide-rpc-framework使用的是 JDK 动态代理，我们先来看看 JDK 动态代理的使用。\n\n另外，虽然 guide-rpc-framework 没有用到 CGLIB 动态代理 ，我们这里还是简单介绍一下其使用以及和JDK 动态代理的对比。\n\n### 3.1 JDK 动态代理机制\n\n#### 3.1.1 介绍\n\n在 Java 动态代理机制中 `*InvocationHandler*` 接口和 Proxy 类是核心。\n\nProxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。\n\n```java\n    public static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n        throws IllegalArgumentException\n    {\n        .......\n    }\n```\n\n这个方法一共有 3 个参数：\n\n1. \\*\\*loader：\\*\\*类加载器，用于加载代理对象。\n2. \\*\\*interfaces：\\*\\*被代理类实现的一些接口；\n3. \\*\\*h：\\*\\*实现了 `InvocationHandler` 接口的对象；\n\n要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。\n\n```java\npublic interface InvocationHandler {\n    // 当你使用代理对象调用方法的时候实际会调用到这个方法\n    public Object invoke(Object proxy, Method method, Object[] args)\n        throws Throwable;\n}\n```\n\n`invoke()` 方法有下面三个参数：\n\n1. \\*\\*proxy：\\*\\*动态生成的代理类\n2. \\*\\*methoh：\\*\\*与代理类对象调用的方法相对应\n3. \\*\\*args：\\*\\*当前 method 方法的参数\n\n也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。\n\n##### 3.1.2 JDK 动态代理类使用步骤\n\n定义一个接口及其实现类； 自定义 InvocationHandler 并重写invoke方法，在 invoke 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑； 通过 Proxy.newProxyInstance(ClassLoader loader,Class<?>\\[\\] interfaces,InvocationHandler h) 方法创建代理对象；\n\n##### 3.1.2 代码示例\n\n1. 定义发送短信的接口\n\n```java\npublic interface SmsService {\n    String send(String message);\n}\n```\n\n1. 实现发送短信的接口\n\n```java\npublic class SmsServiceImpl implements SmsService {\n    public String send(String message) {\n        System.out.println(\"真实的 send message : \" + message);\n        return message;\n    }\n}\n```\n\n1. 定义一个JDK动态代理类\n\n```java\npublic class DebugInvocationHandler implements InvocationHandler {\n    // 代理类中的真实对象\n    private final Object target;\n \n    public DebugInvocationHandler(Object target) {\n        this.target = target;\n    }\n \n    public Object invoke(Object proxy, Method method, Object[] args) throws InvocationTargetException, IllegalAccessException {\n        //调用方法之前，我们可以添加自己的操作\n        System.out.println(\"JDK动态代理 before method \" + method.getName());\n        Object result = method.invoke(target, args);\n        //调用方法之后，我们同样可以添加自己的操作\n        System.out.println(\"JDK动态代理 after method \" + method.getName());\n        return result;\n    }\n}\n```\n\n1. 获取代理对象的工厂类\n\n```java\npublic class JdkProxyFactory {\n    public static Object getProxy(Object target) {\n        return Proxy.newProxyInstance(\n            target.getClass().getClassLoader(), // 目标类的类加载\n            target.getClass().getInterfaces(),  // 代理需要实现的接口，可指定多个\n            new DebugInvocationHandler(target)   // 代理对象对应的自定义 InvocationHandler\n        );\n    }\n}\n```\n\n1. 实际使用\n\n```java\npublic class 静态代理和动态代理 {\n    public static void main(String[] args) {\n        SmsService smsService1 = (SmsService) JdkProxyFactory.getProxy(new SmsServiceImpl());\n        smsService1.send(\"Java!\");\n    }\n}\n```\n\n1. 执行结果：\n\n```java\nJDK动态代理 before method send\n真实的 send message : Java!\nJDK动态代理 after method send\n```\n\n### 3.2. CGLIB 动态代理机制\n\n#### 3.2.1. 介绍\n\nJDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。\n\nCGLIB(Code Generation Library)是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用到了CGLIB， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。\n\n在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。\n\n你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。\n\n```java\npublic interface MethodInterceptor\nextends Callback{\n    // 拦截被代理类中的方法\n    public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args,\n                               MethodProxy proxy) throws Throwable;\n}\n```\n\n1. \\*\\*obj：\\*\\*被代理的对象（需要增强的对象）\n2. \\*\\*method：\\*\\*被拦截的方法（需要增强的方法）\n3. \\*\\*args：\\*\\*方法入参\n4. \\*\\*proxy：\\*\\*用于调用原始方法\n\n你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。\n\n#### 3.2.2. CGLIB 动态代理类使用步骤\n\n1. 定义一个类；\n2. 自定义 `MethodInterceptor` 并重写 `intercept` 方法，`intercept` 用于拦截增强被代理类的方法，和 JDK 动态代理中的 `invoke` 方法类似；\n3. 通过 `Enhancer` 类的 `create()`创建代理类；\n\n#### 3.2.3. 代码示例\n\n不同于 JDK 动态代理不需要额外的依赖。CGLIB(Code Generation Library) 实际是属于一个开源项目，如果你要使用它的话，需要手动添加相关依赖。\n\n```xml\n<dependency>\n  <groupId>cglib</groupId>\n  <artifactId>cglib</artifactId>\n  <version>3.3.0</version>\n</dependency>\n```\n\n1. 实现一个使用阿里云发送短信的类\n\n```java\npublic class AliSmsService {\n    public String send(String message) {\n        System.out.println(\"send message:\" + message);\n        return message;\n    }\n}\n```\n\n1. 自定义 MethodInterceptor（方法拦截器）\n\n```java\npublic class DebugMethodInterceptor implements MethodInterceptor {\n    /**\n     * @param o           代理对象（增强的对象）\n     * @param method      被拦截的方法（需要增强的方法）\n     * @param args        方法入参\n     * @param methodProxy 用于调用原始方法\n     */\n    @Override\n    public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n        //调用方法之前，我们可以添加自己的操作\n        System.out.println(\"before method \" + method.getName());\n        Object object = methodProxy.invokeSuper(o, args);\n        //调用方法之后，我们同样可以添加自己的操作\n        System.out.println(\"after method \" + method.getName());\n        return object;\n    }\n}\n```\n\n1. 获取代理类\n\n```java\npublic class CglibProxyFactory {\n    public static Object getProxy(Class<?> clazz) {\n        // 创建动态代理增强类\n        Enhancer enhancer = new Enhancer();\n        // 设置类加载器\n        enhancer.setClassLoader(clazz.getClassLoader());\n        // 设置被代理类\n        enhancer.setSuperclass(clazz);\n        // 设置方法拦截器\n        enhancer.setCallback(new DebugMethodInterceptor());\n        // 创建代理类\n        return enhancer.create();\n    }\n}\n```\n\n1. 实际使用\n\n   ```java\n   public class 静态代理和动态代理 {\n       public static void main(String[] args) {\n           AliSmsService aliSmsService = (AliSmsService) CglibProxyFactory.getProxy(AliSmsService.class);\n           aliSmsService.send(\"java\");\n       }\n   }\n   ```\n2. 执行结果：\n\n```java\nbefore method send\nsend message:java\nafter method send\n```\n\n#### 3.3. JDK动态代理和CGLIB动态代理对比\n\n1. JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。\n2. 就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。\n\n4、静态代理和动态代理的对比\n\n---\n\n1. 灵活性：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！\n2. JVM 层面：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的class文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\n","slug":"java-implementing-agent-mode-zxwpxc","published":1,"__permalink":"/post/java-implementing-agent-mode-zxwpxc.html","_id":"cm4zhl9an0001n1bm25lb3f5d","layout":"post","photos":[],"content":"<h1 id=\"Java实现代理模式\"><a href=\"#Java实现代理模式\" class=\"headerlink\" title=\"Java实现代理模式\"></a>Java实现代理模式</h1><p>Java实现代理模式</p>\n<p>1、代理模式</p>\n<hr>\n<p>代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</p>\n<p>代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。</p>\n<p>代理模式有<strong>静态代理</strong>和<strong>动态代理</strong>两种实现方式。</p>\n<p>2、静态代理</p>\n<hr>\n<p>静态代理中，我们对目标对象的每个方法的增强都是手动完成的（后面会具体演示代码），非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦(需要对每个目标类都单独写一个代理类)。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。</p>\n<p>上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。</p>\n<p>下面通过代码展示！ <strong>1</strong>​ **.<strong>​ ** 定义发送短信的接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2​-​-实现发送短信的接口\"><a href=\"#2​-​-实现发送短信的接口\" class=\"headerlink\" title=\"2​ **.​ ** 实现发送短信的接口\"></a><strong>2</strong>​ **.<strong>​ ** 实现发送短信的接口</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;真实的 send message : &quot;</span> + message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3​-​-创建代理类并同样实现发送短信的接口\"><a href=\"#3​-​-创建代理类并同样实现发送短信的接口\" class=\"headerlink\" title=\"3​ **.​ ** 创建代理类并同样实现发送短信的接口\"></a><strong>3</strong>​ **.<strong>​ ** 创建代理类并同样实现发送短信的接口</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsProxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SmsService smsService;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SmsProxy</span><span class=\"params\">(SmsService smsService)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.smsService = smsService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之前，我们可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代理 before method send()&quot;</span>);</span><br><span class=\"line\">        smsService.send(message);</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代理 after method send()&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4​-​-实际使用\"><a href=\"#4​-​-实际使用\" class=\"headerlink\" title=\"4​ **.​ ** 实际使用\"></a><strong>4</strong>​ **.<strong>​ ** 实际使用</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 静态代理和动态代理 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 静态代理</span></span><br><span class=\"line\">        <span class=\"type\">SmsService</span> <span class=\"variable\">smsService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SmsServiceImpl</span>();</span><br><span class=\"line\">        <span class=\"type\">SmsProxy</span> <span class=\"variable\">smsProxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SmsProxy</span>(smsService);</span><br><span class=\"line\">        smsProxy.send(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-执行结果：\"><a href=\"#5-执行结果：\" class=\"headerlink\" title=\"5.执行结果：\"></a>5.执行结果：</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代理 before method <span class=\"title function_\">send</span><span class=\"params\">()</span></span><br><span class=\"line\">真实的 send message : java</span><br><span class=\"line\">静态代理 after method <span class=\"title function_\">send</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n\n<p>3、动态代理</p>\n<hr>\n<p>相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类(CGLIB动态代理机制)。</p>\n<p>从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</p>\n<p>说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。</p>\n<p>动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。</p>\n<p>就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。</p>\n<p>guide-rpc-framework使用的是 JDK 动态代理，我们先来看看 JDK 动态代理的使用。</p>\n<p>另外，虽然 guide-rpc-framework 没有用到 CGLIB 动态代理 ，我们这里还是简单介绍一下其使用以及和JDK 动态代理的对比。</p>\n<h3 id=\"3-1-JDK-动态代理机制\"><a href=\"#3-1-JDK-动态代理机制\" class=\"headerlink\" title=\"3.1 JDK 动态代理机制\"></a>3.1 JDK 动态代理机制</h3><h4 id=\"3-1-1-介绍\"><a href=\"#3-1-1-介绍\" class=\"headerlink\" title=\"3.1.1 介绍\"></a>3.1.1 介绍</h4><p>在 Java 动态代理机制中 <code>*InvocationHandler*</code> 接口和 Proxy 类是核心。</p>\n<p>Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span><br><span class=\"line\"><span class=\"params\">                                      Class&lt;?&gt;[] interfaces,</span></span><br><span class=\"line\"><span class=\"params\">                                      InvocationHandler h)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> IllegalArgumentException</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    .......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法一共有 3 个参数：</p>\n<ol>\n<li>**loader：**类加载器，用于加载代理对象。</li>\n<li>**interfaces：**被代理类实现的一些接口；</li>\n<li>**h：**实现了 <code>InvocationHandler</code> 接口的对象；</li>\n</ol>\n<p>要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当你使用代理对象调用方法的时候实际会调用到这个方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> Throwable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>invoke()</code> 方法有下面三个参数：</p>\n<ol>\n<li>**proxy：**动态生成的代理类</li>\n<li>**methoh：**与代理类对象调用的方法相对应</li>\n<li>**args：**当前 method 方法的参数</li>\n</ol>\n<p>也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。</p>\n<h5 id=\"3-1-2-JDK-动态代理类使用步骤\"><a href=\"#3-1-2-JDK-动态代理类使用步骤\" class=\"headerlink\" title=\"3.1.2 JDK 动态代理类使用步骤\"></a>3.1.2 JDK 动态代理类使用步骤</h5><p>定义一个接口及其实现类； 自定义 InvocationHandler 并重写invoke方法，在 invoke 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑； 通过 Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h) 方法创建代理对象；</p>\n<h5 id=\"3-1-2-代码示例\"><a href=\"#3-1-2-代码示例\" class=\"headerlink\" title=\"3.1.2 代码示例\"></a>3.1.2 代码示例</h5><ol>\n<li>定义发送短信的接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>实现发送短信的接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;真实的 send message : &quot;</span> + message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>定义一个JDK动态代理类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DebugInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 代理类中的真实对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object target;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DebugInvocationHandler</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之前，我们可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;JDK动态代理 before method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;JDK动态代理 after method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>获取代理对象的工厂类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdkProxyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(</span><br><span class=\"line\">            target.getClass().getClassLoader(), <span class=\"comment\">// 目标类的类加载</span></span><br><span class=\"line\">            target.getClass().getInterfaces(),  <span class=\"comment\">// 代理需要实现的接口，可指定多个</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">DebugInvocationHandler</span>(target)   <span class=\"comment\">// 代理对象对应的自定义 InvocationHandler</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>实际使用</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 静态代理和动态代理 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SmsService</span> <span class=\"variable\">smsService1</span> <span class=\"operator\">=</span> (SmsService) JdkProxyFactory.getProxy(<span class=\"keyword\">new</span> <span class=\"title class_\">SmsServiceImpl</span>());</span><br><span class=\"line\">        smsService1.send(<span class=\"string\">&quot;Java!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>执行结果：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JDK动态代理 before method send</span><br><span class=\"line\">真实的 send message : Java!</span><br><span class=\"line\">JDK动态代理 after method send</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-CGLIB-动态代理机制\"><a href=\"#3-2-CGLIB-动态代理机制\" class=\"headerlink\" title=\"3.2. CGLIB 动态代理机制\"></a>3.2. CGLIB 动态代理机制</h3><h4 id=\"3-2-1-介绍\"><a href=\"#3-2-1-介绍\" class=\"headerlink\" title=\"3.2.1. 介绍\"></a>3.2.1. 介绍</h4><p>JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。</p>\n<p>CGLIB(Code Generation Library)是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用到了CGLIB， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。</p>\n<p>在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。</p>\n<p>你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MethodInterceptor</span></span><br><span class=\"line\"><span class=\"keyword\">extends</span> <span class=\"title class_\">Callback</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拦截被代理类中的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object obj, java.lang.reflect.Method method, Object[] args,</span></span><br><span class=\"line\"><span class=\"params\">                               MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>**obj：**被代理的对象（需要增强的对象）</li>\n<li>**method：**被拦截的方法（需要增强的方法）</li>\n<li>**args：**方法入参</li>\n<li>**proxy：**用于调用原始方法</li>\n</ol>\n<p>你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。</p>\n<h4 id=\"3-2-2-CGLIB-动态代理类使用步骤\"><a href=\"#3-2-2-CGLIB-动态代理类使用步骤\" class=\"headerlink\" title=\"3.2.2. CGLIB 动态代理类使用步骤\"></a>3.2.2. CGLIB 动态代理类使用步骤</h4><ol>\n<li>定义一个类；</li>\n<li>自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法，和 JDK 动态代理中的 <code>invoke</code> 方法类似；</li>\n<li>通过 <code>Enhancer</code> 类的 <code>create()</code>创建代理类；</li>\n</ol>\n<h4 id=\"3-2-3-代码示例\"><a href=\"#3-2-3-代码示例\" class=\"headerlink\" title=\"3.2.3. 代码示例\"></a>3.2.3. 代码示例</h4><p>不同于 JDK 动态代理不需要额外的依赖。CGLIB(Code Generation Library) 实际是属于一个开源项目，如果你要使用它的话，需要手动添加相关依赖。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cglib<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cglib<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>实现一个使用阿里云发送短信的类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AliSmsService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;send message:&quot;</span> + message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>自定义 MethodInterceptor（方法拦截器）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DebugMethodInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o           代理对象（增强的对象）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method      被拦截的方法（需要增强的方法）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args        方法入参</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> methodProxy 用于调用原始方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之前，我们可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> methodProxy.invokeSuper(o, args);</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;after method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>获取代理类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CglibProxyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建动态代理增强类</span></span><br><span class=\"line\">        <span class=\"type\">Enhancer</span> <span class=\"variable\">enhancer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 设置类加载器</span></span><br><span class=\"line\">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class=\"line\">        <span class=\"comment\">// 设置被代理类</span></span><br><span class=\"line\">        enhancer.setSuperclass(clazz);</span><br><span class=\"line\">        <span class=\"comment\">// 设置方法拦截器</span></span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">DebugMethodInterceptor</span>());</span><br><span class=\"line\">        <span class=\"comment\">// 创建代理类</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> enhancer.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>实际使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 静态代理和动态代理 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AliSmsService</span> <span class=\"variable\">aliSmsService</span> <span class=\"operator\">=</span> (AliSmsService) CglibProxyFactory.getProxy(AliSmsService.class);</span><br><span class=\"line\">        aliSmsService.send(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>执行结果：</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before method send</span><br><span class=\"line\">send message:java</span><br><span class=\"line\">after method send</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-JDK动态代理和CGLIB动态代理对比\"><a href=\"#3-3-JDK动态代理和CGLIB动态代理对比\" class=\"headerlink\" title=\"3.3. JDK动态代理和CGLIB动态代理对比\"></a>3.3. JDK动态代理和CGLIB动态代理对比</h4><ol>\n<li>JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。</li>\n<li>就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。</li>\n</ol>\n<p>4、静态代理和动态代理的对比</p>\n<hr>\n<ol>\n<li>灵活性：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！</li>\n<li>JVM 层面：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的class文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</li>\n</ol>\n","cover":false,"excerpt":"","more":"<h1 id=\"Java实现代理模式\"><a href=\"#Java实现代理模式\" class=\"headerlink\" title=\"Java实现代理模式\"></a>Java实现代理模式</h1><p>Java实现代理模式</p>\n<p>1、代理模式</p>\n<hr>\n<p>代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</p>\n<p>代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。</p>\n<p>代理模式有<strong>静态代理</strong>和<strong>动态代理</strong>两种实现方式。</p>\n<p>2、静态代理</p>\n<hr>\n<p>静态代理中，我们对目标对象的每个方法的增强都是手动完成的（后面会具体演示代码），非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦(需要对每个目标类都单独写一个代理类)。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。</p>\n<p>上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。</p>\n<p>下面通过代码展示！ <strong>1</strong>​ **.<strong>​ ** 定义发送短信的接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2​-​-实现发送短信的接口\"><a href=\"#2​-​-实现发送短信的接口\" class=\"headerlink\" title=\"2​ **.​ ** 实现发送短信的接口\"></a><strong>2</strong>​ **.<strong>​ ** 实现发送短信的接口</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;真实的 send message : &quot;</span> + message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3​-​-创建代理类并同样实现发送短信的接口\"><a href=\"#3​-​-创建代理类并同样实现发送短信的接口\" class=\"headerlink\" title=\"3​ **.​ ** 创建代理类并同样实现发送短信的接口\"></a><strong>3</strong>​ **.<strong>​ ** 创建代理类并同样实现发送短信的接口</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsProxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SmsService smsService;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SmsProxy</span><span class=\"params\">(SmsService smsService)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.smsService = smsService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之前，我们可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代理 before method send()&quot;</span>);</span><br><span class=\"line\">        smsService.send(message);</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代理 after method send()&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4​-​-实际使用\"><a href=\"#4​-​-实际使用\" class=\"headerlink\" title=\"4​ **.​ ** 实际使用\"></a><strong>4</strong>​ **.<strong>​ ** 实际使用</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 静态代理和动态代理 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 静态代理</span></span><br><span class=\"line\">        <span class=\"type\">SmsService</span> <span class=\"variable\">smsService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SmsServiceImpl</span>();</span><br><span class=\"line\">        <span class=\"type\">SmsProxy</span> <span class=\"variable\">smsProxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SmsProxy</span>(smsService);</span><br><span class=\"line\">        smsProxy.send(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-执行结果：\"><a href=\"#5-执行结果：\" class=\"headerlink\" title=\"5.执行结果：\"></a>5.执行结果：</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代理 before method <span class=\"title function_\">send</span><span class=\"params\">()</span></span><br><span class=\"line\">真实的 send message : java</span><br><span class=\"line\">静态代理 after method <span class=\"title function_\">send</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure>\n\n<p>3、动态代理</p>\n<hr>\n<p>相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类(CGLIB动态代理机制)。</p>\n<p>从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</p>\n<p>说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。</p>\n<p>动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。</p>\n<p>就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。</p>\n<p>guide-rpc-framework使用的是 JDK 动态代理，我们先来看看 JDK 动态代理的使用。</p>\n<p>另外，虽然 guide-rpc-framework 没有用到 CGLIB 动态代理 ，我们这里还是简单介绍一下其使用以及和JDK 动态代理的对比。</p>\n<h3 id=\"3-1-JDK-动态代理机制\"><a href=\"#3-1-JDK-动态代理机制\" class=\"headerlink\" title=\"3.1 JDK 动态代理机制\"></a>3.1 JDK 动态代理机制</h3><h4 id=\"3-1-1-介绍\"><a href=\"#3-1-1-介绍\" class=\"headerlink\" title=\"3.1.1 介绍\"></a>3.1.1 介绍</h4><p>在 Java 动态代理机制中 <code>*InvocationHandler*</code> 接口和 Proxy 类是核心。</p>\n<p>Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span><br><span class=\"line\"><span class=\"params\">                                      Class&lt;?&gt;[] interfaces,</span></span><br><span class=\"line\"><span class=\"params\">                                      InvocationHandler h)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> IllegalArgumentException</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    .......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法一共有 3 个参数：</p>\n<ol>\n<li>**loader：**类加载器，用于加载代理对象。</li>\n<li>**interfaces：**被代理类实现的一些接口；</li>\n<li>**h：**实现了 <code>InvocationHandler</code> 接口的对象；</li>\n</ol>\n<p>要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当你使用代理对象调用方法的时候实际会调用到这个方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> Throwable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>invoke()</code> 方法有下面三个参数：</p>\n<ol>\n<li>**proxy：**动态生成的代理类</li>\n<li>**methoh：**与代理类对象调用的方法相对应</li>\n<li>**args：**当前 method 方法的参数</li>\n</ol>\n<p>也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。</p>\n<h5 id=\"3-1-2-JDK-动态代理类使用步骤\"><a href=\"#3-1-2-JDK-动态代理类使用步骤\" class=\"headerlink\" title=\"3.1.2 JDK 动态代理类使用步骤\"></a>3.1.2 JDK 动态代理类使用步骤</h5><p>定义一个接口及其实现类； 自定义 InvocationHandler 并重写invoke方法，在 invoke 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑； 通过 Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h) 方法创建代理对象；</p>\n<h5 id=\"3-1-2-代码示例\"><a href=\"#3-1-2-代码示例\" class=\"headerlink\" title=\"3.1.2 代码示例\"></a>3.1.2 代码示例</h5><ol>\n<li>定义发送短信的接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>实现发送短信的接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmsService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;真实的 send message : &quot;</span> + message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>定义一个JDK动态代理类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DebugInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 代理类中的真实对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object target;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DebugInvocationHandler</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之前，我们可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;JDK动态代理 before method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;JDK动态代理 after method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>获取代理对象的工厂类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdkProxyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(</span><br><span class=\"line\">            target.getClass().getClassLoader(), <span class=\"comment\">// 目标类的类加载</span></span><br><span class=\"line\">            target.getClass().getInterfaces(),  <span class=\"comment\">// 代理需要实现的接口，可指定多个</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">DebugInvocationHandler</span>(target)   <span class=\"comment\">// 代理对象对应的自定义 InvocationHandler</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>实际使用</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 静态代理和动态代理 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SmsService</span> <span class=\"variable\">smsService1</span> <span class=\"operator\">=</span> (SmsService) JdkProxyFactory.getProxy(<span class=\"keyword\">new</span> <span class=\"title class_\">SmsServiceImpl</span>());</span><br><span class=\"line\">        smsService1.send(<span class=\"string\">&quot;Java!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>执行结果：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JDK动态代理 before method send</span><br><span class=\"line\">真实的 send message : Java!</span><br><span class=\"line\">JDK动态代理 after method send</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-CGLIB-动态代理机制\"><a href=\"#3-2-CGLIB-动态代理机制\" class=\"headerlink\" title=\"3.2. CGLIB 动态代理机制\"></a>3.2. CGLIB 动态代理机制</h3><h4 id=\"3-2-1-介绍\"><a href=\"#3-2-1-介绍\" class=\"headerlink\" title=\"3.2.1. 介绍\"></a>3.2.1. 介绍</h4><p>JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。</p>\n<p>CGLIB(Code Generation Library)是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用到了CGLIB， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。</p>\n<p>在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。</p>\n<p>你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MethodInterceptor</span></span><br><span class=\"line\"><span class=\"keyword\">extends</span> <span class=\"title class_\">Callback</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拦截被代理类中的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object obj, java.lang.reflect.Method method, Object[] args,</span></span><br><span class=\"line\"><span class=\"params\">                               MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>**obj：**被代理的对象（需要增强的对象）</li>\n<li>**method：**被拦截的方法（需要增强的方法）</li>\n<li>**args：**方法入参</li>\n<li>**proxy：**用于调用原始方法</li>\n</ol>\n<p>你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。</p>\n<h4 id=\"3-2-2-CGLIB-动态代理类使用步骤\"><a href=\"#3-2-2-CGLIB-动态代理类使用步骤\" class=\"headerlink\" title=\"3.2.2. CGLIB 动态代理类使用步骤\"></a>3.2.2. CGLIB 动态代理类使用步骤</h4><ol>\n<li>定义一个类；</li>\n<li>自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法，和 JDK 动态代理中的 <code>invoke</code> 方法类似；</li>\n<li>通过 <code>Enhancer</code> 类的 <code>create()</code>创建代理类；</li>\n</ol>\n<h4 id=\"3-2-3-代码示例\"><a href=\"#3-2-3-代码示例\" class=\"headerlink\" title=\"3.2.3. 代码示例\"></a>3.2.3. 代码示例</h4><p>不同于 JDK 动态代理不需要额外的依赖。CGLIB(Code Generation Library) 实际是属于一个开源项目，如果你要使用它的话，需要手动添加相关依赖。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cglib<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cglib<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>实现一个使用阿里云发送短信的类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AliSmsService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">send</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;send message:&quot;</span> + message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>自定义 MethodInterceptor（方法拦截器）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DebugMethodInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o           代理对象（增强的对象）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method      被拦截的方法（需要增强的方法）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args        方法入参</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> methodProxy 用于调用原始方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之前，我们可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> methodProxy.invokeSuper(o, args);</span><br><span class=\"line\">        <span class=\"comment\">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;after method &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>获取代理类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CglibProxyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建动态代理增强类</span></span><br><span class=\"line\">        <span class=\"type\">Enhancer</span> <span class=\"variable\">enhancer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 设置类加载器</span></span><br><span class=\"line\">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class=\"line\">        <span class=\"comment\">// 设置被代理类</span></span><br><span class=\"line\">        enhancer.setSuperclass(clazz);</span><br><span class=\"line\">        <span class=\"comment\">// 设置方法拦截器</span></span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">DebugMethodInterceptor</span>());</span><br><span class=\"line\">        <span class=\"comment\">// 创建代理类</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> enhancer.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>实际使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 静态代理和动态代理 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AliSmsService</span> <span class=\"variable\">aliSmsService</span> <span class=\"operator\">=</span> (AliSmsService) CglibProxyFactory.getProxy(AliSmsService.class);</span><br><span class=\"line\">        aliSmsService.send(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>执行结果：</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before method send</span><br><span class=\"line\">send message:java</span><br><span class=\"line\">after method send</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-JDK动态代理和CGLIB动态代理对比\"><a href=\"#3-3-JDK动态代理和CGLIB动态代理对比\" class=\"headerlink\" title=\"3.3. JDK动态代理和CGLIB动态代理对比\"></a>3.3. JDK动态代理和CGLIB动态代理对比</h4><ol>\n<li>JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。</li>\n<li>就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。</li>\n</ol>\n<p>4、静态代理和动态代理的对比</p>\n<hr>\n<ol>\n<li>灵活性：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！</li>\n<li>JVM 层面：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的class文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</li>\n</ol>\n"},{"title":"Nacos配置中心并支持多配置文件","date":"2024-12-19T01:59:49.000Z","updated":"2024-12-19T16:12:14.000Z","comments":1,"toc":true,"abbrlink":42899,"_content":"\n# Nacos配置中心并支持多配置文件\n\n### 一、引入依赖包\n\n---\n\n```xml\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n</dependency>\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n</dependency>\n```\n\n> discovery和config分别为注册中心客户端和配置中心客户端\n>\n> 注意：\n>\n> 1. config，引入这个配置中心的依赖后，需要使用bootstrap.yml作为中转配置文件，读取的优先级为bootstrap.yml>application.yml\n> 2. 配置中心地址结尾不能带斜杠 否者会报异常\n\n### 二、单文件配置\n\n---\n\n```yml\nspring:\n  application:\n    name: onedata\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://172.20.23.140:80\n      config:\n         server-addr: http://172.20.23.140:80\n         group: DEFAULT_GROUP\n         file-extension: yml\n```\n\n三、多文件配置\n\n---\n\n1、创建bootstrap.yml,配置激活环境标识\n\n```yml\nspring:\n  profiles:\n    active: dev\n```\n\n2、创建bootstrap-dev.yml文件，配置连接nacos服务中心，加载多个配置文件\n\n**写法一：**\n\n```yml\nspring:\n  application:\n    name: mybatis-plus-join-practice\n  #配置nacos注册中心和配置中心\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://xxx:8848\n        username: nacos\n        password: nacos\n        namespace: dev\n        group: MYBATIS-PLUS-JOIN-PRACTICE\n      config:\n        server-addr: ${spring.cloud.nacos.discovery.server-addr}\n        username: ${spring.cloud.nacos.discovery.username}\n        password: ${spring.cloud.nacos.discovery.password}\n        namespace: ${spring.cloud.nacos.discovery.namespace}\n        file-extension: yml  # yaml格式\n        extension-configs:\n          - data-id: application.yml\n            group: ${spring.cloud.nacos.discovery.group}\n            refresh: true\n \n          - data-id: datasource.yml\n            group: ${spring.cloud.nacos.discovery.group}\n            refresh: true\n```\n\n**写法二：**\n\n```yaml\nspring:\n  application:\n    name: mybatis-plus-join-practice\n  #配置nacos注册中心和配置中心\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://xxx:8848\n        username: nacos\n        password: nacos\n        namespace: dev\n        group: MYBATIS-PLUS-JOIN-PRACTICE\n      config:\n        server-addr: ${spring.cloud.nacos.discovery.server-addr}\n        username: ${spring.cloud.nacos.discovery.username}\n        password: ${spring.cloud.nacos.discovery.password}\n        namespace: ${spring.cloud.nacos.discovery.namespace}\n        extension-configs[0]:\n          data-id: application.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n \n        extension-configs[1]:\n          data-id: datasource.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n```\n\n**写法三：**\n\n```yaml\nspring:\n  application:\n    name: mybatis-plus-join-practice\n  #配置nacos注册中心和配置中心\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://xxx:8848\n        username: nacos\n        password: nacos\n        namespace: dev\n        group: MYBATIS-PLUS-JOIN-PRACTICE\n      config:\n        server-addr: ${spring.cloud.nacos.discovery.server-addr}\n        username: ${spring.cloud.nacos.discovery.username}\n        password: ${spring.cloud.nacos.discovery.password}\n        namespace: ${spring.cloud.nacos.discovery.namespace}\n        shared-configs[0]:\n          data-id: application.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n \n        shared-configs[1]:\n          data-id: datasource.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n```\n\n说明： 1、以上三种写法都支持加载多个配置文件 1、内容中 extension-configs\\[0\\]、shared-configs\\[0\\] 加载的是 application.yml 配置文件 2、内容中 extension-configs\\[1\\]、shared-configs\\[1\\] 加载的是 datasource.yml 配置文件 3、配置文件在激活标识的 dev 环境的 MYBATIS-PLUS-PRACTICE 分组下\n\n> 1、在实际应用中，可以使用多文件配置，把spring配置和数据源配置分开\n>\n> 2、可以使用命名空间区分不同的环境，例如：dev,sit,uat等环境\n>\n> 3、权限控制开启方式，在conf/applicaiton.properties文件中修改属性值即可，如下\n>\n> `nacos.core.auth.enabled=true`\n>\n> 4、如果服务端开启了权限控制，注册中心和配置中心需要明确指定访问用户名和密码，命名空间才可以正常访问\n","source":"_posts/nacos-configuration-center-and-support-multi-configuration-files-zi2mmf.md","raw":"---\ntitle: Nacos配置中心并支持多配置文件\ndate: '2024-12-19 09:59:49'\nupdated: '2024-12-20 00:12:14'\npermalink: >-\n  /post/nacos-configuration-center-and-support-multi-configuration-files-zi2mmf.html\ncomments: true\ntoc: true\nabbrlink: 42899\n---\n\n# Nacos配置中心并支持多配置文件\n\n### 一、引入依赖包\n\n---\n\n```xml\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n</dependency>\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n</dependency>\n```\n\n> discovery和config分别为注册中心客户端和配置中心客户端\n>\n> 注意：\n>\n> 1. config，引入这个配置中心的依赖后，需要使用bootstrap.yml作为中转配置文件，读取的优先级为bootstrap.yml>application.yml\n> 2. 配置中心地址结尾不能带斜杠 否者会报异常\n\n### 二、单文件配置\n\n---\n\n```yml\nspring:\n  application:\n    name: onedata\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://172.20.23.140:80\n      config:\n         server-addr: http://172.20.23.140:80\n         group: DEFAULT_GROUP\n         file-extension: yml\n```\n\n三、多文件配置\n\n---\n\n1、创建bootstrap.yml,配置激活环境标识\n\n```yml\nspring:\n  profiles:\n    active: dev\n```\n\n2、创建bootstrap-dev.yml文件，配置连接nacos服务中心，加载多个配置文件\n\n**写法一：**\n\n```yml\nspring:\n  application:\n    name: mybatis-plus-join-practice\n  #配置nacos注册中心和配置中心\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://xxx:8848\n        username: nacos\n        password: nacos\n        namespace: dev\n        group: MYBATIS-PLUS-JOIN-PRACTICE\n      config:\n        server-addr: ${spring.cloud.nacos.discovery.server-addr}\n        username: ${spring.cloud.nacos.discovery.username}\n        password: ${spring.cloud.nacos.discovery.password}\n        namespace: ${spring.cloud.nacos.discovery.namespace}\n        file-extension: yml  # yaml格式\n        extension-configs:\n          - data-id: application.yml\n            group: ${spring.cloud.nacos.discovery.group}\n            refresh: true\n \n          - data-id: datasource.yml\n            group: ${spring.cloud.nacos.discovery.group}\n            refresh: true\n```\n\n**写法二：**\n\n```yaml\nspring:\n  application:\n    name: mybatis-plus-join-practice\n  #配置nacos注册中心和配置中心\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://xxx:8848\n        username: nacos\n        password: nacos\n        namespace: dev\n        group: MYBATIS-PLUS-JOIN-PRACTICE\n      config:\n        server-addr: ${spring.cloud.nacos.discovery.server-addr}\n        username: ${spring.cloud.nacos.discovery.username}\n        password: ${spring.cloud.nacos.discovery.password}\n        namespace: ${spring.cloud.nacos.discovery.namespace}\n        extension-configs[0]:\n          data-id: application.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n \n        extension-configs[1]:\n          data-id: datasource.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n```\n\n**写法三：**\n\n```yaml\nspring:\n  application:\n    name: mybatis-plus-join-practice\n  #配置nacos注册中心和配置中心\n  cloud:\n    nacos:\n      discovery:\n        server-addr: http://xxx:8848\n        username: nacos\n        password: nacos\n        namespace: dev\n        group: MYBATIS-PLUS-JOIN-PRACTICE\n      config:\n        server-addr: ${spring.cloud.nacos.discovery.server-addr}\n        username: ${spring.cloud.nacos.discovery.username}\n        password: ${spring.cloud.nacos.discovery.password}\n        namespace: ${spring.cloud.nacos.discovery.namespace}\n        shared-configs[0]:\n          data-id: application.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n \n        shared-configs[1]:\n          data-id: datasource.yml\n          group: ${spring.cloud.nacos.discovery.group}\n          refresh: true\n          file-extension: yml\n```\n\n说明： 1、以上三种写法都支持加载多个配置文件 1、内容中 extension-configs\\[0\\]、shared-configs\\[0\\] 加载的是 application.yml 配置文件 2、内容中 extension-configs\\[1\\]、shared-configs\\[1\\] 加载的是 datasource.yml 配置文件 3、配置文件在激活标识的 dev 环境的 MYBATIS-PLUS-PRACTICE 分组下\n\n> 1、在实际应用中，可以使用多文件配置，把spring配置和数据源配置分开\n>\n> 2、可以使用命名空间区分不同的环境，例如：dev,sit,uat等环境\n>\n> 3、权限控制开启方式，在conf/applicaiton.properties文件中修改属性值即可，如下\n>\n> `nacos.core.auth.enabled=true`\n>\n> 4、如果服务端开启了权限控制，注册中心和配置中心需要明确指定访问用户名和密码，命名空间才可以正常访问\n","slug":"nacos-configuration-center-and-support-multi-configuration-files-zi2mmf","published":1,"__permalink":"/post/nacos-configuration-center-and-support-multi-configuration-files-zi2mmf.html","_id":"cm4zhl9ap0003n1bm2rxf0b02","layout":"post","photos":[],"content":"<h1 id=\"Nacos配置中心并支持多配置文件\"><a href=\"#Nacos配置中心并支持多配置文件\" class=\"headerlink\" title=\"Nacos配置中心并支持多配置文件\"></a>Nacos配置中心并支持多配置文件</h1><h3 id=\"一、引入依赖包\"><a href=\"#一、引入依赖包\" class=\"headerlink\" title=\"一、引入依赖包\"></a>一、引入依赖包</h3><hr>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>discovery和config分别为注册中心客户端和配置中心客户端</p>\n<p>注意：</p>\n<ol>\n<li>config，引入这个配置中心的依赖后，需要使用bootstrap.yml作为中转配置文件，读取的优先级为bootstrap.yml&gt;application.yml</li>\n<li>配置中心地址结尾不能带斜杠 否者会报异常</li>\n</ol>\n</blockquote>\n<h3 id=\"二、单文件配置\"><a href=\"#二、单文件配置\" class=\"headerlink\" title=\"二、单文件配置\"></a>二、单文件配置</h3><hr>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">onedata</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://172.20.23.140:80</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">         <span class=\"attr\">server-addr:</span> <span class=\"string\">http://172.20.23.140:80</span></span><br><span class=\"line\">         <span class=\"attr\">group:</span> <span class=\"string\">DEFAULT_GROUP</span></span><br><span class=\"line\">         <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br></pre></td></tr></table></figure>\n\n<p>三、多文件配置</p>\n<hr>\n<p>1、创建bootstrap.yml,配置激活环境标识</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<p>2、创建bootstrap-dev.yml文件，配置连接nacos服务中心，加载多个配置文件</p>\n<p><strong>写法一：</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mybatis-plus-join-practice</span></span><br><span class=\"line\">  <span class=\"comment\">#配置nacos注册中心和配置中心</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://xxx:8848</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">        <span class=\"attr\">group:</span> <span class=\"string\">MYBATIS-PLUS-JOIN-PRACTICE</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.username&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.password&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.namespace&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span>  <span class=\"comment\"># yaml格式</span></span><br><span class=\"line\">        <span class=\"attr\">extension-configs:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">data-id:</span> <span class=\"string\">application.yml</span></span><br><span class=\"line\">            <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">data-id:</span> <span class=\"string\">datasource.yml</span></span><br><span class=\"line\">            <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>写法二：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mybatis-plus-join-practice</span></span><br><span class=\"line\">  <span class=\"comment\">#配置nacos注册中心和配置中心</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://xxx:8848</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">        <span class=\"attr\">group:</span> <span class=\"string\">MYBATIS-PLUS-JOIN-PRACTICE</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.username&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.password&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.namespace&#125;</span></span><br><span class=\"line\">        <span class=\"string\">extension-configs[0]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">application.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"string\">extension-configs[1]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">datasource.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>写法三：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mybatis-plus-join-practice</span></span><br><span class=\"line\">  <span class=\"comment\">#配置nacos注册中心和配置中心</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://xxx:8848</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">        <span class=\"attr\">group:</span> <span class=\"string\">MYBATIS-PLUS-JOIN-PRACTICE</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.username&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.password&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.namespace&#125;</span></span><br><span class=\"line\">        <span class=\"string\">shared-configs[0]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">application.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"string\">shared-configs[1]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">datasource.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br></pre></td></tr></table></figure>\n\n<p>说明： 1、以上三种写法都支持加载多个配置文件 1、内容中 extension-configs[0]、shared-configs[0] 加载的是 application.yml 配置文件 2、内容中 extension-configs[1]、shared-configs[1] 加载的是 datasource.yml 配置文件 3、配置文件在激活标识的 dev 环境的 MYBATIS-PLUS-PRACTICE 分组下</p>\n<blockquote>\n<p>1、在实际应用中，可以使用多文件配置，把spring配置和数据源配置分开</p>\n<p>2、可以使用命名空间区分不同的环境，例如：dev,sit,uat等环境</p>\n<p>3、权限控制开启方式，在conf&#x2F;applicaiton.properties文件中修改属性值即可，如下</p>\n<p><code>nacos.core.auth.enabled=true</code></p>\n<p>4、如果服务端开启了权限控制，注册中心和配置中心需要明确指定访问用户名和密码，命名空间才可以正常访问</p>\n</blockquote>\n","cover":false,"excerpt":"","more":"<h1 id=\"Nacos配置中心并支持多配置文件\"><a href=\"#Nacos配置中心并支持多配置文件\" class=\"headerlink\" title=\"Nacos配置中心并支持多配置文件\"></a>Nacos配置中心并支持多配置文件</h1><h3 id=\"一、引入依赖包\"><a href=\"#一、引入依赖包\" class=\"headerlink\" title=\"一、引入依赖包\"></a>一、引入依赖包</h3><hr>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>discovery和config分别为注册中心客户端和配置中心客户端</p>\n<p>注意：</p>\n<ol>\n<li>config，引入这个配置中心的依赖后，需要使用bootstrap.yml作为中转配置文件，读取的优先级为bootstrap.yml&gt;application.yml</li>\n<li>配置中心地址结尾不能带斜杠 否者会报异常</li>\n</ol>\n</blockquote>\n<h3 id=\"二、单文件配置\"><a href=\"#二、单文件配置\" class=\"headerlink\" title=\"二、单文件配置\"></a>二、单文件配置</h3><hr>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">onedata</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://172.20.23.140:80</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">         <span class=\"attr\">server-addr:</span> <span class=\"string\">http://172.20.23.140:80</span></span><br><span class=\"line\">         <span class=\"attr\">group:</span> <span class=\"string\">DEFAULT_GROUP</span></span><br><span class=\"line\">         <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br></pre></td></tr></table></figure>\n\n<p>三、多文件配置</p>\n<hr>\n<p>1、创建bootstrap.yml,配置激活环境标识</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<p>2、创建bootstrap-dev.yml文件，配置连接nacos服务中心，加载多个配置文件</p>\n<p><strong>写法一：</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mybatis-plus-join-practice</span></span><br><span class=\"line\">  <span class=\"comment\">#配置nacos注册中心和配置中心</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://xxx:8848</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">        <span class=\"attr\">group:</span> <span class=\"string\">MYBATIS-PLUS-JOIN-PRACTICE</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.username&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.password&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.namespace&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span>  <span class=\"comment\"># yaml格式</span></span><br><span class=\"line\">        <span class=\"attr\">extension-configs:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">data-id:</span> <span class=\"string\">application.yml</span></span><br><span class=\"line\">            <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">data-id:</span> <span class=\"string\">datasource.yml</span></span><br><span class=\"line\">            <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>写法二：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mybatis-plus-join-practice</span></span><br><span class=\"line\">  <span class=\"comment\">#配置nacos注册中心和配置中心</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://xxx:8848</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">        <span class=\"attr\">group:</span> <span class=\"string\">MYBATIS-PLUS-JOIN-PRACTICE</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.username&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.password&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.namespace&#125;</span></span><br><span class=\"line\">        <span class=\"string\">extension-configs[0]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">application.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"string\">extension-configs[1]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">datasource.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>写法三：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mybatis-plus-join-practice</span></span><br><span class=\"line\">  <span class=\"comment\">#配置nacos注册中心和配置中心</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">http://xxx:8848</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">        <span class=\"attr\">group:</span> <span class=\"string\">MYBATIS-PLUS-JOIN-PRACTICE</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.username&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.password&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.namespace&#125;</span></span><br><span class=\"line\">        <span class=\"string\">shared-configs[0]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">application.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"string\">shared-configs[1]:</span></span><br><span class=\"line\">          <span class=\"attr\">data-id:</span> <span class=\"string\">datasource.yml</span></span><br><span class=\"line\">          <span class=\"attr\">group:</span> <span class=\"string\">$&#123;spring.cloud.nacos.discovery.group&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br></pre></td></tr></table></figure>\n\n<p>说明： 1、以上三种写法都支持加载多个配置文件 1、内容中 extension-configs[0]、shared-configs[0] 加载的是 application.yml 配置文件 2、内容中 extension-configs[1]、shared-configs[1] 加载的是 datasource.yml 配置文件 3、配置文件在激活标识的 dev 环境的 MYBATIS-PLUS-PRACTICE 分组下</p>\n<blockquote>\n<p>1、在实际应用中，可以使用多文件配置，把spring配置和数据源配置分开</p>\n<p>2、可以使用命名空间区分不同的环境，例如：dev,sit,uat等环境</p>\n<p>3、权限控制开启方式，在conf&#x2F;applicaiton.properties文件中修改属性值即可，如下</p>\n<p><code>nacos.core.auth.enabled=true</code></p>\n<p>4、如果服务端开启了权限控制，注册中心和配置中心需要明确指定访问用户名和密码，命名空间才可以正常访问</p>\n</blockquote>\n"},{"title":"nginx安装部署","date":"2024-12-19T01:56:33.000Z","updated":"2024-12-20T01:30:32.000Z","excerpt":"本文介绍了Nginx的安装部署方法，包括Docker部署、源码部署和包管理工具安装三种方式。Docker部署部分提供了docker-compose.yml配置文件，用于设置Nginx容器的端口映射、环境变量、卷挂载等。源码部署部分详细说明了依赖安装、创建用户和组、编译安装Nginx的步骤，并提供了查看模块和操作命令的方法。包管理工具安装部分则分别介绍了在Ubuntu/Debian和CentOS/RHEL系统上使用apt和yum/dnf安装Nginx的步骤，包括添加仓库、安装、启动服务和设置开机自启动等。","comments":1,"toc":true,"abbrlink":46125,"_content":"\n# nginx安装部署\n\n# nginx安装部署\n\n## docker部署\n\n---\n\n**docker-compose.yml**\n\n```yaml\nversion: '3'\nservices:\n  nginx:\n    image: nginx:1.23.1\n    ports:\n    - 443:443\n    - 80:80\n    environment:\n      TZ: Asia/Shanghai\n    volumes:\n     - ./conf.d:/etc/nginx/conf.d:Z\n     - ./nginx.conf:/etc/nginx/nginx.conf:ro\n     - ./ssl:/etc/nginx/ssl_key:Z\n     - ./logs:/var/log/nginx:Z\n     - ./html:/etc/nginx/html:Z\n    command: [nginx-debug,'-g','daemon off;']\n```\n\n文件夹规划 nginx\n\n|-conf.d #文件夹，用于存放server的配置#​\n\n|-ssl.conf ## https配置文件\n\n|-docker-compose.yaml ## 主的docker-compose配置文件\n\n|-html ## 作为前端服务器用于存放前端文件\n\n|-logs ## 日志文件信息\n\n|-nginx.conf ## nginx主的配置文件，通用的http配置都放在这里\n\n|-ssl ## crt key的存放地址\n\n## 源码部署\n\n---\n\n### 依赖安装\n\n```shell\nyum -y install openssl openssl-devel make zlib zlib-devel gcc gcc-c++ libtool    pcre pcre-devel\n```\n\n### 创建没有登录的用户和用户组\n\n```shell\ngroupadd -r nginx\n\nuseradd -r -g nginx -s /sbin/nologin -d /usr/local/nginx -M nginx\n```\n\n* \\-r: 添加系统用户( 这里指将要被创建的系统用户`nginx`)\n* \\-g: 指定要创建的用户所属组( 这里指添加新系统用户`nginx`到`nginx`系统用户组 )\n* \\-s: 新帐户的登录`shell`( `/sbin/nologin` 这里设置为将要被创建系统用户`nginx`不能用来登录系统 )\n* \\-d: 新帐户的主目录( 这里指定将要被创建的系统用户`nginx`的家目录为 `/usr/local/nginx` )\n* \\-M: 不要创建用户的主目录( 也就是说将要被创建的系统用户`nginx`不会在 `/home` 目录下创建 `nginx` 家目录 )\n\n### 源码安装nginx\n\n```shell\nwget http://nginx.org/download/nginx-1.23.1.tar.gz\ntar -zvxf nginx-1.23.1.tar.gz -C ./nginx\ncd nginx/nginx-1.23.1\n./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module \nmake && make install\n```\n\n### 查看内置模块\n\n```shell\ncat ./auto/options |grep YES\n```\n\n### 查看自定义模块\n\n```shell\nnginx -V\n```\n\n### 操作命令\n\n```bash\ncd /usr/local/nginx/sbin\nnginx -c nginx.conf  # 启动\nnginx -s stop  # 关闭\nnginx -s reload # 重新加载配置\nnginx -s quit # 重启，先停止在启动\n```\n\n### 开机自启动\n\n在`rc.local`增加启动代码即可\n\n```bash\nvi /etc/rc.local\n /usr/local/nignx/sbin/nginx  -c /usr/local/nginx/conf/nginx.conf\n```\n\n设置rc.local的文件执行权限\n\n```bash\nchmod 755 rc.local\n```\n\n## 包管理工具安装\n\n安装 Nginx 可以使用多种包管理工具，具体取决于你的操作系统。以下是常见操作系统的安装方法:\n\n---\n\n### **1. 在 Ubuntu/Debian 上安装 Nginx**\n\n#### 使用 `apt`​ 包管理工具：\n\n1. **更新包列表**：\n\n    ```bash\n    sudo apt update\n    ```\n2. **安装 Nginx**：\n\n    ```bash\n    sudo apt install nginx\n    ```\n3. **启动 Nginx 服务**：\n\n    ```bash\n    sudo systemctl start nginx\n    ```\n4. **设置 Nginx 开机自启动**：\n\n    ```\n    sudo systemctl enable nginx\n    ```\n5. **验证安装**：  \n    打开浏览器，访问 `http://localhost`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### **2. 在 CentOS/RHEL 上安装 Nginx**\n\n#### 使用 `yum`​ 或 `dnf`​ 包管理工具：\n\n1. **添加 Nginx 官方仓库**：  \n    创建一个文件 `/etc/yum.repos.d/nginx.repo`​，并添加以下内容：\n\n    ```ini\n    [nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=0enabled=1\n    ```\n2. **安装 Nginx**：\n\n    ```bash\n    sudo yum install nginx\n    ```\n\n    或者使用 `dnf`​（适用于 CentOS 8+）：\n\n    ```bash\n    sudo dnf install nginx\n    ```\n3. **启动 Nginx 服务**：\n\n    ```bash\n    sudo systemctl start nginx\n    ```\n4. **设置 Nginx 开机自启动**：\n\n    ```\n    sudo systemctl enable nginx\n    ```\n5. **验证安装**：  \n    打开浏览器，访问 `http://<服务器IP>`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### **3. 在 macOS 上安装 Nginx**\n\n#### 使用 `Homebrew`​ 包管理工具：\n\n1. **安装 Homebrew**（如果尚未安装）：\n\n    ```\n    /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n    ```\n2. **安装 Nginx**：\n\n    ```\n    brew install nginx\n    ```\n3. **启动 Nginx 服务**：\n\n    ```\n    brew services start nginx\n    ```\n4. **验证安装**：  \n    打开浏览器，访问 `http://localhost:8080`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### **4. 在 Windows 上安装 Nginx**\n\nWindows 上没有直接的包管理工具安装 Nginx，但可以通过以下方式安装：\n\n1. **下载 Nginx**：  \n    访问 [Nginx 官方网站](http://nginx.org/en/download.html)，下载适合 Windows 的版本。\n2. **解压并运行**：\n\n    * 将下载的压缩包解压到一个目录（例如 `C:\\nginx`​）。\n    * 打开命令提示符，进入解压后的目录：\n\n      ```cmd\n      cd C:\\nginx\n      ```\n    * 启动 Nginx：\n\n      ```cmd\n      start nginx\n      ```\n3. **验证安装**：  \n    打开浏览器，访问 `http://localhost`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### 总结\n\n|操作系统|包管理工具|安装命令|\n| ---------------| ------------| -------------------------|\n|Ubuntu/Debian|​`apt`​|​`sudo apt install nginx`​|\n|CentOS/RHEL|​`yum/dnf`​|​`sudo yum install nginx`​|\n|macOS|​`Homebrew`​|​`brew install nginx`​|\n|Windows|手动安装|下载并解压 Nginx 压缩包|\n\n根据你的操作系统选择合适的安装方法即可。\n","source":"_posts/nginx-installation-deployment-z1jtjzq.md","raw":"---\ntitle: nginx安装部署\ndate: '2024-12-19 09:56:33'\nupdated: '2024-12-20 09:30:32'\nexcerpt: >-\n  本文介绍了Nginx的安装部署方法，包括Docker部署、源码部署和包管理工具安装三种方式。Docker部署部分提供了docker-compose.yml配置文件，用于设置Nginx容器的端口映射、环境变量、卷挂载等。源码部署部分详细说明了依赖安装、创建用户和组、编译安装Nginx的步骤，并提供了查看模块和操作命令的方法。包管理工具安装部分则分别介绍了在Ubuntu/Debian和CentOS/RHEL系统上使用apt和yum/dnf安装Nginx的步骤，包括添加仓库、安装、启动服务和设置开机自启动等。\ntags:\n  - nginx\n  - docker\n  - 源码部署\n  - 包管理\n  - 开机自启\ncategories:\n  - 部署指南\n  - 安装教程\n  - 配置管理\npermalink: /post/nginx-installation-deployment-z1jtjzq.html\ncomments: true\ntoc: true\nabbrlink: 46125\n---\n\n# nginx安装部署\n\n# nginx安装部署\n\n## docker部署\n\n---\n\n**docker-compose.yml**\n\n```yaml\nversion: '3'\nservices:\n  nginx:\n    image: nginx:1.23.1\n    ports:\n    - 443:443\n    - 80:80\n    environment:\n      TZ: Asia/Shanghai\n    volumes:\n     - ./conf.d:/etc/nginx/conf.d:Z\n     - ./nginx.conf:/etc/nginx/nginx.conf:ro\n     - ./ssl:/etc/nginx/ssl_key:Z\n     - ./logs:/var/log/nginx:Z\n     - ./html:/etc/nginx/html:Z\n    command: [nginx-debug,'-g','daemon off;']\n```\n\n文件夹规划 nginx\n\n|-conf.d #文件夹，用于存放server的配置#​\n\n|-ssl.conf ## https配置文件\n\n|-docker-compose.yaml ## 主的docker-compose配置文件\n\n|-html ## 作为前端服务器用于存放前端文件\n\n|-logs ## 日志文件信息\n\n|-nginx.conf ## nginx主的配置文件，通用的http配置都放在这里\n\n|-ssl ## crt key的存放地址\n\n## 源码部署\n\n---\n\n### 依赖安装\n\n```shell\nyum -y install openssl openssl-devel make zlib zlib-devel gcc gcc-c++ libtool    pcre pcre-devel\n```\n\n### 创建没有登录的用户和用户组\n\n```shell\ngroupadd -r nginx\n\nuseradd -r -g nginx -s /sbin/nologin -d /usr/local/nginx -M nginx\n```\n\n* \\-r: 添加系统用户( 这里指将要被创建的系统用户`nginx`)\n* \\-g: 指定要创建的用户所属组( 这里指添加新系统用户`nginx`到`nginx`系统用户组 )\n* \\-s: 新帐户的登录`shell`( `/sbin/nologin` 这里设置为将要被创建系统用户`nginx`不能用来登录系统 )\n* \\-d: 新帐户的主目录( 这里指定将要被创建的系统用户`nginx`的家目录为 `/usr/local/nginx` )\n* \\-M: 不要创建用户的主目录( 也就是说将要被创建的系统用户`nginx`不会在 `/home` 目录下创建 `nginx` 家目录 )\n\n### 源码安装nginx\n\n```shell\nwget http://nginx.org/download/nginx-1.23.1.tar.gz\ntar -zvxf nginx-1.23.1.tar.gz -C ./nginx\ncd nginx/nginx-1.23.1\n./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module \nmake && make install\n```\n\n### 查看内置模块\n\n```shell\ncat ./auto/options |grep YES\n```\n\n### 查看自定义模块\n\n```shell\nnginx -V\n```\n\n### 操作命令\n\n```bash\ncd /usr/local/nginx/sbin\nnginx -c nginx.conf  # 启动\nnginx -s stop  # 关闭\nnginx -s reload # 重新加载配置\nnginx -s quit # 重启，先停止在启动\n```\n\n### 开机自启动\n\n在`rc.local`增加启动代码即可\n\n```bash\nvi /etc/rc.local\n /usr/local/nignx/sbin/nginx  -c /usr/local/nginx/conf/nginx.conf\n```\n\n设置rc.local的文件执行权限\n\n```bash\nchmod 755 rc.local\n```\n\n## 包管理工具安装\n\n安装 Nginx 可以使用多种包管理工具，具体取决于你的操作系统。以下是常见操作系统的安装方法:\n\n---\n\n### **1. 在 Ubuntu/Debian 上安装 Nginx**\n\n#### 使用 `apt`​ 包管理工具：\n\n1. **更新包列表**：\n\n    ```bash\n    sudo apt update\n    ```\n2. **安装 Nginx**：\n\n    ```bash\n    sudo apt install nginx\n    ```\n3. **启动 Nginx 服务**：\n\n    ```bash\n    sudo systemctl start nginx\n    ```\n4. **设置 Nginx 开机自启动**：\n\n    ```\n    sudo systemctl enable nginx\n    ```\n5. **验证安装**：  \n    打开浏览器，访问 `http://localhost`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### **2. 在 CentOS/RHEL 上安装 Nginx**\n\n#### 使用 `yum`​ 或 `dnf`​ 包管理工具：\n\n1. **添加 Nginx 官方仓库**：  \n    创建一个文件 `/etc/yum.repos.d/nginx.repo`​，并添加以下内容：\n\n    ```ini\n    [nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=0enabled=1\n    ```\n2. **安装 Nginx**：\n\n    ```bash\n    sudo yum install nginx\n    ```\n\n    或者使用 `dnf`​（适用于 CentOS 8+）：\n\n    ```bash\n    sudo dnf install nginx\n    ```\n3. **启动 Nginx 服务**：\n\n    ```bash\n    sudo systemctl start nginx\n    ```\n4. **设置 Nginx 开机自启动**：\n\n    ```\n    sudo systemctl enable nginx\n    ```\n5. **验证安装**：  \n    打开浏览器，访问 `http://<服务器IP>`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### **3. 在 macOS 上安装 Nginx**\n\n#### 使用 `Homebrew`​ 包管理工具：\n\n1. **安装 Homebrew**（如果尚未安装）：\n\n    ```\n    /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n    ```\n2. **安装 Nginx**：\n\n    ```\n    brew install nginx\n    ```\n3. **启动 Nginx 服务**：\n\n    ```\n    brew services start nginx\n    ```\n4. **验证安装**：  \n    打开浏览器，访问 `http://localhost:8080`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### **4. 在 Windows 上安装 Nginx**\n\nWindows 上没有直接的包管理工具安装 Nginx，但可以通过以下方式安装：\n\n1. **下载 Nginx**：  \n    访问 [Nginx 官方网站](http://nginx.org/en/download.html)，下载适合 Windows 的版本。\n2. **解压并运行**：\n\n    * 将下载的压缩包解压到一个目录（例如 `C:\\nginx`​）。\n    * 打开命令提示符，进入解压后的目录：\n\n      ```cmd\n      cd C:\\nginx\n      ```\n    * 启动 Nginx：\n\n      ```cmd\n      start nginx\n      ```\n3. **验证安装**：  \n    打开浏览器，访问 `http://localhost`​，如果看到 Nginx 的欢迎页面，说明安装成功。\n\n---\n\n### 总结\n\n|操作系统|包管理工具|安装命令|\n| ---------------| ------------| -------------------------|\n|Ubuntu/Debian|​`apt`​|​`sudo apt install nginx`​|\n|CentOS/RHEL|​`yum/dnf`​|​`sudo yum install nginx`​|\n|macOS|​`Homebrew`​|​`brew install nginx`​|\n|Windows|手动安装|下载并解压 Nginx 压缩包|\n\n根据你的操作系统选择合适的安装方法即可。\n","slug":"nginx-installation-deployment-z1jtjzq","published":1,"__permalink":"/post/nginx-installation-deployment-z1jtjzq.html","_id":"cm4zhl9ar0005n1bm544hdq39","layout":"post","photos":[],"content":"<h1 id=\"nginx安装部署\"><a href=\"#nginx安装部署\" class=\"headerlink\" title=\"nginx安装部署\"></a>nginx安装部署</h1><h1 id=\"nginx安装部署-1\"><a href=\"#nginx安装部署-1\" class=\"headerlink\" title=\"nginx安装部署\"></a>nginx安装部署</h1><h2 id=\"docker部署\"><a href=\"#docker部署\" class=\"headerlink\" title=\"docker部署\"></a>docker部署</h2><hr>\n<p><strong>docker-compose.yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">nginx:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.23.1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">443</span><span class=\"string\">:443</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">80</span><span class=\"string\">:80</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">TZ:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./conf.d:/etc/nginx/conf.d:Z</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./nginx.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./ssl:/etc/nginx/ssl_key:Z</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./logs:/var/log/nginx:Z</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./html:/etc/nginx/html:Z</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">nginx-debug</span>,<span class=\"string\">&#x27;-g&#x27;</span>,<span class=\"string\">&#x27;daemon off;&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>文件夹规划 nginx</p>\n<p>|-conf.d #文件夹，用于存放server的配置#​</p>\n<p>|-ssl.conf ## https配置文件</p>\n<p>|-docker-compose.yaml ## 主的docker-compose配置文件</p>\n<p>|-html ## 作为前端服务器用于存放前端文件</p>\n<p>|-logs ## 日志文件信息</p>\n<p>|-nginx.conf ## nginx主的配置文件，通用的http配置都放在这里</p>\n<p>|-ssl ## crt key的存放地址</p>\n<h2 id=\"源码部署\"><a href=\"#源码部署\" class=\"headerlink\" title=\"源码部署\"></a>源码部署</h2><hr>\n<h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install openssl openssl-devel make zlib zlib-devel gcc gcc-c++ libtool    pcre pcre-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建没有登录的用户和用户组\"><a href=\"#创建没有登录的用户和用户组\" class=\"headerlink\" title=\"创建没有登录的用户和用户组\"></a>创建没有登录的用户和用户组</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd -r nginx</span><br><span class=\"line\"></span><br><span class=\"line\">useradd -r -g nginx -s /sbin/nologin -d /usr/local/nginx -M nginx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-r: 添加系统用户( 这里指将要被创建的系统用户<code>nginx</code>)</li>\n<li>-g: 指定要创建的用户所属组( 这里指添加新系统用户<code>nginx</code>到<code>nginx</code>系统用户组 )</li>\n<li>-s: 新帐户的登录<code>shell</code>( <code>/sbin/nologin</code> 这里设置为将要被创建系统用户<code>nginx</code>不能用来登录系统 )</li>\n<li>-d: 新帐户的主目录( 这里指定将要被创建的系统用户<code>nginx</code>的家目录为 <code>/usr/local/nginx</code> )</li>\n<li>-M: 不要创建用户的主目录( 也就是说将要被创建的系统用户<code>nginx</code>不会在 <code>/home</code> 目录下创建 <code>nginx</code> 家目录 )</li>\n</ul>\n<h3 id=\"源码安装nginx\"><a href=\"#源码安装nginx\" class=\"headerlink\" title=\"源码安装nginx\"></a>源码安装nginx</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.23.1.tar.gz</span><br><span class=\"line\">tar -zvxf nginx-1.23.1.tar.gz -C ./nginx</span><br><span class=\"line\">cd nginx/nginx-1.23.1</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module </span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看内置模块\"><a href=\"#查看内置模块\" class=\"headerlink\" title=\"查看内置模块\"></a>查看内置模块</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ./auto/options |grep YES</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看自定义模块\"><a href=\"#查看自定义模块\" class=\"headerlink\" title=\"查看自定义模块\"></a>查看自定义模块</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令\"></a>操作命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/nginx/sbin</span><br><span class=\"line\">nginx -c nginx.conf  <span class=\"comment\"># 启动</span></span><br><span class=\"line\">nginx -s stop  <span class=\"comment\"># 关闭</span></span><br><span class=\"line\">nginx -s reload <span class=\"comment\"># 重新加载配置</span></span><br><span class=\"line\">nginx -s quit <span class=\"comment\"># 重启，先停止在启动</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开机自启动\"><a href=\"#开机自启动\" class=\"headerlink\" title=\"开机自启动\"></a>开机自启动</h3><p>在<code>rc.local</code>增加启动代码即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/rc.local</span><br><span class=\"line\"> /usr/local/nignx/sbin/nginx  -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>设置rc.local的文件执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 755 rc.local</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包管理工具安装\"><a href=\"#包管理工具安装\" class=\"headerlink\" title=\"包管理工具安装\"></a>包管理工具安装</h2><p>安装 Nginx 可以使用多种包管理工具，具体取决于你的操作系统。以下是常见操作系统的安装方法:</p>\n<hr>\n<h3 id=\"1-在-Ubuntu-Debian-上安装-Nginx\"><a href=\"#1-在-Ubuntu-Debian-上安装-Nginx\" class=\"headerlink\" title=\"1. 在 Ubuntu&#x2F;Debian 上安装 Nginx\"></a><strong>1. 在 Ubuntu&#x2F;Debian 上安装 Nginx</strong></h3><h4 id=\"使用-apt​-包管理工具：\"><a href=\"#使用-apt​-包管理工具：\" class=\"headerlink\" title=\"使用 apt​ 包管理工具：\"></a>使用 <code>apt</code>​ 包管理工具：</h4><ol>\n<li><p><strong>更新包列表</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>安装 Nginx</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>启动 Nginx 服务</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>设置 Nginx 开机自启动</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://localhost</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"2-在-CentOS-RHEL-上安装-Nginx\"><a href=\"#2-在-CentOS-RHEL-上安装-Nginx\" class=\"headerlink\" title=\"2. 在 CentOS&#x2F;RHEL 上安装 Nginx\"></a><strong>2. 在 CentOS&#x2F;RHEL 上安装 Nginx</strong></h3><h4 id=\"使用-yum​-或-dnf​-包管理工具：\"><a href=\"#使用-yum​-或-dnf​-包管理工具：\" class=\"headerlink\" title=\"使用 yum​ 或 dnf​ 包管理工具：\"></a>使用 <code>yum</code>​ 或 <code>dnf</code>​ 包管理工具：</h4><ol>\n<li><p><strong>添加 Nginx 官方仓库</strong>：<br> 创建一个文件 <code>/etc/yum.repos.d/nginx.repo</code>​，并添加以下内容：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[nginx]</span><span class=\"attr\">name</span>=nginx repobaseurl=http://nginx.org/packages/centos/<span class=\"variable\">$releasever</span>/<span class=\"variable\">$basearch</span>/gpgcheck=<span class=\"number\">0</span>enabled=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>安装 Nginx</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> yum install nginx</span><br></pre></td></tr></table></figure>\n\n<p> 或者使用 <code>dnf</code>​（适用于 CentOS 8+）：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> dnf install nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>启动 Nginx 服务</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>设置 Nginx 开机自启动</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://&lt;服务器IP&gt;</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"3-在-macOS-上安装-Nginx\"><a href=\"#3-在-macOS-上安装-Nginx\" class=\"headerlink\" title=\"3. 在 macOS 上安装 Nginx\"></a><strong>3. 在 macOS 上安装 Nginx</strong></h3><h4 id=\"使用-Homebrew​-包管理工具：\"><a href=\"#使用-Homebrew​-包管理工具：\" class=\"headerlink\" title=\"使用 Homebrew​ 包管理工具：\"></a>使用 <code>Homebrew</code>​ 包管理工具：</h4><ol>\n<li><p><strong>安装 Homebrew</strong>（如果尚未安装）：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>安装 Nginx</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>启动 Nginx 服务</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://localhost:8080</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"4-在-Windows-上安装-Nginx\"><a href=\"#4-在-Windows-上安装-Nginx\" class=\"headerlink\" title=\"4. 在 Windows 上安装 Nginx\"></a><strong>4. 在 Windows 上安装 Nginx</strong></h3><p>Windows 上没有直接的包管理工具安装 Nginx，但可以通过以下方式安装：</p>\n<ol>\n<li><p><strong>下载 Nginx</strong>：<br> 访问 <a href=\"http://nginx.org/en/download.html\">Nginx 官方网站</a>，下载适合 Windows 的版本。</p>\n</li>\n<li><p><strong>解压并运行</strong>：</p>\n<ul>\n<li><p>将下载的压缩包解压到一个目录（例如 <code>C:\\nginx</code>​）。</p>\n</li>\n<li><p>打开命令提示符，进入解压后的目录：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> C:\\nginx</span><br></pre></td></tr></table></figure></li>\n<li><p>启动 Nginx：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">start</span> nginx</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://localhost</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><table>\n<thead>\n<tr>\n<th>操作系统</th>\n<th>包管理工具</th>\n<th>安装命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ubuntu&#x2F;Debian</td>\n<td>​<code>apt</code>​</td>\n<td>​<code>sudo apt install nginx</code>​</td>\n</tr>\n<tr>\n<td>CentOS&#x2F;RHEL</td>\n<td>​<code>yum/dnf</code>​</td>\n<td>​<code>sudo yum install nginx</code>​</td>\n</tr>\n<tr>\n<td>macOS</td>\n<td>​<code>Homebrew</code>​</td>\n<td>​<code>brew install nginx</code>​</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>手动安装</td>\n<td>下载并解压 Nginx 压缩包</td>\n</tr>\n</tbody></table>\n<p>根据你的操作系统选择合适的安装方法即可。</p>\n","cover":false,"more":"<h1 id=\"nginx安装部署\"><a href=\"#nginx安装部署\" class=\"headerlink\" title=\"nginx安装部署\"></a>nginx安装部署</h1><h1 id=\"nginx安装部署-1\"><a href=\"#nginx安装部署-1\" class=\"headerlink\" title=\"nginx安装部署\"></a>nginx安装部署</h1><h2 id=\"docker部署\"><a href=\"#docker部署\" class=\"headerlink\" title=\"docker部署\"></a>docker部署</h2><hr>\n<p><strong>docker-compose.yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">nginx:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.23.1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">443</span><span class=\"string\">:443</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">80</span><span class=\"string\">:80</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">TZ:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./conf.d:/etc/nginx/conf.d:Z</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./nginx.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./ssl:/etc/nginx/ssl_key:Z</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./logs:/var/log/nginx:Z</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./html:/etc/nginx/html:Z</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">nginx-debug</span>,<span class=\"string\">&#x27;-g&#x27;</span>,<span class=\"string\">&#x27;daemon off;&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>文件夹规划 nginx</p>\n<p>|-conf.d #文件夹，用于存放server的配置#​</p>\n<p>|-ssl.conf ## https配置文件</p>\n<p>|-docker-compose.yaml ## 主的docker-compose配置文件</p>\n<p>|-html ## 作为前端服务器用于存放前端文件</p>\n<p>|-logs ## 日志文件信息</p>\n<p>|-nginx.conf ## nginx主的配置文件，通用的http配置都放在这里</p>\n<p>|-ssl ## crt key的存放地址</p>\n<h2 id=\"源码部署\"><a href=\"#源码部署\" class=\"headerlink\" title=\"源码部署\"></a>源码部署</h2><hr>\n<h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install openssl openssl-devel make zlib zlib-devel gcc gcc-c++ libtool    pcre pcre-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建没有登录的用户和用户组\"><a href=\"#创建没有登录的用户和用户组\" class=\"headerlink\" title=\"创建没有登录的用户和用户组\"></a>创建没有登录的用户和用户组</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd -r nginx</span><br><span class=\"line\"></span><br><span class=\"line\">useradd -r -g nginx -s /sbin/nologin -d /usr/local/nginx -M nginx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-r: 添加系统用户( 这里指将要被创建的系统用户<code>nginx</code>)</li>\n<li>-g: 指定要创建的用户所属组( 这里指添加新系统用户<code>nginx</code>到<code>nginx</code>系统用户组 )</li>\n<li>-s: 新帐户的登录<code>shell</code>( <code>/sbin/nologin</code> 这里设置为将要被创建系统用户<code>nginx</code>不能用来登录系统 )</li>\n<li>-d: 新帐户的主目录( 这里指定将要被创建的系统用户<code>nginx</code>的家目录为 <code>/usr/local/nginx</code> )</li>\n<li>-M: 不要创建用户的主目录( 也就是说将要被创建的系统用户<code>nginx</code>不会在 <code>/home</code> 目录下创建 <code>nginx</code> 家目录 )</li>\n</ul>\n<h3 id=\"源码安装nginx\"><a href=\"#源码安装nginx\" class=\"headerlink\" title=\"源码安装nginx\"></a>源码安装nginx</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.23.1.tar.gz</span><br><span class=\"line\">tar -zvxf nginx-1.23.1.tar.gz -C ./nginx</span><br><span class=\"line\">cd nginx/nginx-1.23.1</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module </span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看内置模块\"><a href=\"#查看内置模块\" class=\"headerlink\" title=\"查看内置模块\"></a>查看内置模块</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ./auto/options |grep YES</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看自定义模块\"><a href=\"#查看自定义模块\" class=\"headerlink\" title=\"查看自定义模块\"></a>查看自定义模块</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令\"></a>操作命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/nginx/sbin</span><br><span class=\"line\">nginx -c nginx.conf  <span class=\"comment\"># 启动</span></span><br><span class=\"line\">nginx -s stop  <span class=\"comment\"># 关闭</span></span><br><span class=\"line\">nginx -s reload <span class=\"comment\"># 重新加载配置</span></span><br><span class=\"line\">nginx -s quit <span class=\"comment\"># 重启，先停止在启动</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开机自启动\"><a href=\"#开机自启动\" class=\"headerlink\" title=\"开机自启动\"></a>开机自启动</h3><p>在<code>rc.local</code>增加启动代码即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/rc.local</span><br><span class=\"line\"> /usr/local/nignx/sbin/nginx  -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>设置rc.local的文件执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 755 rc.local</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包管理工具安装\"><a href=\"#包管理工具安装\" class=\"headerlink\" title=\"包管理工具安装\"></a>包管理工具安装</h2><p>安装 Nginx 可以使用多种包管理工具，具体取决于你的操作系统。以下是常见操作系统的安装方法:</p>\n<hr>\n<h3 id=\"1-在-Ubuntu-Debian-上安装-Nginx\"><a href=\"#1-在-Ubuntu-Debian-上安装-Nginx\" class=\"headerlink\" title=\"1. 在 Ubuntu&#x2F;Debian 上安装 Nginx\"></a><strong>1. 在 Ubuntu&#x2F;Debian 上安装 Nginx</strong></h3><h4 id=\"使用-apt​-包管理工具：\"><a href=\"#使用-apt​-包管理工具：\" class=\"headerlink\" title=\"使用 apt​ 包管理工具：\"></a>使用 <code>apt</code>​ 包管理工具：</h4><ol>\n<li><p><strong>更新包列表</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>安装 Nginx</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>启动 Nginx 服务</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>设置 Nginx 开机自启动</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://localhost</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"2-在-CentOS-RHEL-上安装-Nginx\"><a href=\"#2-在-CentOS-RHEL-上安装-Nginx\" class=\"headerlink\" title=\"2. 在 CentOS&#x2F;RHEL 上安装 Nginx\"></a><strong>2. 在 CentOS&#x2F;RHEL 上安装 Nginx</strong></h3><h4 id=\"使用-yum​-或-dnf​-包管理工具：\"><a href=\"#使用-yum​-或-dnf​-包管理工具：\" class=\"headerlink\" title=\"使用 yum​ 或 dnf​ 包管理工具：\"></a>使用 <code>yum</code>​ 或 <code>dnf</code>​ 包管理工具：</h4><ol>\n<li><p><strong>添加 Nginx 官方仓库</strong>：<br> 创建一个文件 <code>/etc/yum.repos.d/nginx.repo</code>​，并添加以下内容：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[nginx]</span><span class=\"attr\">name</span>=nginx repobaseurl=http://nginx.org/packages/centos/<span class=\"variable\">$releasever</span>/<span class=\"variable\">$basearch</span>/gpgcheck=<span class=\"number\">0</span>enabled=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>安装 Nginx</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> yum install nginx</span><br></pre></td></tr></table></figure>\n\n<p> 或者使用 <code>dnf</code>​（适用于 CentOS 8+）：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> dnf install nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>启动 Nginx 服务</strong>：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>设置 Nginx 开机自启动</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://&lt;服务器IP&gt;</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"3-在-macOS-上安装-Nginx\"><a href=\"#3-在-macOS-上安装-Nginx\" class=\"headerlink\" title=\"3. 在 macOS 上安装 Nginx\"></a><strong>3. 在 macOS 上安装 Nginx</strong></h3><h4 id=\"使用-Homebrew​-包管理工具：\"><a href=\"#使用-Homebrew​-包管理工具：\" class=\"headerlink\" title=\"使用 Homebrew​ 包管理工具：\"></a>使用 <code>Homebrew</code>​ 包管理工具：</h4><ol>\n<li><p><strong>安装 Homebrew</strong>（如果尚未安装）：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>安装 Nginx</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>启动 Nginx 服务</strong>：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start nginx</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://localhost:8080</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"4-在-Windows-上安装-Nginx\"><a href=\"#4-在-Windows-上安装-Nginx\" class=\"headerlink\" title=\"4. 在 Windows 上安装 Nginx\"></a><strong>4. 在 Windows 上安装 Nginx</strong></h3><p>Windows 上没有直接的包管理工具安装 Nginx，但可以通过以下方式安装：</p>\n<ol>\n<li><p><strong>下载 Nginx</strong>：<br> 访问 <a href=\"http://nginx.org/en/download.html\">Nginx 官方网站</a>，下载适合 Windows 的版本。</p>\n</li>\n<li><p><strong>解压并运行</strong>：</p>\n<ul>\n<li><p>将下载的压缩包解压到一个目录（例如 <code>C:\\nginx</code>​）。</p>\n</li>\n<li><p>打开命令提示符，进入解压后的目录：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> C:\\nginx</span><br></pre></td></tr></table></figure></li>\n<li><p>启动 Nginx：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">start</span> nginx</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>验证安装</strong>：<br> 打开浏览器，访问 <code>http://localhost</code>​，如果看到 Nginx 的欢迎页面，说明安装成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><table>\n<thead>\n<tr>\n<th>操作系统</th>\n<th>包管理工具</th>\n<th>安装命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ubuntu&#x2F;Debian</td>\n<td>​<code>apt</code>​</td>\n<td>​<code>sudo apt install nginx</code>​</td>\n</tr>\n<tr>\n<td>CentOS&#x2F;RHEL</td>\n<td>​<code>yum/dnf</code>​</td>\n<td>​<code>sudo yum install nginx</code>​</td>\n</tr>\n<tr>\n<td>macOS</td>\n<td>​<code>Homebrew</code>​</td>\n<td>​<code>brew install nginx</code>​</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>手动安装</td>\n<td>下载并解压 Nginx 压缩包</td>\n</tr>\n</tbody></table>\n<p>根据你的操作系统选择合适的安装方法即可。</p>\n"},{"title":"is-a 、have-a、和 like-a 的区别","date":"2024-12-19T15:27:21.000Z","updated":"2024-12-19T16:11:26.000Z","comments":1,"toc":true,"abbrlink":53580,"_content":"\n# is-a 、have-a、和 like-a 的区别\n\n### 1、is-a，has-a，like-a 是什么\n\n在面向对象设计的领域里，有若干种设计思路，主要有如下三种： \nis-a、has-a、like-a \njava 中在类、接口、抽象类中有很多体现。 \n了解 java 看这里：[什么是 Java](http://blog.csdn.net/ooppookid/article/details/51931003) \n了解类和对象看这里：[类、对象到底有什么秘密](http://blog.csdn.net/ooppookid/article/details/51161448) \n了解接口和抽象类看这里：[接口和抽象类有什么区别](http://blog.csdn.net/ooppookid/article/details/51173179)\n\n### 2、is-a 是什么\n\nis-a，顾名思义，是一个，代表继承关系。 \n如果 A is-a B，那么 B 就是 A 的父类。 \n一个类完全包含另一个类的所有属性及行为。 \n例如 PC 机是计算机，工作站也是计算机，PC 机和工作站是两种不同类型的计算机，但都继承了计算机的共同特性。因此在用 Java 语言实现时，应该将 PC 机和工作站定义成两种类，均继承计算机类。 \n了解更多继承看这里：[java 类的继承有什么意义](http://blog.csdn.net/ooppookid/article/details/51193477)\n\n### *3、has-a 是什么*\n\nhas-a，顾名思义，有一个，代表从属关系。 \n如果 A has a B，那么 B 就是 A 的组成部分。 \n同一种类的对象，通过它们的属性的不同值来区别。 \n例如一台 PC 机的操作系统是 Windows，另一台 PC 机的操作系统是 Linux。操作系统是 PC 机的一个成员变量，根据这一成员变量的不同值，可以区分不同的 PC 机对象。\n\n### 4、 like-a 是什么\n\nlike-a，顾名思义，像一个，代表组合关系。 \n如果 A like a B，那么 B 就是 A 的接口。 \n新类型有老类型的接口，但还包含其他函数，所以不能说它们完全相同。 \n例如一台手机可以说是一个微型计算机，但是手机的通讯功能显然不是计算机具备的行为，所以手机继承了计算机的特性，同时需要实现通讯功能，而通讯功能需要作为单独接口，而不是计算机的行为。\n\n### 5、is-a，has-a，like-a 如何应用\n\n如果你确定两件对象之间是 is-a 的关系，那么此时你应该使用继承；比如菱形、圆形和方形都是形状的一种，那么他们都应该从形状类继承。 \n如果你确定两件对象之间是 has-a 的关系，那么此时你应该使用聚合；比如电脑是由显示器、CPU、硬盘等组成的，那么你应该把显示器、CPU、硬盘这些类聚合成电脑类。 \n如果你确定两件对象之间是 like-a 的关系，那么此时你应该使用组合；比如空调继承于制冷机，但它同时有加热功能，那么你应该把让空调继承制冷机类，并实现加热接口。\n","source":"_posts/the-difference-between-isa-havea-and-likea-1u8avc.md","raw":"---\ntitle: is-a 、have-a、和 like-a 的区别\ndate: '2024-12-19 23:27:21'\nupdated: '2024-12-20 00:11:26'\npermalink: /post/the-difference-between-isa-havea-and-likea-1u8avc.html\ncomments: true\ntoc: true\nabbrlink: 53580\n---\n\n# is-a 、have-a、和 like-a 的区别\n\n### 1、is-a，has-a，like-a 是什么\n\n在面向对象设计的领域里，有若干种设计思路，主要有如下三种： \nis-a、has-a、like-a \njava 中在类、接口、抽象类中有很多体现。 \n了解 java 看这里：[什么是 Java](http://blog.csdn.net/ooppookid/article/details/51931003) \n了解类和对象看这里：[类、对象到底有什么秘密](http://blog.csdn.net/ooppookid/article/details/51161448) \n了解接口和抽象类看这里：[接口和抽象类有什么区别](http://blog.csdn.net/ooppookid/article/details/51173179)\n\n### 2、is-a 是什么\n\nis-a，顾名思义，是一个，代表继承关系。 \n如果 A is-a B，那么 B 就是 A 的父类。 \n一个类完全包含另一个类的所有属性及行为。 \n例如 PC 机是计算机，工作站也是计算机，PC 机和工作站是两种不同类型的计算机，但都继承了计算机的共同特性。因此在用 Java 语言实现时，应该将 PC 机和工作站定义成两种类，均继承计算机类。 \n了解更多继承看这里：[java 类的继承有什么意义](http://blog.csdn.net/ooppookid/article/details/51193477)\n\n### *3、has-a 是什么*\n\nhas-a，顾名思义，有一个，代表从属关系。 \n如果 A has a B，那么 B 就是 A 的组成部分。 \n同一种类的对象，通过它们的属性的不同值来区别。 \n例如一台 PC 机的操作系统是 Windows，另一台 PC 机的操作系统是 Linux。操作系统是 PC 机的一个成员变量，根据这一成员变量的不同值，可以区分不同的 PC 机对象。\n\n### 4、 like-a 是什么\n\nlike-a，顾名思义，像一个，代表组合关系。 \n如果 A like a B，那么 B 就是 A 的接口。 \n新类型有老类型的接口，但还包含其他函数，所以不能说它们完全相同。 \n例如一台手机可以说是一个微型计算机，但是手机的通讯功能显然不是计算机具备的行为，所以手机继承了计算机的特性，同时需要实现通讯功能，而通讯功能需要作为单独接口，而不是计算机的行为。\n\n### 5、is-a，has-a，like-a 如何应用\n\n如果你确定两件对象之间是 is-a 的关系，那么此时你应该使用继承；比如菱形、圆形和方形都是形状的一种，那么他们都应该从形状类继承。 \n如果你确定两件对象之间是 has-a 的关系，那么此时你应该使用聚合；比如电脑是由显示器、CPU、硬盘等组成的，那么你应该把显示器、CPU、硬盘这些类聚合成电脑类。 \n如果你确定两件对象之间是 like-a 的关系，那么此时你应该使用组合；比如空调继承于制冷机，但它同时有加热功能，那么你应该把让空调继承制冷机类，并实现加热接口。\n","slug":"the-difference-between-isa-havea-and-likea-1u8avc","published":1,"__permalink":"/post/the-difference-between-isa-havea-and-likea-1u8avc.html","_id":"cm4zhl9as0007n1bmdhjdc4za","layout":"post","photos":[],"content":"<h1 id=\"is-a-、have-a、和-like-a-的区别\"><a href=\"#is-a-、have-a、和-like-a-的区别\" class=\"headerlink\" title=\"is-a 、have-a、和 like-a 的区别\"></a>is-a 、have-a、和 like-a 的区别</h1><h3 id=\"1、is-a，has-a，like-a-是什么\"><a href=\"#1、is-a，has-a，like-a-是什么\" class=\"headerlink\" title=\"1、is-a，has-a，like-a 是什么\"></a>1、is-a，has-a，like-a 是什么</h3><p>在面向对象设计的领域里，有若干种设计思路，主要有如下三种：<br>is-a、has-a、like-a<br>java 中在类、接口、抽象类中有很多体现。<br>了解 java 看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51931003\">什么是 Java</a><br>了解类和对象看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51161448\">类、对象到底有什么秘密</a><br>了解接口和抽象类看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51173179\">接口和抽象类有什么区别</a></p>\n<h3 id=\"2、is-a-是什么\"><a href=\"#2、is-a-是什么\" class=\"headerlink\" title=\"2、is-a 是什么\"></a>2、is-a 是什么</h3><p>is-a，顾名思义，是一个，代表继承关系。<br>如果 A is-a B，那么 B 就是 A 的父类。<br>一个类完全包含另一个类的所有属性及行为。<br>例如 PC 机是计算机，工作站也是计算机，PC 机和工作站是两种不同类型的计算机，但都继承了计算机的共同特性。因此在用 Java 语言实现时，应该将 PC 机和工作站定义成两种类，均继承计算机类。<br>了解更多继承看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51193477\">java 类的继承有什么意义</a></p>\n<h3 id=\"3、has-a-是什么\"><a href=\"#3、has-a-是什么\" class=\"headerlink\" title=\"3、has-a 是什么\"></a><em>3、has-a 是什么</em></h3><p>has-a，顾名思义，有一个，代表从属关系。<br>如果 A has a B，那么 B 就是 A 的组成部分。<br>同一种类的对象，通过它们的属性的不同值来区别。<br>例如一台 PC 机的操作系统是 Windows，另一台 PC 机的操作系统是 Linux。操作系统是 PC 机的一个成员变量，根据这一成员变量的不同值，可以区分不同的 PC 机对象。</p>\n<h3 id=\"4、-like-a-是什么\"><a href=\"#4、-like-a-是什么\" class=\"headerlink\" title=\"4、 like-a 是什么\"></a>4、 like-a 是什么</h3><p>like-a，顾名思义，像一个，代表组合关系。<br>如果 A like a B，那么 B 就是 A 的接口。<br>新类型有老类型的接口，但还包含其他函数，所以不能说它们完全相同。<br>例如一台手机可以说是一个微型计算机，但是手机的通讯功能显然不是计算机具备的行为，所以手机继承了计算机的特性，同时需要实现通讯功能，而通讯功能需要作为单独接口，而不是计算机的行为。</p>\n<h3 id=\"5、is-a，has-a，like-a-如何应用\"><a href=\"#5、is-a，has-a，like-a-如何应用\" class=\"headerlink\" title=\"5、is-a，has-a，like-a 如何应用\"></a>5、is-a，has-a，like-a 如何应用</h3><p>如果你确定两件对象之间是 is-a 的关系，那么此时你应该使用继承；比如菱形、圆形和方形都是形状的一种，那么他们都应该从形状类继承。<br>如果你确定两件对象之间是 has-a 的关系，那么此时你应该使用聚合；比如电脑是由显示器、CPU、硬盘等组成的，那么你应该把显示器、CPU、硬盘这些类聚合成电脑类。<br>如果你确定两件对象之间是 like-a 的关系，那么此时你应该使用组合；比如空调继承于制冷机，但它同时有加热功能，那么你应该把让空调继承制冷机类，并实现加热接口。</p>\n","cover":false,"excerpt":"","more":"<h1 id=\"is-a-、have-a、和-like-a-的区别\"><a href=\"#is-a-、have-a、和-like-a-的区别\" class=\"headerlink\" title=\"is-a 、have-a、和 like-a 的区别\"></a>is-a 、have-a、和 like-a 的区别</h1><h3 id=\"1、is-a，has-a，like-a-是什么\"><a href=\"#1、is-a，has-a，like-a-是什么\" class=\"headerlink\" title=\"1、is-a，has-a，like-a 是什么\"></a>1、is-a，has-a，like-a 是什么</h3><p>在面向对象设计的领域里，有若干种设计思路，主要有如下三种：<br>is-a、has-a、like-a<br>java 中在类、接口、抽象类中有很多体现。<br>了解 java 看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51931003\">什么是 Java</a><br>了解类和对象看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51161448\">类、对象到底有什么秘密</a><br>了解接口和抽象类看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51173179\">接口和抽象类有什么区别</a></p>\n<h3 id=\"2、is-a-是什么\"><a href=\"#2、is-a-是什么\" class=\"headerlink\" title=\"2、is-a 是什么\"></a>2、is-a 是什么</h3><p>is-a，顾名思义，是一个，代表继承关系。<br>如果 A is-a B，那么 B 就是 A 的父类。<br>一个类完全包含另一个类的所有属性及行为。<br>例如 PC 机是计算机，工作站也是计算机，PC 机和工作站是两种不同类型的计算机，但都继承了计算机的共同特性。因此在用 Java 语言实现时，应该将 PC 机和工作站定义成两种类，均继承计算机类。<br>了解更多继承看这里：<a href=\"http://blog.csdn.net/ooppookid/article/details/51193477\">java 类的继承有什么意义</a></p>\n<h3 id=\"3、has-a-是什么\"><a href=\"#3、has-a-是什么\" class=\"headerlink\" title=\"3、has-a 是什么\"></a><em>3、has-a 是什么</em></h3><p>has-a，顾名思义，有一个，代表从属关系。<br>如果 A has a B，那么 B 就是 A 的组成部分。<br>同一种类的对象，通过它们的属性的不同值来区别。<br>例如一台 PC 机的操作系统是 Windows，另一台 PC 机的操作系统是 Linux。操作系统是 PC 机的一个成员变量，根据这一成员变量的不同值，可以区分不同的 PC 机对象。</p>\n<h3 id=\"4、-like-a-是什么\"><a href=\"#4、-like-a-是什么\" class=\"headerlink\" title=\"4、 like-a 是什么\"></a>4、 like-a 是什么</h3><p>like-a，顾名思义，像一个，代表组合关系。<br>如果 A like a B，那么 B 就是 A 的接口。<br>新类型有老类型的接口，但还包含其他函数，所以不能说它们完全相同。<br>例如一台手机可以说是一个微型计算机，但是手机的通讯功能显然不是计算机具备的行为，所以手机继承了计算机的特性，同时需要实现通讯功能，而通讯功能需要作为单独接口，而不是计算机的行为。</p>\n<h3 id=\"5、is-a，has-a，like-a-如何应用\"><a href=\"#5、is-a，has-a，like-a-如何应用\" class=\"headerlink\" title=\"5、is-a，has-a，like-a 如何应用\"></a>5、is-a，has-a，like-a 如何应用</h3><p>如果你确定两件对象之间是 is-a 的关系，那么此时你应该使用继承；比如菱形、圆形和方形都是形状的一种，那么他们都应该从形状类继承。<br>如果你确定两件对象之间是 has-a 的关系，那么此时你应该使用聚合；比如电脑是由显示器、CPU、硬盘等组成的，那么你应该把显示器、CPU、硬盘这些类聚合成电脑类。<br>如果你确定两件对象之间是 like-a 的关系，那么此时你应该使用组合；比如空调继承于制冷机，但它同时有加热功能，那么你应该把让空调继承制冷机类，并实现加热接口。</p>\n"},{"title":"Nginx配置TCP代理指南","date":"2024-12-19T01:56:33.000Z","updated":"2024-12-20T06:29:51.000Z","excerpt":"本指南介绍了如何使用Nginx配置TCP代理，以实现高性能的负载均衡和反向代理。主要步骤包括：\n\n1. **安装Nginx**：确保系统已安装Nginx，可通过官方网站或包管理器获取。\n2. **编辑Nginx配置文件**：在`/etc/nginx/nginx.conf`中添加`stream`块，配置`upstream`和`server`，将请求转发到后端服务器。\n3. **重新加载配置**：使用`sudo nginx -s reload`命令使配置生效。\n4. **验证代理设置**：通过`telnet`等工具测试代理是否正常工作。\n5. **监控和调整配置**：定期监控Nginx性能，根据负载情况进行调整。\n\n通过这些步骤，您可以在环境中配置Nginx，实现高效的TCP代理服务。","comments":1,"toc":true,"abbrlink":13896,"_content":"\n# Nginx配置TCP代理指南\n\n# Nginx配置TCP代理指南\n\n使用Nginx作为TCP代理是一种有效的方式，可以实现高性能的负载均衡和反向代理。本篇指南将介绍如何配置Nginx以用作TCP代理。\n\n## 步骤1：安装Nginx\n\n---\n\n首先，确保您的系统已经安装了Nginx。您可以从Nginx官方网站或适用于您的操作系统的软件包管理器中获取Nginx。\n\n## 步骤2：编辑Nginx配置文件\n\n---\n\n默认情况下，Nginx的主配置文件位于/etc/nginx/nginx.conf。在继续之前，请备份此文件，并确保具有root权限。\n\n使用文本编辑器打开nginx.conf文件，并进行以下配置更改：\n\n* 在http块之后，添加一个新的stream块：\n\n```\nstream {\n    # 配置项添加在这里\n}\n```\n\n* 在stream块内，添加upstream和server配置。例如，以下配置将将请求转发到两个后端服务器，端口分别为192.168.1.10:8080和192.168.1.11:8080：\n\n```\nstream {\n    upstream my_backend_servers {\n        server 192.168.1.10:8080;\n        server 192.168.1.11:8080;\n    }\n\n    server {\n        listen 80;\n        proxy_pass my_backend_servers;\n    }\n}\n```\n\n* 根据您的需求，可以根据需要添加更多的upstream和server块。\n\n## 步骤3：重新加载配置\n\n---\n\n保存并关闭配置文件后，使用以下命令重新加载Nginx配置：\n\n```\nsudo nginx -s reload\n```\n\n## 步骤4：验证代理设置\n\n---\n\n现在，您的Nginx已配置为TCP代理。您可以使用telnet工具或其他任何适合您需求的工具来验证代理是否正常工作。\n\n例如，您可以使用以下命令将请求发送到Nginx代理服务器：\n\n```\ntelnet localhost 80\n```\n\n根据您的实际配置，您可能需要更改\"localhost\"为相应的IP地址和端口号。\n\n## 步骤5：监控和调整配置\n\n---\n\n建议您定期监控Nginx的性能，并根据负载情况进行必要的调整。您可以使用Nginx的日志文件、监控工具和系统性能工具来跟踪Nginx的表现并作出相应的改进。\n\n这就是使用Nginx作为TCP代理的简单指南。通过按照上述步骤，在您的环境中配置Nginx，您可以实现高效的TCP代理服务。\n","source":"_posts/nginx-configuration-tcp-agency-guide-kqsal.md","raw":"---\ntitle: Nginx配置TCP代理指南\ndate: '2024-12-19 09:56:33'\nupdated: '2024-12-20 14:29:51'\nexcerpt: >-\n  本指南介绍了如何使用Nginx配置TCP代理，以实现高性能的负载均衡和反向代理。主要步骤包括：\n\n\n  1. **安装Nginx**：确保系统已安装Nginx，可通过官方网站或包管理器获取。\n\n  2.\n  **编辑Nginx配置文件**：在`/etc/nginx/nginx.conf`中添加`stream`块，配置`upstream`和`server`，将请求转发到后端服务器。\n\n  3. **重新加载配置**：使用`sudo nginx -s reload`命令使配置生效。\n\n  4. **验证代理设置**：通过`telnet`等工具测试代理是否正常工作。\n\n  5. **监控和调整配置**：定期监控Nginx性能，根据负载情况进行调整。\n\n\n  通过这些步骤，您可以在环境中配置Nginx，实现高效的TCP代理服务。\ntags:\n  - nginx\n  - tcp代理\n  - 配置指南\n  - 负载均衡\n  - 性能监控\ncategories:\n  - 网络配置\n  - 性能监控\n  - 负载均衡\npermalink: /post/nginx-configuration-tcp-agency-guide-kqsal.html\ncomments: true\ntoc: true\nabbrlink: 13896\n---\n\n# Nginx配置TCP代理指南\n\n# Nginx配置TCP代理指南\n\n使用Nginx作为TCP代理是一种有效的方式，可以实现高性能的负载均衡和反向代理。本篇指南将介绍如何配置Nginx以用作TCP代理。\n\n## 步骤1：安装Nginx\n\n---\n\n首先，确保您的系统已经安装了Nginx。您可以从Nginx官方网站或适用于您的操作系统的软件包管理器中获取Nginx。\n\n## 步骤2：编辑Nginx配置文件\n\n---\n\n默认情况下，Nginx的主配置文件位于/etc/nginx/nginx.conf。在继续之前，请备份此文件，并确保具有root权限。\n\n使用文本编辑器打开nginx.conf文件，并进行以下配置更改：\n\n* 在http块之后，添加一个新的stream块：\n\n```\nstream {\n    # 配置项添加在这里\n}\n```\n\n* 在stream块内，添加upstream和server配置。例如，以下配置将将请求转发到两个后端服务器，端口分别为192.168.1.10:8080和192.168.1.11:8080：\n\n```\nstream {\n    upstream my_backend_servers {\n        server 192.168.1.10:8080;\n        server 192.168.1.11:8080;\n    }\n\n    server {\n        listen 80;\n        proxy_pass my_backend_servers;\n    }\n}\n```\n\n* 根据您的需求，可以根据需要添加更多的upstream和server块。\n\n## 步骤3：重新加载配置\n\n---\n\n保存并关闭配置文件后，使用以下命令重新加载Nginx配置：\n\n```\nsudo nginx -s reload\n```\n\n## 步骤4：验证代理设置\n\n---\n\n现在，您的Nginx已配置为TCP代理。您可以使用telnet工具或其他任何适合您需求的工具来验证代理是否正常工作。\n\n例如，您可以使用以下命令将请求发送到Nginx代理服务器：\n\n```\ntelnet localhost 80\n```\n\n根据您的实际配置，您可能需要更改\"localhost\"为相应的IP地址和端口号。\n\n## 步骤5：监控和调整配置\n\n---\n\n建议您定期监控Nginx的性能，并根据负载情况进行必要的调整。您可以使用Nginx的日志文件、监控工具和系统性能工具来跟踪Nginx的表现并作出相应的改进。\n\n这就是使用Nginx作为TCP代理的简单指南。通过按照上述步骤，在您的环境中配置Nginx，您可以实现高效的TCP代理服务。\n","slug":"nginx-configuration-tcp-agency-guide-kqsal","published":1,"__permalink":"/post/nginx-configuration-tcp-agency-guide-kqsal.html","_id":"cm4zhl9aw000bn1bm7xaz5i2s","layout":"post","photos":[],"content":"<h1 id=\"Nginx配置TCP代理指南\"><a href=\"#Nginx配置TCP代理指南\" class=\"headerlink\" title=\"Nginx配置TCP代理指南\"></a>Nginx配置TCP代理指南</h1><h1 id=\"Nginx配置TCP代理指南-1\"><a href=\"#Nginx配置TCP代理指南-1\" class=\"headerlink\" title=\"Nginx配置TCP代理指南\"></a>Nginx配置TCP代理指南</h1><p>使用Nginx作为TCP代理是一种有效的方式，可以实现高性能的负载均衡和反向代理。本篇指南将介绍如何配置Nginx以用作TCP代理。</p>\n<h2 id=\"步骤1：安装Nginx\"><a href=\"#步骤1：安装Nginx\" class=\"headerlink\" title=\"步骤1：安装Nginx\"></a>步骤1：安装Nginx</h2><hr>\n<p>首先，确保您的系统已经安装了Nginx。您可以从Nginx官方网站或适用于您的操作系统的软件包管理器中获取Nginx。</p>\n<h2 id=\"步骤2：编辑Nginx配置文件\"><a href=\"#步骤2：编辑Nginx配置文件\" class=\"headerlink\" title=\"步骤2：编辑Nginx配置文件\"></a>步骤2：编辑Nginx配置文件</h2><hr>\n<p>默认情况下，Nginx的主配置文件位于&#x2F;etc&#x2F;nginx&#x2F;nginx.conf。在继续之前，请备份此文件，并确保具有root权限。</p>\n<p>使用文本编辑器打开nginx.conf文件，并进行以下配置更改：</p>\n<ul>\n<li>在http块之后，添加一个新的stream块：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream &#123;</span><br><span class=\"line\">    # 配置项添加在这里</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在stream块内，添加upstream和server配置。例如，以下配置将将请求转发到两个后端服务器，端口分别为192.168.1.10:8080和192.168.1.11:8080：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream &#123;</span><br><span class=\"line\">    upstream my_backend_servers &#123;</span><br><span class=\"line\">        server 192.168.1.10:8080;</span><br><span class=\"line\">        server 192.168.1.11:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        proxy_pass my_backend_servers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据您的需求，可以根据需要添加更多的upstream和server块。</li>\n</ul>\n<h2 id=\"步骤3：重新加载配置\"><a href=\"#步骤3：重新加载配置\" class=\"headerlink\" title=\"步骤3：重新加载配置\"></a>步骤3：重新加载配置</h2><hr>\n<p>保存并关闭配置文件后，使用以下命令重新加载Nginx配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"步骤4：验证代理设置\"><a href=\"#步骤4：验证代理设置\" class=\"headerlink\" title=\"步骤4：验证代理设置\"></a>步骤4：验证代理设置</h2><hr>\n<p>现在，您的Nginx已配置为TCP代理。您可以使用telnet工具或其他任何适合您需求的工具来验证代理是否正常工作。</p>\n<p>例如，您可以使用以下命令将请求发送到Nginx代理服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet localhost 80</span><br></pre></td></tr></table></figure>\n\n<p>根据您的实际配置，您可能需要更改”localhost”为相应的IP地址和端口号。</p>\n<h2 id=\"步骤5：监控和调整配置\"><a href=\"#步骤5：监控和调整配置\" class=\"headerlink\" title=\"步骤5：监控和调整配置\"></a>步骤5：监控和调整配置</h2><hr>\n<p>建议您定期监控Nginx的性能，并根据负载情况进行必要的调整。您可以使用Nginx的日志文件、监控工具和系统性能工具来跟踪Nginx的表现并作出相应的改进。</p>\n<p>这就是使用Nginx作为TCP代理的简单指南。通过按照上述步骤，在您的环境中配置Nginx，您可以实现高效的TCP代理服务。</p>\n","cover":false,"more":"<h1 id=\"Nginx配置TCP代理指南\"><a href=\"#Nginx配置TCP代理指南\" class=\"headerlink\" title=\"Nginx配置TCP代理指南\"></a>Nginx配置TCP代理指南</h1><h1 id=\"Nginx配置TCP代理指南-1\"><a href=\"#Nginx配置TCP代理指南-1\" class=\"headerlink\" title=\"Nginx配置TCP代理指南\"></a>Nginx配置TCP代理指南</h1><p>使用Nginx作为TCP代理是一种有效的方式，可以实现高性能的负载均衡和反向代理。本篇指南将介绍如何配置Nginx以用作TCP代理。</p>\n<h2 id=\"步骤1：安装Nginx\"><a href=\"#步骤1：安装Nginx\" class=\"headerlink\" title=\"步骤1：安装Nginx\"></a>步骤1：安装Nginx</h2><hr>\n<p>首先，确保您的系统已经安装了Nginx。您可以从Nginx官方网站或适用于您的操作系统的软件包管理器中获取Nginx。</p>\n<h2 id=\"步骤2：编辑Nginx配置文件\"><a href=\"#步骤2：编辑Nginx配置文件\" class=\"headerlink\" title=\"步骤2：编辑Nginx配置文件\"></a>步骤2：编辑Nginx配置文件</h2><hr>\n<p>默认情况下，Nginx的主配置文件位于&#x2F;etc&#x2F;nginx&#x2F;nginx.conf。在继续之前，请备份此文件，并确保具有root权限。</p>\n<p>使用文本编辑器打开nginx.conf文件，并进行以下配置更改：</p>\n<ul>\n<li>在http块之后，添加一个新的stream块：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream &#123;</span><br><span class=\"line\">    # 配置项添加在这里</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在stream块内，添加upstream和server配置。例如，以下配置将将请求转发到两个后端服务器，端口分别为192.168.1.10:8080和192.168.1.11:8080：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream &#123;</span><br><span class=\"line\">    upstream my_backend_servers &#123;</span><br><span class=\"line\">        server 192.168.1.10:8080;</span><br><span class=\"line\">        server 192.168.1.11:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        proxy_pass my_backend_servers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据您的需求，可以根据需要添加更多的upstream和server块。</li>\n</ul>\n<h2 id=\"步骤3：重新加载配置\"><a href=\"#步骤3：重新加载配置\" class=\"headerlink\" title=\"步骤3：重新加载配置\"></a>步骤3：重新加载配置</h2><hr>\n<p>保存并关闭配置文件后，使用以下命令重新加载Nginx配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"步骤4：验证代理设置\"><a href=\"#步骤4：验证代理设置\" class=\"headerlink\" title=\"步骤4：验证代理设置\"></a>步骤4：验证代理设置</h2><hr>\n<p>现在，您的Nginx已配置为TCP代理。您可以使用telnet工具或其他任何适合您需求的工具来验证代理是否正常工作。</p>\n<p>例如，您可以使用以下命令将请求发送到Nginx代理服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet localhost 80</span><br></pre></td></tr></table></figure>\n\n<p>根据您的实际配置，您可能需要更改”localhost”为相应的IP地址和端口号。</p>\n<h2 id=\"步骤5：监控和调整配置\"><a href=\"#步骤5：监控和调整配置\" class=\"headerlink\" title=\"步骤5：监控和调整配置\"></a>步骤5：监控和调整配置</h2><hr>\n<p>建议您定期监控Nginx的性能，并根据负载情况进行必要的调整。您可以使用Nginx的日志文件、监控工具和系统性能工具来跟踪Nginx的表现并作出相应的改进。</p>\n<p>这就是使用Nginx作为TCP代理的简单指南。通过按照上述步骤，在您的环境中配置Nginx，您可以实现高效的TCP代理服务。</p>\n"},{"title":"spring事务操作后进行异步操作","date":"2025-02-28T06:40:25.000Z","updated":"2025-02-28T06:45:28.000Z","excerpt":"本文讨论了在Spring开发中，如何解决事务操作后进行异步操作时可能出现的数据同步问题。当事务操作未完成时，异步操作可能无法获取到最新的数据库记录。文章提出了两种解决方案：  \n1. **方案一**：将异步操作放在事务操作方法之外调用，例如在控制器中分别调用事务方法和异步方法。但这种方法逻辑上不够清晰，可能给后续维护带来困难。  \n2. **方案二**：使用Spring的`TransactionSynchronizationManager`，通过注册事务同步回调，在事务提交成功后执行异步操作。此方案通过在`afterCommit`中调用异步方法，确保异步操作在事务提交后执行，避免了数据未同步的问题。需要注意的是，如果事务回滚，则不会执行`afterCommit`中的逻辑。","comments":1,"toc":true,"abbrlink":52682,"_content":"\n# spring事务操作后进行异步操作\n\n\t开发中有很多需要事务 A 操作后进行异步 B 操作, 如发送 mq, 或者开线程做其他事情. 有一部分的异步操作需要查询当前事务方法的保存 / 修改数据. 所以, 如果直接在事务方法中调用异步方法的话, 如果异步方法的逻辑查询对应的数据库记录时, 还没有刷到数据库, 那就会获取不到最新值\n\n解决方法\n\n方案一: 调用异步的方法不要写在 A 操作的方法中, 如下伪代码\n\n```JAVA\n@RequestMapping(\"doWork\")\n@ResponseBody\npublic String doWork(){\n    doWorkA();//事务操作\n    doWorkB(); //异步操作 \n}\n```\n\n但是这样并不友好, 因为逻辑上这两个操作应该是一起的, 以后维护的程序猿可能不知道这个.\n\n方案二: 使用spring的 TransactionSynchronizationManager 来保证在当前事务提交成功后执行异步操作\n\n```JAVA\n@Transactional\npublic String doWorkA(){\n    saveOrUpdate();//业务逻辑\n    TransactionSynchronizationManager.registerSynchronization(new      TransactionSynchronizationAdapter() {\n                @Override\n                public void afterCommit() {\n                    doWorkB();//异步操作\n                }\n            });\n}\n```\n\n另外注意的是, 如果前面的业务逻辑发送错误导致回滚, 不会执行 afterCommit 内的方法。\n\n‍\n","source":"_posts/asynchronous-operation-after-spring-transaction-operation-z1rhawf.md","raw":"---\ntitle: spring事务操作后进行异步操作\ndate: '2025-02-28 14:40:25'\nupdated: '2025-02-28 14:45:28'\nexcerpt: >-\n  本文讨论了在Spring开发中，如何解决事务操作后进行异步操作时可能出现的数据同步问题。当事务操作未完成时，异步操作可能无法获取到最新的数据库记录。文章提出了两种解决方案：  \n\n  1. **方案一**：将异步操作放在事务操作方法之外调用，例如在控制器中分别调用事务方法和异步方法。但这种方法逻辑上不够清晰，可能给后续维护带来困难。  \n\n  2.\n  **方案二**：使用Spring的`TransactionSynchronizationManager`，通过注册事务同步回调，在事务提交成功后执行异步操作。此方案通过在`afterCommit`中调用异步方法，确保异步操作在事务提交后执行，避免了数据未同步的问题。需要注意的是，如果事务回滚，则不会执行`afterCommit`中的逻辑。\ntags:\n  - spring事务\n  - 异步操作\n  - 事务提交\n  - 编程技巧\n  - java开发\ncategories:\n  - 事务管理\n  - 异步操作\n  - Spring框架\npermalink: /post/asynchronous-operation-after-spring-transaction-operation-z1rhawf.html\ncomments: true\ntoc: true\nabbrlink: 52682\n---\n\n# spring事务操作后进行异步操作\n\n\t开发中有很多需要事务 A 操作后进行异步 B 操作, 如发送 mq, 或者开线程做其他事情. 有一部分的异步操作需要查询当前事务方法的保存 / 修改数据. 所以, 如果直接在事务方法中调用异步方法的话, 如果异步方法的逻辑查询对应的数据库记录时, 还没有刷到数据库, 那就会获取不到最新值\n\n解决方法\n\n方案一: 调用异步的方法不要写在 A 操作的方法中, 如下伪代码\n\n```JAVA\n@RequestMapping(\"doWork\")\n@ResponseBody\npublic String doWork(){\n    doWorkA();//事务操作\n    doWorkB(); //异步操作 \n}\n```\n\n但是这样并不友好, 因为逻辑上这两个操作应该是一起的, 以后维护的程序猿可能不知道这个.\n\n方案二: 使用spring的 TransactionSynchronizationManager 来保证在当前事务提交成功后执行异步操作\n\n```JAVA\n@Transactional\npublic String doWorkA(){\n    saveOrUpdate();//业务逻辑\n    TransactionSynchronizationManager.registerSynchronization(new      TransactionSynchronizationAdapter() {\n                @Override\n                public void afterCommit() {\n                    doWorkB();//异步操作\n                }\n            });\n}\n```\n\n另外注意的是, 如果前面的业务逻辑发送错误导致回滚, 不会执行 afterCommit 内的方法。\n\n‍\n","slug":"asynchronous-operation-after-spring-transaction-operation-z1rhawf","published":1,"__permalink":"/post/asynchronous-operation-after-spring-transaction-operation-z1rhawf.html","_id":"cmck5581n0000ssvwgej52cq4","layout":"post","photos":[],"content":"<h1 id=\"spring事务操作后进行异步操作\"><a href=\"#spring事务操作后进行异步操作\" class=\"headerlink\" title=\"spring事务操作后进行异步操作\"></a>spring事务操作后进行异步操作</h1><pre><code>开发中有很多需要事务 A 操作后进行异步 B 操作, 如发送 mq, 或者开线程做其他事情. 有一部分的异步操作需要查询当前事务方法的保存 / 修改数据. 所以, 如果直接在事务方法中调用异步方法的话, 如果异步方法的逻辑查询对应的数据库记录时, 还没有刷到数据库, 那就会获取不到最新值\n</code></pre>\n<p>解决方法</p>\n<p>方案一: 调用异步的方法不要写在 A 操作的方法中, 如下伪代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;doWork&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">doWork</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    doWorkA();<span class=\"comment\">//事务操作</span></span><br><span class=\"line\">    doWorkB(); <span class=\"comment\">//异步操作 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是这样并不友好, 因为逻辑上这两个操作应该是一起的, 以后维护的程序猿可能不知道这个.</p>\n<p>方案二: 使用spring的 TransactionSynchronizationManager 来保证在当前事务提交成功后执行异步操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">doWorkA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    saveOrUpdate();<span class=\"comment\">//业务逻辑</span></span><br><span class=\"line\">    TransactionSynchronizationManager.registerSynchronization(<span class=\"keyword\">new</span>      <span class=\"title class_\">TransactionSynchronizationAdapter</span>() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCommit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    doWorkB();<span class=\"comment\">//异步操作</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外注意的是, 如果前面的业务逻辑发送错误导致回滚, 不会执行 afterCommit 内的方法。</p>\n<p>‍</p>\n","cover":false,"more":"<h1 id=\"spring事务操作后进行异步操作\"><a href=\"#spring事务操作后进行异步操作\" class=\"headerlink\" title=\"spring事务操作后进行异步操作\"></a>spring事务操作后进行异步操作</h1><pre><code>开发中有很多需要事务 A 操作后进行异步 B 操作, 如发送 mq, 或者开线程做其他事情. 有一部分的异步操作需要查询当前事务方法的保存 / 修改数据. 所以, 如果直接在事务方法中调用异步方法的话, 如果异步方法的逻辑查询对应的数据库记录时, 还没有刷到数据库, 那就会获取不到最新值\n</code></pre>\n<p>解决方法</p>\n<p>方案一: 调用异步的方法不要写在 A 操作的方法中, 如下伪代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;doWork&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">doWork</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    doWorkA();<span class=\"comment\">//事务操作</span></span><br><span class=\"line\">    doWorkB(); <span class=\"comment\">//异步操作 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是这样并不友好, 因为逻辑上这两个操作应该是一起的, 以后维护的程序猿可能不知道这个.</p>\n<p>方案二: 使用spring的 TransactionSynchronizationManager 来保证在当前事务提交成功后执行异步操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">doWorkA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    saveOrUpdate();<span class=\"comment\">//业务逻辑</span></span><br><span class=\"line\">    TransactionSynchronizationManager.registerSynchronization(<span class=\"keyword\">new</span>      <span class=\"title class_\">TransactionSynchronizationAdapter</span>() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCommit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    doWorkB();<span class=\"comment\">//异步操作</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外注意的是, 如果前面的业务逻辑发送错误导致回滚, 不会执行 afterCommit 内的方法。</p>\n<p>‍</p>\n"},{"title":"详解计算机状态：从待机到休眠的五种模式","date":"2024-12-19T01:57:31.000Z","updated":"2024-12-23T01:55:33.000Z","excerpt":"这篇文章详细介绍了计算机的五种状态：S1待机、S2电源待机、S3挂起到内存、S4挂起到硬盘和S5关机。S1和S2状态类似，都是低电源供应状态，但S2更为彻底。S3状态将内存数据保持不变，其他设备停止供电，恢复时快速回到原状态。S4状态将内存数据保存到硬盘，适合长时间离线，恢复时数据不会丢失。S5状态则是完全关机，功耗为0。这些状态有助于节能和管理计算机运行。","comments":1,"toc":true,"abbrlink":61463,"_content":"\n# 详解计算机状态：从待机到休眠的五种模式\n\n# 计算机状态\n\n* **S1**\n\n　Standby。即指说系统处于低电源供应状态，在 windows or BIOS 中可设定屏幕信号输出关闭、硬盘停止运转进入待机状态、电源灯处于闪烁状态。此时动一动鼠标、按键盘任一键均可叫醒电脑。\n\n* **S2**\n\n　　Power Standby。和 S1 几乎是一样的。即是把 windows 当前存在内存中的所有资料保存不动，然后进入“假关机”。此时除了内存需要电源来保持资料以外，其它的设备，装置全部停止供电。也就是说，理论上可以把CPU，PCI卡，AGP Device拿掉又插回去，电脑也可能正常完成开机及运作，只要不动到内存和电源的部份。这时只剩下电源灯一闪一闪的，其它和关机没什么两样。（电源供应器的风扇也停止运转）重新开机后，电脑只是把内存的资料完整性确认后，即立刻会回到你进S3前的画面。记得有人试过，在刻录中启动S3，CDRW还会自动启动Just-Link，等你回复后它又自动继续刻录（没实际试过）。\n\n* **S3**\n\n　　Suspend to RAM。即是把 windows 当前存在内存中的所有资料保存不动，然后进入“假关机”。此时除了内存需要电源来保持资料以外，其它的设备，装置全部停止供电。也就是说，理论上可以把CPU，PCI卡，AGP Device拿掉又插回去，电脑也可能正常完成开机及运作，只要不动到内存和电源的部份。这时只剩下电源灯一闪一闪的，其它和关机没什么两样。（电源供应器的风扇也停止运转）重新开机后，电脑只是把内存的资料完整性确认后，即立刻会回到你进S3前的画面。记得有人试过，在刻录中启动S3，CDRW还会自动启动Just-Link，等你回复后它又自动继续刻录（没实际试过）。在BIOS中叫做\"挂到内存 \" (Suspend to RAM/STR)，在Windows XP 以后的Windows 版本和一些Linux 发行版中叫做\"待机 (Standby)\"，在Windows Vista 和Mac OS X 则叫做\"睡眠(Sleep)\"，虽然ACPI规范仅仅提到术语\"S3\"和\"睡眠(Sleep)\"。在这个状态下，主存储器(RAM )仍然有电源供给，尽管它也是几乎唯一的有电源供给的原件。因为操作系统 、所有应用程序和被打开的文档等等的状态都是保存在主存储器中，用户可以把工作恢复到正好上次他们保持的状态-计算机从S3状态回来时主存储器的内容和它进入S3状态时候的内容是相同象的。(规范中提到了S3和S2是相当类似的，只有更多的组件在S3状态下会被关掉电源。) 相比较S4来说S3有两个好处；计算机恢复的过程比重启要快，第二，如果任何正在运行的应用程序(被打开的文档等等)有私有信息在里面，这些信息是不会被写到硬盘上的。然而，在系统不能被唤醒比如遇到了电源故障的时候， 高速缓冲存储器 可能会被flushed来防止数据毁坏。\n\n* **S4**\n\n　　Suspend to Disk。即是把 windows 内存中的资料完整的保存在硬盘中，等开机时就直接从保存这些资料的地方直接完整的读到内存中，不需要跑一堆应用程序。使用这种模式，硬盘一定要腾出一个完整的连续空间。WinME/2000/XP 在电源管理中休眠的作用就是这个 。在启动后，C:下会看到一个和你电脑现有内存大小一样的文件。在Windows 中叫休眠 ，在Mac OS X 中叫作安全睡眠 ，也称为挂到硬盘 ，虽然ACPI规范中只提到了一个术语S4 （main article:Hibernate(OS feature) )。在这个状态下，所有主存储器 的内容被储存在非挥发性存储器，例如硬盘 ，保护操作系统当前的状态，包括所有应用程序,打开的文档等.这意味着从S4恢复后，用户可以恢复到原本的工作状态，采用的方法和S3是一样的。S4和S3之间的差异是，除了把主存储器中的内容移进移出所消耗的时间以外,在S3状态下的时候如果一旦停电了,所有主存储器上的数据就会丢失,包括所有的没有保存的文档,而在S4状态下则没有影响.S4和其他的S 状态有很大不同,事实上更类似G2Soft Off 状态和G3 Mechanical Off 状态,而不是S1-S3.在S4状态下的系统同样可进入G3(Mechanical Off )状态,并且保留S4时候的状态信息.所以它可以恢复到以前的运行状态在关掉电源之后.\n\n* **S5**\n\n　　Shutdown。功耗为0。S\n","source":"_posts/computer-status-2pq0or.md","raw":"---\ntitle: 详解计算机状态：从待机到休眠的五种模式\ndate: '2024-12-19 09:57:31'\nupdated: '2024-12-23 09:55:33'\nexcerpt: >-\n  这篇文章详细介绍了计算机的五种状态：S1待机、S2电源待机、S3挂起到内存、S4挂起到硬盘和S5关机。S1和S2状态类似，都是低电源供应状态，但S2更为彻底。S3状态将内存数据保持不变，其他设备停止供电，恢复时快速回到原状态。S4状态将内存数据保存到硬盘，适合长时间离线，恢复时数据不会丢失。S5状态则是完全关机，功耗为0。这些状态有助于节能和管理计算机运行。\ntags:\n  - 计算机状态\n  - 电源管理\n  - S3睡眠\n  - S4休眠\ncategories:\n  - 系统休眠\npermalink: /post/computer-status-2pq0or.html\ncomments: true\ntoc: true\nabbrlink: 61463\n---\n\n# 详解计算机状态：从待机到休眠的五种模式\n\n# 计算机状态\n\n* **S1**\n\n　Standby。即指说系统处于低电源供应状态，在 windows or BIOS 中可设定屏幕信号输出关闭、硬盘停止运转进入待机状态、电源灯处于闪烁状态。此时动一动鼠标、按键盘任一键均可叫醒电脑。\n\n* **S2**\n\n　　Power Standby。和 S1 几乎是一样的。即是把 windows 当前存在内存中的所有资料保存不动，然后进入“假关机”。此时除了内存需要电源来保持资料以外，其它的设备，装置全部停止供电。也就是说，理论上可以把CPU，PCI卡，AGP Device拿掉又插回去，电脑也可能正常完成开机及运作，只要不动到内存和电源的部份。这时只剩下电源灯一闪一闪的，其它和关机没什么两样。（电源供应器的风扇也停止运转）重新开机后，电脑只是把内存的资料完整性确认后，即立刻会回到你进S3前的画面。记得有人试过，在刻录中启动S3，CDRW还会自动启动Just-Link，等你回复后它又自动继续刻录（没实际试过）。\n\n* **S3**\n\n　　Suspend to RAM。即是把 windows 当前存在内存中的所有资料保存不动，然后进入“假关机”。此时除了内存需要电源来保持资料以外，其它的设备，装置全部停止供电。也就是说，理论上可以把CPU，PCI卡，AGP Device拿掉又插回去，电脑也可能正常完成开机及运作，只要不动到内存和电源的部份。这时只剩下电源灯一闪一闪的，其它和关机没什么两样。（电源供应器的风扇也停止运转）重新开机后，电脑只是把内存的资料完整性确认后，即立刻会回到你进S3前的画面。记得有人试过，在刻录中启动S3，CDRW还会自动启动Just-Link，等你回复后它又自动继续刻录（没实际试过）。在BIOS中叫做\"挂到内存 \" (Suspend to RAM/STR)，在Windows XP 以后的Windows 版本和一些Linux 发行版中叫做\"待机 (Standby)\"，在Windows Vista 和Mac OS X 则叫做\"睡眠(Sleep)\"，虽然ACPI规范仅仅提到术语\"S3\"和\"睡眠(Sleep)\"。在这个状态下，主存储器(RAM )仍然有电源供给，尽管它也是几乎唯一的有电源供给的原件。因为操作系统 、所有应用程序和被打开的文档等等的状态都是保存在主存储器中，用户可以把工作恢复到正好上次他们保持的状态-计算机从S3状态回来时主存储器的内容和它进入S3状态时候的内容是相同象的。(规范中提到了S3和S2是相当类似的，只有更多的组件在S3状态下会被关掉电源。) 相比较S4来说S3有两个好处；计算机恢复的过程比重启要快，第二，如果任何正在运行的应用程序(被打开的文档等等)有私有信息在里面，这些信息是不会被写到硬盘上的。然而，在系统不能被唤醒比如遇到了电源故障的时候， 高速缓冲存储器 可能会被flushed来防止数据毁坏。\n\n* **S4**\n\n　　Suspend to Disk。即是把 windows 内存中的资料完整的保存在硬盘中，等开机时就直接从保存这些资料的地方直接完整的读到内存中，不需要跑一堆应用程序。使用这种模式，硬盘一定要腾出一个完整的连续空间。WinME/2000/XP 在电源管理中休眠的作用就是这个 。在启动后，C:下会看到一个和你电脑现有内存大小一样的文件。在Windows 中叫休眠 ，在Mac OS X 中叫作安全睡眠 ，也称为挂到硬盘 ，虽然ACPI规范中只提到了一个术语S4 （main article:Hibernate(OS feature) )。在这个状态下，所有主存储器 的内容被储存在非挥发性存储器，例如硬盘 ，保护操作系统当前的状态，包括所有应用程序,打开的文档等.这意味着从S4恢复后，用户可以恢复到原本的工作状态，采用的方法和S3是一样的。S4和S3之间的差异是，除了把主存储器中的内容移进移出所消耗的时间以外,在S3状态下的时候如果一旦停电了,所有主存储器上的数据就会丢失,包括所有的没有保存的文档,而在S4状态下则没有影响.S4和其他的S 状态有很大不同,事实上更类似G2Soft Off 状态和G3 Mechanical Off 状态,而不是S1-S3.在S4状态下的系统同样可进入G3(Mechanical Off )状态,并且保留S4时候的状态信息.所以它可以恢复到以前的运行状态在关掉电源之后.\n\n* **S5**\n\n　　Shutdown。功耗为0。S\n","slug":"computer-status-2pq0or","published":1,"__permalink":"/post/computer-status-2pq0or.html","_id":"cmck5581q0001ssvw7qpse4em","layout":"post","photos":[],"content":"<h1 id=\"详解计算机状态：从待机到休眠的五种模式\"><a href=\"#详解计算机状态：从待机到休眠的五种模式\" class=\"headerlink\" title=\"详解计算机状态：从待机到休眠的五种模式\"></a>详解计算机状态：从待机到休眠的五种模式</h1><h1 id=\"计算机状态\"><a href=\"#计算机状态\" class=\"headerlink\" title=\"计算机状态\"></a>计算机状态</h1><ul>\n<li><strong>S1</strong></li>\n</ul>\n<p>　Standby。即指说系统处于低电源供应状态，在 windows or BIOS 中可设定屏幕信号输出关闭、硬盘停止运转进入待机状态、电源灯处于闪烁状态。此时动一动鼠标、按键盘任一键均可叫醒电脑。</p>\n<ul>\n<li><strong>S2</strong></li>\n</ul>\n<p>　　Power Standby。和 S1 几乎是一样的。即是把 windows 当前存在内存中的所有资料保存不动，然后进入“假关机”。此时除了内存需要电源来保持资料以外，其它的设备，装置全部停止供电。也就是说，理论上可以把CPU，PCI卡，AGP Device拿掉又插回去，电脑也可能正常完成开机及运作，只要不动到内存和电源的部份。这时只剩下电源灯一闪一闪的，其它和关机没什么两样。（电源供应器的风扇也停止运转）重新开机后，电脑只是把内存的资料完整性确认后，即立刻会回到你进S3前的画面。记得有人试过，在刻录中启动S3，CDRW还会自动启动Just-Link，等你回复后它又自动继续刻录（没实际试过）。</p>\n<ul>\n<li><strong>S3</strong></li>\n</ul>\n<p>　　Suspend to RAM。即是把 windows 当前存在内存中的所有资料保存不动，然后进入“假关机”。此时除了内存需要电源来保持资料以外，其它的设备，装置全部停止供电。也就是说，理论上可以把CPU，PCI卡，AGP Device拿掉又插回去，电脑也可能正常完成开机及运作，只要不动到内存和电源的部份。这时只剩下电源灯一闪一闪的，其它和关机没什么两样。（电源供应器的风扇也停止运转）重新开机后，电脑只是把内存的资料完整性确认后，即立刻会回到你进S3前的画面。记得有人试过，在刻录中启动S3，CDRW还会自动启动Just-Link，等你回复后它又自动继续刻录（没实际试过）。在BIOS中叫做”挂到内存 “ (Suspend to RAM&#x2F;STR)，在Windows XP 以后的Windows 版本和一些Linux 发行版中叫做”待机 (Standby)”，在Windows Vista 和Mac OS X 则叫做”睡眠(Sleep)”，虽然ACPI规范仅仅提到术语”S3”和”睡眠(Sleep)”。在这个状态下，主存储器(RAM )仍然有电源供给，尽管它也是几乎唯一的有电源供给的原件。因为操作系统 、所有应用程序和被打开的文档等等的状态都是保存在主存储器中，用户可以把工作恢复到正好上次他们保持的状态-计算机从S3状态回来时主存储器的内容和它进入S3状态时候的内容是相同象的。(规范中提到了S3和S2是相当类似的，只有更多的组件在S3状态下会被关掉电源。) 相比较S4来说S3有两个好处；计算机恢复的过程比重启要快，第二，如果任何正在运行的应用程序(被打开的文档等等)有私有信息在里面，这些信息是不会被写到硬盘上的。然而，在系统不能被唤醒比如遇到了电源故障的时候， 高速缓冲存储器 可能会被flushed来防止数据毁坏。</p>\n<ul>\n<li><strong>S4</strong></li>\n</ul>\n<p>　　Suspend to Disk。即是把 windows 内存中的资料完整的保存在硬盘中，等开机时就直接从保存这些资料的地方直接完整的读到内存中，不需要跑一堆应用程序。使用这种模式，硬盘一定要腾出一个完整的连续空间。WinME&#x2F;2000&#x2F;XP 在电源管理中休眠的作用就是这个 。在启动后，C:下会看到一个和你电脑现有内存大小一样的文件。在Windows 中叫休眠 ，在Mac OS X 中叫作安全睡眠 ，也称为挂到硬盘 ，虽然ACPI规范中只提到了一个术语S4 （main article:Hibernate(OS feature) )。在这个状态下，所有主存储器 的内容被储存在非挥发性存储器，例如硬盘 ，保护操作系统当前的状态，包括所有应用程序,打开的文档等.这意味着从S4恢复后，用户可以恢复到原本的工作状态，采用的方法和S3是一样的。S4和S3之间的差异是，除了把主存储器中的内容移进移出所消耗的时间以外,在S3状态下的时候如果一旦停电了,所有主存储器上的数据就会丢失,包括所有的没有保存的文档,而在S4状态下则没有影响.S4和其他的S 状态有很大不同,事实上更类似G2Soft Off 状态和G3 Mechanical Off 状态,而不是S1-S3.在S4状态下的系统同样可进入G3(Mechanical Off )状态,并且保留S4时候的状态信息.所以它可以恢复到以前的运行状态在关掉电源之后.</p>\n<ul>\n<li><strong>S5</strong></li>\n</ul>\n<p>　　Shutdown。功耗为0。S</p>\n","cover":false,"more":"<h1 id=\"详解计算机状态：从待机到休眠的五种模式\"><a href=\"#详解计算机状态：从待机到休眠的五种模式\" class=\"headerlink\" title=\"详解计算机状态：从待机到休眠的五种模式\"></a>详解计算机状态：从待机到休眠的五种模式</h1><h1 id=\"计算机状态\"><a href=\"#计算机状态\" class=\"headerlink\" title=\"计算机状态\"></a>计算机状态</h1><ul>\n<li><strong>S1</strong></li>\n</ul>\n<p>　Standby。即指说系统处于低电源供应状态，在 windows or BIOS 中可设定屏幕信号输出关闭、硬盘停止运转进入待机状态、电源灯处于闪烁状态。此时动一动鼠标、按键盘任一键均可叫醒电脑。</p>\n<ul>\n<li><strong>S2</strong></li>\n</ul>\n<p>　　Power Standby。和 S1 几乎是一样的。即是把 windows 当前存在内存中的所有资料保存不动，然后进入“假关机”。此时除了内存需要电源来保持资料以外，其它的设备，装置全部停止供电。也就是说，理论上可以把CPU，PCI卡，AGP Device拿掉又插回去，电脑也可能正常完成开机及运作，只要不动到内存和电源的部份。这时只剩下电源灯一闪一闪的，其它和关机没什么两样。（电源供应器的风扇也停止运转）重新开机后，电脑只是把内存的资料完整性确认后，即立刻会回到你进S3前的画面。记得有人试过，在刻录中启动S3，CDRW还会自动启动Just-Link，等你回复后它又自动继续刻录（没实际试过）。</p>\n<ul>\n<li><strong>S3</strong></li>\n</ul>\n<p>　　Suspend to RAM。即是把 windows 当前存在内存中的所有资料保存不动，然后进入“假关机”。此时除了内存需要电源来保持资料以外，其它的设备，装置全部停止供电。也就是说，理论上可以把CPU，PCI卡，AGP Device拿掉又插回去，电脑也可能正常完成开机及运作，只要不动到内存和电源的部份。这时只剩下电源灯一闪一闪的，其它和关机没什么两样。（电源供应器的风扇也停止运转）重新开机后，电脑只是把内存的资料完整性确认后，即立刻会回到你进S3前的画面。记得有人试过，在刻录中启动S3，CDRW还会自动启动Just-Link，等你回复后它又自动继续刻录（没实际试过）。在BIOS中叫做”挂到内存 “ (Suspend to RAM&#x2F;STR)，在Windows XP 以后的Windows 版本和一些Linux 发行版中叫做”待机 (Standby)”，在Windows Vista 和Mac OS X 则叫做”睡眠(Sleep)”，虽然ACPI规范仅仅提到术语”S3”和”睡眠(Sleep)”。在这个状态下，主存储器(RAM )仍然有电源供给，尽管它也是几乎唯一的有电源供给的原件。因为操作系统 、所有应用程序和被打开的文档等等的状态都是保存在主存储器中，用户可以把工作恢复到正好上次他们保持的状态-计算机从S3状态回来时主存储器的内容和它进入S3状态时候的内容是相同象的。(规范中提到了S3和S2是相当类似的，只有更多的组件在S3状态下会被关掉电源。) 相比较S4来说S3有两个好处；计算机恢复的过程比重启要快，第二，如果任何正在运行的应用程序(被打开的文档等等)有私有信息在里面，这些信息是不会被写到硬盘上的。然而，在系统不能被唤醒比如遇到了电源故障的时候， 高速缓冲存储器 可能会被flushed来防止数据毁坏。</p>\n<ul>\n<li><strong>S4</strong></li>\n</ul>\n<p>　　Suspend to Disk。即是把 windows 内存中的资料完整的保存在硬盘中，等开机时就直接从保存这些资料的地方直接完整的读到内存中，不需要跑一堆应用程序。使用这种模式，硬盘一定要腾出一个完整的连续空间。WinME&#x2F;2000&#x2F;XP 在电源管理中休眠的作用就是这个 。在启动后，C:下会看到一个和你电脑现有内存大小一样的文件。在Windows 中叫休眠 ，在Mac OS X 中叫作安全睡眠 ，也称为挂到硬盘 ，虽然ACPI规范中只提到了一个术语S4 （main article:Hibernate(OS feature) )。在这个状态下，所有主存储器 的内容被储存在非挥发性存储器，例如硬盘 ，保护操作系统当前的状态，包括所有应用程序,打开的文档等.这意味着从S4恢复后，用户可以恢复到原本的工作状态，采用的方法和S3是一样的。S4和S3之间的差异是，除了把主存储器中的内容移进移出所消耗的时间以外,在S3状态下的时候如果一旦停电了,所有主存储器上的数据就会丢失,包括所有的没有保存的文档,而在S4状态下则没有影响.S4和其他的S 状态有很大不同,事实上更类似G2Soft Off 状态和G3 Mechanical Off 状态,而不是S1-S3.在S4状态下的系统同样可进入G3(Mechanical Off )状态,并且保留S4时候的状态信息.所以它可以恢复到以前的运行状态在关掉电源之后.</p>\n<ul>\n<li><strong>S5</strong></li>\n</ul>\n<p>　　Shutdown。功耗为0。S</p>\n"},{"title":"Java List 分片工具类","date":"2024-12-30T02:58:24.000Z","updated":"2024-12-30T03:01:28.000Z","excerpt":"本文介绍了如何使用Java将一个大List分片为多个小List，每个小List的大小为50。通过`subList`方法实现分片，具体步骤包括：确定原List大小、使用循环分组、获取子列表并复制到新ArrayList、处理边界情况等。代码示例展示了如何实现分组功能，并解释了关键点，如检查分组大小、处理边界情况等。注意事项包括`subList`返回的是动态视图、处理原List大小不能被整除的情况，以及多线程环境下的使用建议。该方法适用于需要将大List分组的场景。","comments":1,"toc":true,"abbrlink":14367,"_content":"\n# Java List 分片工具类\n\n为了将一个大的List分组为多个小的List，每个小List的大小为50，我们可以使用Java中的`subList`​方法来实现。以下是详细的实现步骤和代码示例：\n\n### 实现步骤\n\n1. **确定原List的大小**：获取原List的大小，以便确定需要分成多少个小组。\n2. **使用循环分组**：使用一个循环，每次取50个元素，直到处理完整个原List。\n3. **获取子列表并复制**：使用`subList`​方法获取子列表，并将其复制到一个新的ArrayList中，以避免与原List的关联。\n4. **将新的ArrayList加入到结果List中**：将包含50个元素的新ArrayList加入到结果List中。\n5. **处理边界情况**：确保循环的索引不会越界，避免`IndexOutOfBoundsException`​。\n\n### 代码示例\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ListGrouping {\n\n    public static <T> List<List<T>> groupList(List<T> originalList, int groupSize) {\n        if (groupSize <= 0) {\n            throw new IllegalArgumentException(\"Group size must be positive.\");\n        }\n        List<List<T>> result = new ArrayList<>();\n        int size = originalList.size();\n        for (int i = 0; i < size; i += groupSize) {\n            int endIndex = i + groupSize;\n            if (endIndex > size) {\n                endIndex = size;\n            }\n            List<T> sub = new ArrayList<>(originalList.subList(i, endIndex));\n            result.add(sub);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> original = new ArrayList<>();\n        for (int i = 1; i <= 10; i++) {\n            original.add(i);\n        }\n        List<List<Integer>> groups = groupList(original, 4);\n        System.out.println(groups); // 输出: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]\n    }\n}\n```\n\n### 代码解释\n\n* **groupList方法**：\n\n  * 检查分组大小`groupSize`​是否为正数，如果是非正数则抛出异常。\n  * 初始化结果List来存储分组后的子List。\n  * 使用循环遍历原List，每次取`groupSize`​个元素，创建新的ArrayList并加入结果List中。\n  * 处理边界情况，确保`endIndex`​不超过原List的大小。\n* **main方法**：\n\n  * 创建一个包含10个元素的原List。\n  * 调用`groupList`​方法将原List分组，每组4个元素。\n  * 打印分组结果。\n\n### 注意事项\n\n* **动态视图**：`subList`​返回的是原List的视图，直接使用可能影响原List的修改，因此需要复制到新的ArrayList中。\n* **边界情况**：处理原List大小不能被`groupSize`​整除的情况，确保最后一组包含剩余的所有元素。\n* **多线程环境**：如果在多线程环境下使用，确保原List在分组过程中不被修改，或者使用不可变的List。\n\n通过以上方法，可以有效地将一个大的List分组为多个小的List，每个小List的大小为指定的值，例如50。\n","source":"_posts/java-list-itzf4.md","raw":"---\ntitle: Java List 分片工具类\ndate: '2024-12-30 10:58:24'\nupdated: '2024-12-30 11:01:28'\nexcerpt: >-\n  本文介绍了如何使用Java将一个大List分片为多个小List，每个小List的大小为50。通过`subList`方法实现分片，具体步骤包括：确定原List大小、使用循环分组、获取子列表并复制到新ArrayList、处理边界情况等。代码示例展示了如何实现分组功能，并解释了关键点，如检查分组大小、处理边界情况等。注意事项包括`subList`返回的是动态视图、处理原List大小不能被整除的情况，以及多线程环境下的使用建议。该方法适用于需要将大List分组的场景。\ntags:\n  - Java\n  - List\n  - 分片\n  - 分组\n  - 工具类\ncategories:\n  - java\n  - 工具类\npermalink: /post/java-list-itzf4.html\ncomments: true\ntoc: true\nabbrlink: 14367\n---\n\n# Java List 分片工具类\n\n为了将一个大的List分组为多个小的List，每个小List的大小为50，我们可以使用Java中的`subList`​方法来实现。以下是详细的实现步骤和代码示例：\n\n### 实现步骤\n\n1. **确定原List的大小**：获取原List的大小，以便确定需要分成多少个小组。\n2. **使用循环分组**：使用一个循环，每次取50个元素，直到处理完整个原List。\n3. **获取子列表并复制**：使用`subList`​方法获取子列表，并将其复制到一个新的ArrayList中，以避免与原List的关联。\n4. **将新的ArrayList加入到结果List中**：将包含50个元素的新ArrayList加入到结果List中。\n5. **处理边界情况**：确保循环的索引不会越界，避免`IndexOutOfBoundsException`​。\n\n### 代码示例\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ListGrouping {\n\n    public static <T> List<List<T>> groupList(List<T> originalList, int groupSize) {\n        if (groupSize <= 0) {\n            throw new IllegalArgumentException(\"Group size must be positive.\");\n        }\n        List<List<T>> result = new ArrayList<>();\n        int size = originalList.size();\n        for (int i = 0; i < size; i += groupSize) {\n            int endIndex = i + groupSize;\n            if (endIndex > size) {\n                endIndex = size;\n            }\n            List<T> sub = new ArrayList<>(originalList.subList(i, endIndex));\n            result.add(sub);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> original = new ArrayList<>();\n        for (int i = 1; i <= 10; i++) {\n            original.add(i);\n        }\n        List<List<Integer>> groups = groupList(original, 4);\n        System.out.println(groups); // 输出: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]\n    }\n}\n```\n\n### 代码解释\n\n* **groupList方法**：\n\n  * 检查分组大小`groupSize`​是否为正数，如果是非正数则抛出异常。\n  * 初始化结果List来存储分组后的子List。\n  * 使用循环遍历原List，每次取`groupSize`​个元素，创建新的ArrayList并加入结果List中。\n  * 处理边界情况，确保`endIndex`​不超过原List的大小。\n* **main方法**：\n\n  * 创建一个包含10个元素的原List。\n  * 调用`groupList`​方法将原List分组，每组4个元素。\n  * 打印分组结果。\n\n### 注意事项\n\n* **动态视图**：`subList`​返回的是原List的视图，直接使用可能影响原List的修改，因此需要复制到新的ArrayList中。\n* **边界情况**：处理原List大小不能被`groupSize`​整除的情况，确保最后一组包含剩余的所有元素。\n* **多线程环境**：如果在多线程环境下使用，确保原List在分组过程中不被修改，或者使用不可变的List。\n\n通过以上方法，可以有效地将一个大的List分组为多个小的List，每个小List的大小为指定的值，例如50。\n","slug":"java-list-itzf4","published":1,"__permalink":"/post/java-list-itzf4.html","_id":"cmck5581y0004ssvwhiwhbry8","layout":"post","photos":[],"content":"<h1 id=\"Java-List-分片工具类\"><a href=\"#Java-List-分片工具类\" class=\"headerlink\" title=\"Java List 分片工具类\"></a>Java List 分片工具类</h1><p>为了将一个大的List分组为多个小的List，每个小List的大小为50，我们可以使用Java中的<code>subList</code>​方法来实现。以下是详细的实现步骤和代码示例：</p>\n<h3 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><ol>\n<li><strong>确定原List的大小</strong>：获取原List的大小，以便确定需要分成多少个小组。</li>\n<li><strong>使用循环分组</strong>：使用一个循环，每次取50个元素，直到处理完整个原List。</li>\n<li><strong>获取子列表并复制</strong>：使用<code>subList</code>​方法获取子列表，并将其复制到一个新的ArrayList中，以避免与原List的关联。</li>\n<li><strong>将新的ArrayList加入到结果List中</strong>：将包含50个元素的新ArrayList加入到结果List中。</li>\n<li><strong>处理边界情况</strong>：确保循环的索引不会越界，避免<code>IndexOutOfBoundsException</code>​。</li>\n</ol>\n<h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListGrouping</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; List&lt;List&lt;T&gt;&gt; <span class=\"title function_\">groupList</span><span class=\"params\">(List&lt;T&gt; originalList, <span class=\"type\">int</span> groupSize)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (groupSize &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Group size must be positive.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;List&lt;T&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> originalList.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i += groupSize) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">endIndex</span> <span class=\"operator\">=</span> i + groupSize;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (endIndex &gt; size) &#123;</span><br><span class=\"line\">                endIndex = size;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            List&lt;T&gt; sub = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(originalList.subList(i, endIndex));</span><br><span class=\"line\">            result.add(sub);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; original = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            original.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; groups = groupList(original, <span class=\"number\">4</span>);</span><br><span class=\"line\">        System.out.println(groups); <span class=\"comment\">// 输出: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h3><ul>\n<li><p><strong>groupList方法</strong>：</p>\n<ul>\n<li>检查分组大小<code>groupSize</code>​是否为正数，如果是非正数则抛出异常。</li>\n<li>初始化结果List来存储分组后的子List。</li>\n<li>使用循环遍历原List，每次取<code>groupSize</code>​个元素，创建新的ArrayList并加入结果List中。</li>\n<li>处理边界情况，确保<code>endIndex</code>​不超过原List的大小。</li>\n</ul>\n</li>\n<li><p><strong>main方法</strong>：</p>\n<ul>\n<li>创建一个包含10个元素的原List。</li>\n<li>调用<code>groupList</code>​方法将原List分组，每组4个元素。</li>\n<li>打印分组结果。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><strong>动态视图</strong>：<code>subList</code>​返回的是原List的视图，直接使用可能影响原List的修改，因此需要复制到新的ArrayList中。</li>\n<li><strong>边界情况</strong>：处理原List大小不能被<code>groupSize</code>​整除的情况，确保最后一组包含剩余的所有元素。</li>\n<li><strong>多线程环境</strong>：如果在多线程环境下使用，确保原List在分组过程中不被修改，或者使用不可变的List。</li>\n</ul>\n<p>通过以上方法，可以有效地将一个大的List分组为多个小的List，每个小List的大小为指定的值，例如50。</p>\n","cover":false,"more":"<h1 id=\"Java-List-分片工具类\"><a href=\"#Java-List-分片工具类\" class=\"headerlink\" title=\"Java List 分片工具类\"></a>Java List 分片工具类</h1><p>为了将一个大的List分组为多个小的List，每个小List的大小为50，我们可以使用Java中的<code>subList</code>​方法来实现。以下是详细的实现步骤和代码示例：</p>\n<h3 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><ol>\n<li><strong>确定原List的大小</strong>：获取原List的大小，以便确定需要分成多少个小组。</li>\n<li><strong>使用循环分组</strong>：使用一个循环，每次取50个元素，直到处理完整个原List。</li>\n<li><strong>获取子列表并复制</strong>：使用<code>subList</code>​方法获取子列表，并将其复制到一个新的ArrayList中，以避免与原List的关联。</li>\n<li><strong>将新的ArrayList加入到结果List中</strong>：将包含50个元素的新ArrayList加入到结果List中。</li>\n<li><strong>处理边界情况</strong>：确保循环的索引不会越界，避免<code>IndexOutOfBoundsException</code>​。</li>\n</ol>\n<h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListGrouping</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; List&lt;List&lt;T&gt;&gt; <span class=\"title function_\">groupList</span><span class=\"params\">(List&lt;T&gt; originalList, <span class=\"type\">int</span> groupSize)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (groupSize &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Group size must be positive.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;List&lt;T&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> originalList.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i += groupSize) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">endIndex</span> <span class=\"operator\">=</span> i + groupSize;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (endIndex &gt; size) &#123;</span><br><span class=\"line\">                endIndex = size;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            List&lt;T&gt; sub = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(originalList.subList(i, endIndex));</span><br><span class=\"line\">            result.add(sub);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; original = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            original.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; groups = groupList(original, <span class=\"number\">4</span>);</span><br><span class=\"line\">        System.out.println(groups); <span class=\"comment\">// 输出: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h3><ul>\n<li><p><strong>groupList方法</strong>：</p>\n<ul>\n<li>检查分组大小<code>groupSize</code>​是否为正数，如果是非正数则抛出异常。</li>\n<li>初始化结果List来存储分组后的子List。</li>\n<li>使用循环遍历原List，每次取<code>groupSize</code>​个元素，创建新的ArrayList并加入结果List中。</li>\n<li>处理边界情况，确保<code>endIndex</code>​不超过原List的大小。</li>\n</ul>\n</li>\n<li><p><strong>main方法</strong>：</p>\n<ul>\n<li>创建一个包含10个元素的原List。</li>\n<li>调用<code>groupList</code>​方法将原List分组，每组4个元素。</li>\n<li>打印分组结果。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><strong>动态视图</strong>：<code>subList</code>​返回的是原List的视图，直接使用可能影响原List的修改，因此需要复制到新的ArrayList中。</li>\n<li><strong>边界情况</strong>：处理原List大小不能被<code>groupSize</code>​整除的情况，确保最后一组包含剩余的所有元素。</li>\n<li><strong>多线程环境</strong>：如果在多线程环境下使用，确保原List在分组过程中不被修改，或者使用不可变的List。</li>\n</ul>\n<p>通过以上方法，可以有效地将一个大的List分组为多个小的List，每个小List的大小为指定的值，例如50。</p>\n"},{"title":"nginx 配置rtsp服务","date":"2024-12-27T01:25:55.000Z","updated":"2024-12-27T01:27:53.000Z","excerpt":"本文详细介绍了在Ubuntu系统上配置Nginx以提供RTSP服务的步骤。首先，安装编译工具和依赖包；其次，下载并编译Nginx及其rtsp模块；然后，在Nginx配置文件中添加RTSP服务器配置，并设置基本认证；接着，配置防火墙开放端口；最后，测试配置并使用VLC播放器测试RTSP服务。文章还提供了结合RTMP的高级配置示例，以供进一步扩展服务功能。","comments":1,"toc":true,"abbrlink":19461,"_content":"\n# nginx 配置rtsp服务\n\n配置 Nginx 提供 RTSP 服务涉及安装和编译第三方模块 nginx-rtsp-module，并进行相应的配置。以下是详细的步骤和配置示例：\n\n### 步骤 1: 安装依赖和工具\n\n在 Ubuntu 上，安装必要的编译工具和依赖包：\n\n```\nsudo apt-get update\nsudo apt-get install build-essential libpcre3-dev\n```\n\n### 步骤 2: 下载并编译 Nginx 及模块\n\n1. 克隆 nginx-rtsp-module 仓库：\n\n    ```\n    git clone https://github.com/arut/nginx-rtsp-module.git\n    ```\n2. 下载 Nginx 源码（使用稳定版本）：\n\n    ```\n    wget http://nginx.org/download/nginx-1.21.3.tar.gz\n    tar -zxvf nginx-1.21.3.tar.gz\n    cd nginx-1.21.3\n    ```\n3. 配置编译选项并加入 nginx-rtsp-module：\n\n    ```\n    ./configure --add-module=../nginx-rtsp-module\n    ```\n4. 编译并安装：\n\n    ```\n    make\n    sudo make install\n    ```\n\n### 步骤 3: 配置 Nginx\n\n在 Nginx 配置文件中添加 RTSP 服务器配置：\n\n```\nrtsp {\n    listen 8554;\n    server_name localhost;\n\n    auth_basic \"Restricted\";\n    auth_basic_user_file /etc/nginx/.htpasswd;\n\n    access_log /var/log/nginx/rtsp_access.log;\n    error_log /var/log/nginx/rtsp_error.log;\n\n    location / {\n        rtsp_server all;\n        rtsp_publish all;\n    }\n}\n```\n\n### 步骤 4: 设置基本认证\n\n生成密码文件：\n\n```\nsudo htpasswd -c /etc/nginx/.htpasswd username\n```\n\n### 步骤 5: 配置防火墙\n\n开放 8554 端口：\n\n```\nsudo ufw allow 8554/tcp\n```\n\n或\n\n```\nsudo firewall-cmd --add-port=8554/tcp --permanent\nsudo firewall-cmd --reload\n```\n\n### 步骤 6: 测试配置\n\n检查 Nginx 配置并重启服务：\n\n```\nsudo nginx -t\nsudo systemctl restart nginx\n```\n\n### 步骤 7: 测试 RTSP 服务\n\n使用 VLC 播放器测试连接：\n\n1. 打开 VLC，选择“媒体” -\\> “打开网络串流”。\n2. 输入 `rtsp://localhost:8554/test`​ 并播放。\n\n### 高级配置（可选）\n\n若需结合 RTMP 使用，可在配置中添加 RTMP 服务器：\n\n```\nrtsp {\n    listen 8554;\n    server_name localhost;\n\n    location /rtsp {\n        rtsp_server all;\n        rtsp_publish all;\n\n        rtmp {\n            server 127.0.0.1:1935;\n        }\n    }\n}\n\nhttp {\n    ...\n    rtmp {\n        server {\n            listen 1935;\n            chunk_size 4096;\n\n            application live {\n                live on;\n            }\n        }\n    }\n    ...\n}\n```\n\n### 总结\n\n通过以上步骤，你已成功配置 Nginx 以支持 RTSP 服务。根据具体需求，可以进一步配置认证、日志记录和流转发等功能。如遇问题，可通过查看日志文件进行调试和修正。\n","source":"_posts/nginx-configuration-rtsp-service-1p9fjr.md","raw":"---\ntitle: nginx 配置rtsp服务\ndate: '2024-12-27 09:25:55'\nupdated: '2024-12-27 09:27:53'\nexcerpt: >-\n  本文详细介绍了在Ubuntu系统上配置Nginx以提供RTSP服务的步骤。首先，安装编译工具和依赖包；其次，下载并编译Nginx及其rtsp模块；然后，在Nginx配置文件中添加RTSP服务器配置，并设置基本认证；接着，配置防火墙开放端口；最后，测试配置并使用VLC播放器测试RTSP服务。文章还提供了结合RTMP的高级配置示例，以供进一步扩展服务功能。\ntags:\n  - nginx\n  - rtsp\n  - 配置\n  - 流媒体\n  - 认证\ncategories:\n  - ' 配置指南'\n  - RTSP服务\n  - Nginx安装\npermalink: /post/nginx-configuration-rtsp-service-1p9fjr.html\ncomments: true\ntoc: true\nabbrlink: 19461\n---\n\n# nginx 配置rtsp服务\n\n配置 Nginx 提供 RTSP 服务涉及安装和编译第三方模块 nginx-rtsp-module，并进行相应的配置。以下是详细的步骤和配置示例：\n\n### 步骤 1: 安装依赖和工具\n\n在 Ubuntu 上，安装必要的编译工具和依赖包：\n\n```\nsudo apt-get update\nsudo apt-get install build-essential libpcre3-dev\n```\n\n### 步骤 2: 下载并编译 Nginx 及模块\n\n1. 克隆 nginx-rtsp-module 仓库：\n\n    ```\n    git clone https://github.com/arut/nginx-rtsp-module.git\n    ```\n2. 下载 Nginx 源码（使用稳定版本）：\n\n    ```\n    wget http://nginx.org/download/nginx-1.21.3.tar.gz\n    tar -zxvf nginx-1.21.3.tar.gz\n    cd nginx-1.21.3\n    ```\n3. 配置编译选项并加入 nginx-rtsp-module：\n\n    ```\n    ./configure --add-module=../nginx-rtsp-module\n    ```\n4. 编译并安装：\n\n    ```\n    make\n    sudo make install\n    ```\n\n### 步骤 3: 配置 Nginx\n\n在 Nginx 配置文件中添加 RTSP 服务器配置：\n\n```\nrtsp {\n    listen 8554;\n    server_name localhost;\n\n    auth_basic \"Restricted\";\n    auth_basic_user_file /etc/nginx/.htpasswd;\n\n    access_log /var/log/nginx/rtsp_access.log;\n    error_log /var/log/nginx/rtsp_error.log;\n\n    location / {\n        rtsp_server all;\n        rtsp_publish all;\n    }\n}\n```\n\n### 步骤 4: 设置基本认证\n\n生成密码文件：\n\n```\nsudo htpasswd -c /etc/nginx/.htpasswd username\n```\n\n### 步骤 5: 配置防火墙\n\n开放 8554 端口：\n\n```\nsudo ufw allow 8554/tcp\n```\n\n或\n\n```\nsudo firewall-cmd --add-port=8554/tcp --permanent\nsudo firewall-cmd --reload\n```\n\n### 步骤 6: 测试配置\n\n检查 Nginx 配置并重启服务：\n\n```\nsudo nginx -t\nsudo systemctl restart nginx\n```\n\n### 步骤 7: 测试 RTSP 服务\n\n使用 VLC 播放器测试连接：\n\n1. 打开 VLC，选择“媒体” -\\> “打开网络串流”。\n2. 输入 `rtsp://localhost:8554/test`​ 并播放。\n\n### 高级配置（可选）\n\n若需结合 RTMP 使用，可在配置中添加 RTMP 服务器：\n\n```\nrtsp {\n    listen 8554;\n    server_name localhost;\n\n    location /rtsp {\n        rtsp_server all;\n        rtsp_publish all;\n\n        rtmp {\n            server 127.0.0.1:1935;\n        }\n    }\n}\n\nhttp {\n    ...\n    rtmp {\n        server {\n            listen 1935;\n            chunk_size 4096;\n\n            application live {\n                live on;\n            }\n        }\n    }\n    ...\n}\n```\n\n### 总结\n\n通过以上步骤，你已成功配置 Nginx 以支持 RTSP 服务。根据具体需求，可以进一步配置认证、日志记录和流转发等功能。如遇问题，可通过查看日志文件进行调试和修正。\n","slug":"nginx-configuration-rtsp-service-1p9fjr","published":1,"__permalink":"/post/nginx-configuration-rtsp-service-1p9fjr.html","_id":"cmck558210007ssvwarzya114","layout":"post","photos":[],"content":"<h1 id=\"nginx-配置rtsp服务\"><a href=\"#nginx-配置rtsp服务\" class=\"headerlink\" title=\"nginx 配置rtsp服务\"></a>nginx 配置rtsp服务</h1><p>配置 Nginx 提供 RTSP 服务涉及安装和编译第三方模块 nginx-rtsp-module，并进行相应的配置。以下是详细的步骤和配置示例：</p>\n<h3 id=\"步骤-1-安装依赖和工具\"><a href=\"#步骤-1-安装依赖和工具\" class=\"headerlink\" title=\"步骤 1: 安装依赖和工具\"></a>步骤 1: 安装依赖和工具</h3><p>在 Ubuntu 上，安装必要的编译工具和依赖包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install build-essential libpcre3-dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-2-下载并编译-Nginx-及模块\"><a href=\"#步骤-2-下载并编译-Nginx-及模块\" class=\"headerlink\" title=\"步骤 2: 下载并编译 Nginx 及模块\"></a>步骤 2: 下载并编译 Nginx 及模块</h3><ol>\n<li><p>克隆 nginx-rtsp-module 仓库：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/arut/nginx-rtsp-module.git</span><br></pre></td></tr></table></figure></li>\n<li><p>下载 Nginx 源码（使用稳定版本）：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.21.3.tar.gz</span><br><span class=\"line\">tar -zxvf nginx-1.21.3.tar.gz</span><br><span class=\"line\">cd nginx-1.21.3</span><br></pre></td></tr></table></figure></li>\n<li><p>配置编译选项并加入 nginx-rtsp-module：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --add-module=../nginx-rtsp-module</span><br></pre></td></tr></table></figure></li>\n<li><p>编译并安装：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"步骤-3-配置-Nginx\"><a href=\"#步骤-3-配置-Nginx\" class=\"headerlink\" title=\"步骤 3: 配置 Nginx\"></a>步骤 3: 配置 Nginx</h3><p>在 Nginx 配置文件中添加 RTSP 服务器配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtsp &#123;</span><br><span class=\"line\">    listen 8554;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    auth_basic &quot;Restricted&quot;;</span><br><span class=\"line\">    auth_basic_user_file /etc/nginx/.htpasswd;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /var/log/nginx/rtsp_access.log;</span><br><span class=\"line\">    error_log /var/log/nginx/rtsp_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        rtsp_server all;</span><br><span class=\"line\">        rtsp_publish all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-4-设置基本认证\"><a href=\"#步骤-4-设置基本认证\" class=\"headerlink\" title=\"步骤 4: 设置基本认证\"></a>步骤 4: 设置基本认证</h3><p>生成密码文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo htpasswd -c /etc/nginx/.htpasswd username</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-5-配置防火墙\"><a href=\"#步骤-5-配置防火墙\" class=\"headerlink\" title=\"步骤 5: 配置防火墙\"></a>步骤 5: 配置防火墙</h3><p>开放 8554 端口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 8554/tcp</span><br></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo firewall-cmd --add-port=8554/tcp --permanent</span><br><span class=\"line\">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-6-测试配置\"><a href=\"#步骤-6-测试配置\" class=\"headerlink\" title=\"步骤 6: 测试配置\"></a>步骤 6: 测试配置</h3><p>检查 Nginx 配置并重启服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-7-测试-RTSP-服务\"><a href=\"#步骤-7-测试-RTSP-服务\" class=\"headerlink\" title=\"步骤 7: 测试 RTSP 服务\"></a>步骤 7: 测试 RTSP 服务</h3><p>使用 VLC 播放器测试连接：</p>\n<ol>\n<li>打开 VLC，选择“媒体” -&gt; “打开网络串流”。</li>\n<li>输入 <code>rtsp://localhost:8554/test</code>​ 并播放。</li>\n</ol>\n<h3 id=\"高级配置（可选）\"><a href=\"#高级配置（可选）\" class=\"headerlink\" title=\"高级配置（可选）\"></a>高级配置（可选）</h3><p>若需结合 RTMP 使用，可在配置中添加 RTMP 服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtsp &#123;</span><br><span class=\"line\">    listen 8554;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /rtsp &#123;</span><br><span class=\"line\">        rtsp_server all;</span><br><span class=\"line\">        rtsp_publish all;</span><br><span class=\"line\"></span><br><span class=\"line\">        rtmp &#123;</span><br><span class=\"line\">            server 127.0.0.1:1935;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    rtmp &#123;</span><br><span class=\"line\">        server &#123;</span><br><span class=\"line\">            listen 1935;</span><br><span class=\"line\">            chunk_size 4096;</span><br><span class=\"line\"></span><br><span class=\"line\">            application live &#123;</span><br><span class=\"line\">                live on;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过以上步骤，你已成功配置 Nginx 以支持 RTSP 服务。根据具体需求，可以进一步配置认证、日志记录和流转发等功能。如遇问题，可通过查看日志文件进行调试和修正。</p>\n","cover":false,"more":"<h1 id=\"nginx-配置rtsp服务\"><a href=\"#nginx-配置rtsp服务\" class=\"headerlink\" title=\"nginx 配置rtsp服务\"></a>nginx 配置rtsp服务</h1><p>配置 Nginx 提供 RTSP 服务涉及安装和编译第三方模块 nginx-rtsp-module，并进行相应的配置。以下是详细的步骤和配置示例：</p>\n<h3 id=\"步骤-1-安装依赖和工具\"><a href=\"#步骤-1-安装依赖和工具\" class=\"headerlink\" title=\"步骤 1: 安装依赖和工具\"></a>步骤 1: 安装依赖和工具</h3><p>在 Ubuntu 上，安装必要的编译工具和依赖包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install build-essential libpcre3-dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-2-下载并编译-Nginx-及模块\"><a href=\"#步骤-2-下载并编译-Nginx-及模块\" class=\"headerlink\" title=\"步骤 2: 下载并编译 Nginx 及模块\"></a>步骤 2: 下载并编译 Nginx 及模块</h3><ol>\n<li><p>克隆 nginx-rtsp-module 仓库：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/arut/nginx-rtsp-module.git</span><br></pre></td></tr></table></figure></li>\n<li><p>下载 Nginx 源码（使用稳定版本）：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.21.3.tar.gz</span><br><span class=\"line\">tar -zxvf nginx-1.21.3.tar.gz</span><br><span class=\"line\">cd nginx-1.21.3</span><br></pre></td></tr></table></figure></li>\n<li><p>配置编译选项并加入 nginx-rtsp-module：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --add-module=../nginx-rtsp-module</span><br></pre></td></tr></table></figure></li>\n<li><p>编译并安装：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"步骤-3-配置-Nginx\"><a href=\"#步骤-3-配置-Nginx\" class=\"headerlink\" title=\"步骤 3: 配置 Nginx\"></a>步骤 3: 配置 Nginx</h3><p>在 Nginx 配置文件中添加 RTSP 服务器配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtsp &#123;</span><br><span class=\"line\">    listen 8554;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    auth_basic &quot;Restricted&quot;;</span><br><span class=\"line\">    auth_basic_user_file /etc/nginx/.htpasswd;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log /var/log/nginx/rtsp_access.log;</span><br><span class=\"line\">    error_log /var/log/nginx/rtsp_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        rtsp_server all;</span><br><span class=\"line\">        rtsp_publish all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-4-设置基本认证\"><a href=\"#步骤-4-设置基本认证\" class=\"headerlink\" title=\"步骤 4: 设置基本认证\"></a>步骤 4: 设置基本认证</h3><p>生成密码文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo htpasswd -c /etc/nginx/.htpasswd username</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-5-配置防火墙\"><a href=\"#步骤-5-配置防火墙\" class=\"headerlink\" title=\"步骤 5: 配置防火墙\"></a>步骤 5: 配置防火墙</h3><p>开放 8554 端口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 8554/tcp</span><br></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo firewall-cmd --add-port=8554/tcp --permanent</span><br><span class=\"line\">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-6-测试配置\"><a href=\"#步骤-6-测试配置\" class=\"headerlink\" title=\"步骤 6: 测试配置\"></a>步骤 6: 测试配置</h3><p>检查 Nginx 配置并重启服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-7-测试-RTSP-服务\"><a href=\"#步骤-7-测试-RTSP-服务\" class=\"headerlink\" title=\"步骤 7: 测试 RTSP 服务\"></a>步骤 7: 测试 RTSP 服务</h3><p>使用 VLC 播放器测试连接：</p>\n<ol>\n<li>打开 VLC，选择“媒体” -&gt; “打开网络串流”。</li>\n<li>输入 <code>rtsp://localhost:8554/test</code>​ 并播放。</li>\n</ol>\n<h3 id=\"高级配置（可选）\"><a href=\"#高级配置（可选）\" class=\"headerlink\" title=\"高级配置（可选）\"></a>高级配置（可选）</h3><p>若需结合 RTMP 使用，可在配置中添加 RTMP 服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtsp &#123;</span><br><span class=\"line\">    listen 8554;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /rtsp &#123;</span><br><span class=\"line\">        rtsp_server all;</span><br><span class=\"line\">        rtsp_publish all;</span><br><span class=\"line\"></span><br><span class=\"line\">        rtmp &#123;</span><br><span class=\"line\">            server 127.0.0.1:1935;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    rtmp &#123;</span><br><span class=\"line\">        server &#123;</span><br><span class=\"line\">            listen 1935;</span><br><span class=\"line\">            chunk_size 4096;</span><br><span class=\"line\"></span><br><span class=\"line\">            application live &#123;</span><br><span class=\"line\">                live on;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过以上步骤，你已成功配置 Nginx 以支持 RTSP 服务。根据具体需求，可以进一步配置认证、日志记录和流转发等功能。如遇问题，可通过查看日志文件进行调试和修正。</p>\n"},{"title":"端口占用处理","date":"2024-12-19T01:57:31.000Z","updated":"2024-12-26T08:31:12.000Z","excerpt":"本文详细介绍了在Windows和Linux系统中处理端口占用的方法。在Windows中，首先使用`netstat -aon|findstr \"端口号\"`查找占用端口的PID，然后通过`tasklist|findstr \"PID\"`确认进程，最后使用`taskkill -F -pid PID`或任务管理器结束进程。在Linux中，使用`sudo lsof -i :端口号`查找占用端口的进程，通过`sudo kill -9 PID`结束进程，并使用`sudo lsof -i :端口号`确认端口是否释放。文章还提供了防止端口被占用的建议，如修改应用程序端口、检查启动脚本和使用端口管理工具。通过这些步骤，用户可以轻松解决端口占用问题。","comments":1,"toc":true,"abbrlink":20316,"_content":"\n# 端口占用处理\n\n## 项目启动报端口正在使用\n\n```\n09:25:12.866 [restartedMain]  ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter : \n\n***************************\nAPPLICATION FAILED TO START\n***************************\n\nDescription:\n\nWeb server failed to start. Port 8092 was already in use.\n\nAction:\n\nIdentify and stop the process that's listening on port 8092 or configure this application to listen on another port.\n\nDisconnected from the target VM, address: '127.0.0.1:59259', transport: 'socket'\n\nProcess finished with exit code 0\n```\n\n# windows端口占用处理\n\n### 1.**查看被占用端口所对应的 PID**\n\n输入命令【netstat -aon|findstr + “端口号”】后按回车。假设我们要查的是端口号“8092”，那么就输入【netstat -aon|findstr “8092”】，然后回车。这样我们就可以查到这端口的PID是“13160”。\n\n```\nC:\\Users\\X Bear>netstat -ano | findstr 8092\n  TCP    0.0.0.0:8092           0.0.0.0:0              LISTENING       13160\n  TCP    [::]:8092              [::]:0                 LISTENING       13160\n```\n\n### 2.**查看指定PID的进程**\n\n如果想查看是哪个进程占用了“8092”端口，就输入命令【tasklist|findstr ”8092”】后回车。就可以看到结果是“Java. exe”。\n\n### 3.**结束进程**\n\n方法一：输入命令【taskkill -pid 进程号 -f】后回车，就可以终止进程。如我们要终止PID号“13160”，那么就输入【taskkill -pid 13160-f】。-f 强制执行\n\n```\nC:\\Users\\X Bear>taskkill -pid 13160\n错误: 无法终止 PID 为 13160 的进程。\n原因: 只能强行终止这个进程(带 /F 选项)。\n```\n\n```\nC:\\Users\\X Bear>taskkill -F -pid 13160\n成功: 已终止 PID 为 13160 的进程。\n```\n\n　　方法二：win10可以打开按“Shift + Ctrl + Esc” 组合键，打开任务管理器，切换到【详细信息】板块，找到PID对应的程序，然后右键选择“结束任务”。\n\n‍\n\n‍\n\n## Linux 端口占用处理\n\n### **1. 查找占用端口的进程**\n\n使用以下命令查看哪个进程占用了端口（以端口 `8080`​ 为例）：\n\n```\nsudo lsof -i :8080\n```\n\n* 输出示例：\n\n  ```\n  COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\n  java     12345  user   123  IPv6  12345      0t0  TCP *:http-alt (LISTEN)\n  ```\n\n  * ​`COMMAND`​：进程名称。\n  * ​`PID`​：进程 ID。\n  * ​`USER`​：运行该进程的用户。\n  * ​`NAME`​：端口信息。\n\n如果不知道具体端口，可以使用以下命令列出所有占用端口的进程：\n\n```\nsudo netstat -tuln\n\n#如果数据太多可以使用管道符精确查询\nsudo netstat -tuln | grep 8080\n```\n\n---\n\n### **2. 结束占用端口的进程**\n\n找到进程 ID (PID) 后，使用以下命令结束进程：\n\n```\nsudo kill -9 12345\n```\n\n* ​`-9`​ 表示强制结束进程。\n\n如果需要结束多个进程，可以一次性结束：\n\n```\nsudo kill -9 12345 54321\n```\n\n---\n\n### **3. 检查端口是否已释放**\n\n再次运行以下命令，确认端口是否已释放：\n\n```\nsudo lsof -i :8080\n```\n\n如果没有输出，说明端口已成功释放。\n\n---\n\n### **4. 其他常用命令**\n\n* **查找所有占用端口的进程**：\n\n  ```\n  sudo netstat -tuln\n  ```\n* **根据进程名称查找 PID**：\n\n  ```\n  pgrep java\n  ```\n* **查看某个进程的详细信息**：\n\n  ```\n  ps -fp 12345\n  ```\n\n---\n\n### **5. 防止端口被占用**\n\n如果端口经常被占用，可以采取以下措施：\n\n1. **修改应用程序端口**：将应用程序的端口改为其他未被占用的端口。\n2. **检查启动脚本**：确保没有重复启动同一应用程序。\n3. **使用端口管理工具**：如 `nmap`​ 或 `netstat`​，定期检查端口使用情况。\n\n---\n\n### **6. 示例：解除端口 8080 占用**\n\n```\n# 查找占用 8080 端口的进程sudo lsof -i :8080# 结束进程（假设 PID 为 12345）sudo kill -9 12345# 确认端口是否已释放\nsudo lsof -i :8080\n```\n\n---\n\n通过以上步骤，你可以轻松解除 Linux 上的端口占用问题！\n","source":"_posts/port-occupation-treatment-2ogd9p.md","raw":"---\ntitle: 端口占用处理\ndate: '2024-12-19 09:57:31'\nupdated: '2024-12-26 16:31:12'\nexcerpt: >-\n  本文详细介绍了在Windows和Linux系统中处理端口占用的方法。在Windows中，首先使用`netstat -aon|findstr\n  \"端口号\"`查找占用端口的PID，然后通过`tasklist|findstr \"PID\"`确认进程，最后使用`taskkill -F -pid\n  PID`或任务管理器结束进程。在Linux中，使用`sudo lsof -i :端口号`查找占用端口的进程，通过`sudo kill -9\n  PID`结束进程，并使用`sudo lsof -i\n  :端口号`确认端口是否释放。文章还提供了防止端口被占用的建议，如修改应用程序端口、检查启动脚本和使用端口管理工具。通过这些步骤，用户可以轻松解决端口占用问题。\ntags:\n  - 端口占用\n  - 错误处理\n  - Windows\n  - Linux\n  - 进程管理\npermalink: /post/port-occupation-treatment-2ogd9p.html\ncomments: true\ntoc: true\nabbrlink: 20316\n---\n\n# 端口占用处理\n\n## 项目启动报端口正在使用\n\n```\n09:25:12.866 [restartedMain]  ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter : \n\n***************************\nAPPLICATION FAILED TO START\n***************************\n\nDescription:\n\nWeb server failed to start. Port 8092 was already in use.\n\nAction:\n\nIdentify and stop the process that's listening on port 8092 or configure this application to listen on another port.\n\nDisconnected from the target VM, address: '127.0.0.1:59259', transport: 'socket'\n\nProcess finished with exit code 0\n```\n\n# windows端口占用处理\n\n### 1.**查看被占用端口所对应的 PID**\n\n输入命令【netstat -aon|findstr + “端口号”】后按回车。假设我们要查的是端口号“8092”，那么就输入【netstat -aon|findstr “8092”】，然后回车。这样我们就可以查到这端口的PID是“13160”。\n\n```\nC:\\Users\\X Bear>netstat -ano | findstr 8092\n  TCP    0.0.0.0:8092           0.0.0.0:0              LISTENING       13160\n  TCP    [::]:8092              [::]:0                 LISTENING       13160\n```\n\n### 2.**查看指定PID的进程**\n\n如果想查看是哪个进程占用了“8092”端口，就输入命令【tasklist|findstr ”8092”】后回车。就可以看到结果是“Java. exe”。\n\n### 3.**结束进程**\n\n方法一：输入命令【taskkill -pid 进程号 -f】后回车，就可以终止进程。如我们要终止PID号“13160”，那么就输入【taskkill -pid 13160-f】。-f 强制执行\n\n```\nC:\\Users\\X Bear>taskkill -pid 13160\n错误: 无法终止 PID 为 13160 的进程。\n原因: 只能强行终止这个进程(带 /F 选项)。\n```\n\n```\nC:\\Users\\X Bear>taskkill -F -pid 13160\n成功: 已终止 PID 为 13160 的进程。\n```\n\n　　方法二：win10可以打开按“Shift + Ctrl + Esc” 组合键，打开任务管理器，切换到【详细信息】板块，找到PID对应的程序，然后右键选择“结束任务”。\n\n‍\n\n‍\n\n## Linux 端口占用处理\n\n### **1. 查找占用端口的进程**\n\n使用以下命令查看哪个进程占用了端口（以端口 `8080`​ 为例）：\n\n```\nsudo lsof -i :8080\n```\n\n* 输出示例：\n\n  ```\n  COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\n  java     12345  user   123  IPv6  12345      0t0  TCP *:http-alt (LISTEN)\n  ```\n\n  * ​`COMMAND`​：进程名称。\n  * ​`PID`​：进程 ID。\n  * ​`USER`​：运行该进程的用户。\n  * ​`NAME`​：端口信息。\n\n如果不知道具体端口，可以使用以下命令列出所有占用端口的进程：\n\n```\nsudo netstat -tuln\n\n#如果数据太多可以使用管道符精确查询\nsudo netstat -tuln | grep 8080\n```\n\n---\n\n### **2. 结束占用端口的进程**\n\n找到进程 ID (PID) 后，使用以下命令结束进程：\n\n```\nsudo kill -9 12345\n```\n\n* ​`-9`​ 表示强制结束进程。\n\n如果需要结束多个进程，可以一次性结束：\n\n```\nsudo kill -9 12345 54321\n```\n\n---\n\n### **3. 检查端口是否已释放**\n\n再次运行以下命令，确认端口是否已释放：\n\n```\nsudo lsof -i :8080\n```\n\n如果没有输出，说明端口已成功释放。\n\n---\n\n### **4. 其他常用命令**\n\n* **查找所有占用端口的进程**：\n\n  ```\n  sudo netstat -tuln\n  ```\n* **根据进程名称查找 PID**：\n\n  ```\n  pgrep java\n  ```\n* **查看某个进程的详细信息**：\n\n  ```\n  ps -fp 12345\n  ```\n\n---\n\n### **5. 防止端口被占用**\n\n如果端口经常被占用，可以采取以下措施：\n\n1. **修改应用程序端口**：将应用程序的端口改为其他未被占用的端口。\n2. **检查启动脚本**：确保没有重复启动同一应用程序。\n3. **使用端口管理工具**：如 `nmap`​ 或 `netstat`​，定期检查端口使用情况。\n\n---\n\n### **6. 示例：解除端口 8080 占用**\n\n```\n# 查找占用 8080 端口的进程sudo lsof -i :8080# 结束进程（假设 PID 为 12345）sudo kill -9 12345# 确认端口是否已释放\nsudo lsof -i :8080\n```\n\n---\n\n通过以上步骤，你可以轻松解除 Linux 上的端口占用问题！\n","slug":"port-occupation-treatment-2ogd9p","published":1,"__permalink":"/post/port-occupation-treatment-2ogd9p.html","_id":"cmck55826000assvw9briesdq","layout":"post","photos":[],"content":"<h1 id=\"端口占用处理\"><a href=\"#端口占用处理\" class=\"headerlink\" title=\"端口占用处理\"></a>端口占用处理</h1><h2 id=\"项目启动报端口正在使用\"><a href=\"#项目启动报端口正在使用\" class=\"headerlink\" title=\"项目启动报端口正在使用\"></a>项目启动报端口正在使用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">09:25:12.866 [restartedMain]  ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter : </span><br><span class=\"line\"></span><br><span class=\"line\">***************************</span><br><span class=\"line\">APPLICATION FAILED TO START</span><br><span class=\"line\">***************************</span><br><span class=\"line\"></span><br><span class=\"line\">Description:</span><br><span class=\"line\"></span><br><span class=\"line\">Web server failed to start. Port 8092 was already in use.</span><br><span class=\"line\"></span><br><span class=\"line\">Action:</span><br><span class=\"line\"></span><br><span class=\"line\">Identify and stop the process that&#x27;s listening on port 8092 or configure this application to listen on another port.</span><br><span class=\"line\"></span><br><span class=\"line\">Disconnected from the target VM, address: &#x27;127.0.0.1:59259&#x27;, transport: &#x27;socket&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"windows端口占用处理\"><a href=\"#windows端口占用处理\" class=\"headerlink\" title=\"windows端口占用处理\"></a>windows端口占用处理</h1><h3 id=\"1-查看被占用端口所对应的-PID\"><a href=\"#1-查看被占用端口所对应的-PID\" class=\"headerlink\" title=\"1.查看被占用端口所对应的 PID\"></a>1.<strong>查看被占用端口所对应的 PID</strong></h3><p>输入命令【netstat -aon|findstr + “端口号”】后按回车。假设我们要查的是端口号“8092”，那么就输入【netstat -aon|findstr “8092”】，然后回车。这样我们就可以查到这端口的PID是“13160”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\X Bear&gt;netstat -ano | findstr 8092</span><br><span class=\"line\">  TCP    0.0.0.0:8092           0.0.0.0:0              LISTENING       13160</span><br><span class=\"line\">  TCP    [::]:8092              [::]:0                 LISTENING       13160</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-查看指定PID的进程\"><a href=\"#2-查看指定PID的进程\" class=\"headerlink\" title=\"2.查看指定PID的进程\"></a>2.<strong>查看指定PID的进程</strong></h3><p>如果想查看是哪个进程占用了“8092”端口，就输入命令【tasklist|findstr ”8092”】后回车。就可以看到结果是“Java. exe”。</p>\n<h3 id=\"3-结束进程\"><a href=\"#3-结束进程\" class=\"headerlink\" title=\"3.结束进程\"></a>3.<strong>结束进程</strong></h3><p>方法一：输入命令【taskkill -pid 进程号 -f】后回车，就可以终止进程。如我们要终止PID号“13160”，那么就输入【taskkill -pid 13160-f】。-f 强制执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\X Bear&gt;taskkill -pid 13160</span><br><span class=\"line\">错误: 无法终止 PID 为 13160 的进程。</span><br><span class=\"line\">原因: 只能强行终止这个进程(带 /F 选项)。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\X Bear&gt;taskkill -F -pid 13160</span><br><span class=\"line\">成功: 已终止 PID 为 13160 的进程。</span><br></pre></td></tr></table></figure>\n\n<p>　　方法二：win10可以打开按“Shift + Ctrl + Esc” 组合键，打开任务管理器，切换到【详细信息】板块，找到PID对应的程序，然后右键选择“结束任务”。</p>\n<p>‍</p>\n<p>‍</p>\n<h2 id=\"Linux-端口占用处理\"><a href=\"#Linux-端口占用处理\" class=\"headerlink\" title=\"Linux 端口占用处理\"></a>Linux 端口占用处理</h2><h3 id=\"1-查找占用端口的进程\"><a href=\"#1-查找占用端口的进程\" class=\"headerlink\" title=\"1. 查找占用端口的进程\"></a><strong>1. 查找占用端口的进程</strong></h3><p>使用以下命令查看哪个进程占用了端口（以端口 <code>8080</code>​ 为例）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo lsof -i :8080</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>输出示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java     12345  user   123  IPv6  12345      0t0  TCP *:http-alt (LISTEN)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>​<code>COMMAND</code>​：进程名称。</li>\n<li>​<code>PID</code>​：进程 ID。</li>\n<li>​<code>USER</code>​：运行该进程的用户。</li>\n<li>​<code>NAME</code>​：端口信息。</li>\n</ul>\n</li>\n</ul>\n<p>如果不知道具体端口，可以使用以下命令列出所有占用端口的进程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo netstat -tuln</span><br><span class=\"line\"></span><br><span class=\"line\">#如果数据太多可以使用管道符精确查询</span><br><span class=\"line\">sudo netstat -tuln | grep 8080</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"2-结束占用端口的进程\"><a href=\"#2-结束占用端口的进程\" class=\"headerlink\" title=\"2. 结束占用端口的进程\"></a><strong>2. 结束占用端口的进程</strong></h3><p>找到进程 ID (PID) 后，使用以下命令结束进程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo kill -9 12345</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>​<code>-9</code>​ 表示强制结束进程。</li>\n</ul>\n<p>如果需要结束多个进程，可以一次性结束：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo kill -9 12345 54321</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-检查端口是否已释放\"><a href=\"#3-检查端口是否已释放\" class=\"headerlink\" title=\"3. 检查端口是否已释放\"></a><strong>3. 检查端口是否已释放</strong></h3><p>再次运行以下命令，确认端口是否已释放：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo lsof -i :8080</span><br></pre></td></tr></table></figure>\n\n<p>如果没有输出，说明端口已成功释放。</p>\n<hr>\n<h3 id=\"4-其他常用命令\"><a href=\"#4-其他常用命令\" class=\"headerlink\" title=\"4. 其他常用命令\"></a><strong>4. 其他常用命令</strong></h3><ul>\n<li><p><strong>查找所有占用端口的进程</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo netstat -tuln</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>根据进程名称查找 PID</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgrep java</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>查看某个进程的详细信息</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -fp 12345</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"5-防止端口被占用\"><a href=\"#5-防止端口被占用\" class=\"headerlink\" title=\"5. 防止端口被占用\"></a><strong>5. 防止端口被占用</strong></h3><p>如果端口经常被占用，可以采取以下措施：</p>\n<ol>\n<li><strong>修改应用程序端口</strong>：将应用程序的端口改为其他未被占用的端口。</li>\n<li><strong>检查启动脚本</strong>：确保没有重复启动同一应用程序。</li>\n<li><strong>使用端口管理工具</strong>：如 <code>nmap</code>​ 或 <code>netstat</code>​，定期检查端口使用情况。</li>\n</ol>\n<hr>\n<h3 id=\"6-示例：解除端口-8080-占用\"><a href=\"#6-示例：解除端口-8080-占用\" class=\"headerlink\" title=\"6. 示例：解除端口 8080 占用\"></a><strong>6. 示例：解除端口 8080 占用</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查找占用 8080 端口的进程sudo lsof -i :8080# 结束进程（假设 PID 为 12345）sudo kill -9 12345# 确认端口是否已释放</span><br><span class=\"line\">sudo lsof -i :8080</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>通过以上步骤，你可以轻松解除 Linux 上的端口占用问题！</p>\n","cover":false,"more":"<h1 id=\"端口占用处理\"><a href=\"#端口占用处理\" class=\"headerlink\" title=\"端口占用处理\"></a>端口占用处理</h1><h2 id=\"项目启动报端口正在使用\"><a href=\"#项目启动报端口正在使用\" class=\"headerlink\" title=\"项目启动报端口正在使用\"></a>项目启动报端口正在使用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">09:25:12.866 [restartedMain]  ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter : </span><br><span class=\"line\"></span><br><span class=\"line\">***************************</span><br><span class=\"line\">APPLICATION FAILED TO START</span><br><span class=\"line\">***************************</span><br><span class=\"line\"></span><br><span class=\"line\">Description:</span><br><span class=\"line\"></span><br><span class=\"line\">Web server failed to start. Port 8092 was already in use.</span><br><span class=\"line\"></span><br><span class=\"line\">Action:</span><br><span class=\"line\"></span><br><span class=\"line\">Identify and stop the process that&#x27;s listening on port 8092 or configure this application to listen on another port.</span><br><span class=\"line\"></span><br><span class=\"line\">Disconnected from the target VM, address: &#x27;127.0.0.1:59259&#x27;, transport: &#x27;socket&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"windows端口占用处理\"><a href=\"#windows端口占用处理\" class=\"headerlink\" title=\"windows端口占用处理\"></a>windows端口占用处理</h1><h3 id=\"1-查看被占用端口所对应的-PID\"><a href=\"#1-查看被占用端口所对应的-PID\" class=\"headerlink\" title=\"1.查看被占用端口所对应的 PID\"></a>1.<strong>查看被占用端口所对应的 PID</strong></h3><p>输入命令【netstat -aon|findstr + “端口号”】后按回车。假设我们要查的是端口号“8092”，那么就输入【netstat -aon|findstr “8092”】，然后回车。这样我们就可以查到这端口的PID是“13160”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\X Bear&gt;netstat -ano | findstr 8092</span><br><span class=\"line\">  TCP    0.0.0.0:8092           0.0.0.0:0              LISTENING       13160</span><br><span class=\"line\">  TCP    [::]:8092              [::]:0                 LISTENING       13160</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-查看指定PID的进程\"><a href=\"#2-查看指定PID的进程\" class=\"headerlink\" title=\"2.查看指定PID的进程\"></a>2.<strong>查看指定PID的进程</strong></h3><p>如果想查看是哪个进程占用了“8092”端口，就输入命令【tasklist|findstr ”8092”】后回车。就可以看到结果是“Java. exe”。</p>\n<h3 id=\"3-结束进程\"><a href=\"#3-结束进程\" class=\"headerlink\" title=\"3.结束进程\"></a>3.<strong>结束进程</strong></h3><p>方法一：输入命令【taskkill -pid 进程号 -f】后回车，就可以终止进程。如我们要终止PID号“13160”，那么就输入【taskkill -pid 13160-f】。-f 强制执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\X Bear&gt;taskkill -pid 13160</span><br><span class=\"line\">错误: 无法终止 PID 为 13160 的进程。</span><br><span class=\"line\">原因: 只能强行终止这个进程(带 /F 选项)。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\X Bear&gt;taskkill -F -pid 13160</span><br><span class=\"line\">成功: 已终止 PID 为 13160 的进程。</span><br></pre></td></tr></table></figure>\n\n<p>　　方法二：win10可以打开按“Shift + Ctrl + Esc” 组合键，打开任务管理器，切换到【详细信息】板块，找到PID对应的程序，然后右键选择“结束任务”。</p>\n<p>‍</p>\n<p>‍</p>\n<h2 id=\"Linux-端口占用处理\"><a href=\"#Linux-端口占用处理\" class=\"headerlink\" title=\"Linux 端口占用处理\"></a>Linux 端口占用处理</h2><h3 id=\"1-查找占用端口的进程\"><a href=\"#1-查找占用端口的进程\" class=\"headerlink\" title=\"1. 查找占用端口的进程\"></a><strong>1. 查找占用端口的进程</strong></h3><p>使用以下命令查看哪个进程占用了端口（以端口 <code>8080</code>​ 为例）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo lsof -i :8080</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>输出示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java     12345  user   123  IPv6  12345      0t0  TCP *:http-alt (LISTEN)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>​<code>COMMAND</code>​：进程名称。</li>\n<li>​<code>PID</code>​：进程 ID。</li>\n<li>​<code>USER</code>​：运行该进程的用户。</li>\n<li>​<code>NAME</code>​：端口信息。</li>\n</ul>\n</li>\n</ul>\n<p>如果不知道具体端口，可以使用以下命令列出所有占用端口的进程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo netstat -tuln</span><br><span class=\"line\"></span><br><span class=\"line\">#如果数据太多可以使用管道符精确查询</span><br><span class=\"line\">sudo netstat -tuln | grep 8080</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"2-结束占用端口的进程\"><a href=\"#2-结束占用端口的进程\" class=\"headerlink\" title=\"2. 结束占用端口的进程\"></a><strong>2. 结束占用端口的进程</strong></h3><p>找到进程 ID (PID) 后，使用以下命令结束进程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo kill -9 12345</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>​<code>-9</code>​ 表示强制结束进程。</li>\n</ul>\n<p>如果需要结束多个进程，可以一次性结束：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo kill -9 12345 54321</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-检查端口是否已释放\"><a href=\"#3-检查端口是否已释放\" class=\"headerlink\" title=\"3. 检查端口是否已释放\"></a><strong>3. 检查端口是否已释放</strong></h3><p>再次运行以下命令，确认端口是否已释放：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo lsof -i :8080</span><br></pre></td></tr></table></figure>\n\n<p>如果没有输出，说明端口已成功释放。</p>\n<hr>\n<h3 id=\"4-其他常用命令\"><a href=\"#4-其他常用命令\" class=\"headerlink\" title=\"4. 其他常用命令\"></a><strong>4. 其他常用命令</strong></h3><ul>\n<li><p><strong>查找所有占用端口的进程</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo netstat -tuln</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>根据进程名称查找 PID</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgrep java</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>查看某个进程的详细信息</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -fp 12345</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h3 id=\"5-防止端口被占用\"><a href=\"#5-防止端口被占用\" class=\"headerlink\" title=\"5. 防止端口被占用\"></a><strong>5. 防止端口被占用</strong></h3><p>如果端口经常被占用，可以采取以下措施：</p>\n<ol>\n<li><strong>修改应用程序端口</strong>：将应用程序的端口改为其他未被占用的端口。</li>\n<li><strong>检查启动脚本</strong>：确保没有重复启动同一应用程序。</li>\n<li><strong>使用端口管理工具</strong>：如 <code>nmap</code>​ 或 <code>netstat</code>​，定期检查端口使用情况。</li>\n</ol>\n<hr>\n<h3 id=\"6-示例：解除端口-8080-占用\"><a href=\"#6-示例：解除端口-8080-占用\" class=\"headerlink\" title=\"6. 示例：解除端口 8080 占用\"></a><strong>6. 示例：解除端口 8080 占用</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查找占用 8080 端口的进程sudo lsof -i :8080# 结束进程（假设 PID 为 12345）sudo kill -9 12345# 确认端口是否已释放</span><br><span class=\"line\">sudo lsof -i :8080</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>通过以上步骤，你可以轻松解除 Linux 上的端口占用问题！</p>\n"},{"title":"在Nginx上配置并开启WebDAV服务的完整指南","date":"2024-12-26T09:24:17.000Z","updated":"2024-12-26T09:26:38.000Z","excerpt":"要在Nginx上开启WebDAV服务，需要进行以下步骤：\n\n1. 确认Nginx已安装WebDAV模块，可通过`nginx -V`命令检查。\n2. 编辑Nginx配置文件，添加WebDAV相关配置，包括指定存储目录、启用WebDAV方法、设置访问权限等。\n3. 创建WebDAV存储目录，并设置权限。\n4. 如需认证，生成密码文件并配置基本认证。\n5. 测试Nginx配置并重启服务。\n6. 使用`cadaver`工具测试WebDAV服务。\n7. 确保防火墙允许HTTP或HTTPS流量。\n8. 完成以上步骤后，即可通过WebDAV客户端进行文件管理。","comments":1,"toc":true,"abbrlink":47927,"_content":"\n# nginx 开启webdav服务\n\n## 如何在 Nginx 上开启 WebDAV 服务\n\n要在 Nginx 上开启 WebDAV 服务，你需要配置 Nginx 以支持 WebDAV 请求。以下是详细的步骤：\n\n### 1. 确保 Nginx 安装了 WebDAV 模块\n\nNginx 的 WebDAV 功能由 `http_dav_module`​ 模块提供。默认情况下，这个模块是包含在标准 Nginx 编译中的，但某些情况下可能需要重新编译 Nginx 以包含此模块。\n\n检查 Nginx 是否包含 `http_dav_module`​ 模块：\n\n```\nnginx -V 2>&1 | grep -o with-http_dav_module\n```\n\n如果输出包含 `with-http_dav_module`​，则模块已启用。否则，你需要重新编译 Nginx 并添加此模块。\n\n### 2. 配置 Nginx 以支持 WebDAV\n\n编辑你的 Nginx 配置文件（通常位于 `/etc/nginx/nginx.conf`​ 或 `/etc/nginx/sites-available/default`​），添加或修改以下配置：\n\n```\nserver {\n    listen 80;\n    server_name your_domain.com;\n\n    location /webdav {\n        root /path/to/webdav/storage;\n        autoindex on;\n        dav_methods PUT DELETE MKCOL COPY MOVE;\n        dav_ext_methods PROPFIND PROPPATCH MKACTIVITY CHECKOUT;\n        dav_access user:rw group:rw all:r;\n        create_full_path on;\n\n        # 认证配置（可选）\n        auth_basic \"WebDAV Authentication\";\n        auth_basic_user_file /etc/nginx/.htpasswd;\n    }\n}\n```\n\n**配置说明：**\n\n* ​`root /path/to/webdav/storage;`​：指定 WebDAV 存储目录。\n* ​`dav_methods`​ 和 `dav_ext_methods`​：启用 WebDAV 方法。\n* ​`dav_access`​：设置访问权限。\n* ​`create_full_path`​：允许创建完整路径。\n* ​`auth_basic`​ 和 `auth_basic_user_file`​：启用基本认证（可选）。\n\n### 3. 创建存储目录并设置权限\n\n创建 WebDAV 存储目录并设置适当的权限：\n\n```\nsudo mkdir -p /path/to/webdav/storage\nsudo chown -R www-data:www-data /path/to/webdav/storage\nsudo chmod -R 755 /path/to/webdav/storage\n```\n\n### 4. 配置基本认证（可选）\n\n如果启用了认证，生成密码文件：\n\n```\nsudo htpasswd -c /etc/nginx/.htpasswd username\n```\n\n**注意：**  将 `username`​ 替换为实际的用户名，并根据提示设置密码。\n\n### 5. 测试 Nginx 配置并重启服务\n\n测试 Nginx 配置是否正确：\n\n```\nsudo nginx -t\n```\n\n如果配置正确，重启 Nginx 以应用更改：\n\n```\nsudo systemctl restart nginx\n```\n\n或者\n\n```\nsudo service nginx restart\n```\n\n### 6. 测试 WebDAV 服务\n\n你可以使用 `cadaver`​ 工具来测试 WebDAV 服务：\n\n```\nsudo apt-get install cadaver\ncadaver http://your_domain.com/webdav\n```\n\n输入认证信息后，你应该能够进行文件上传、下载等操作。\n\n### 7. 防火墙设置\n\n确保防火墙允许 HTTP（端口 80）或 HTTPS（端口 443）流量。\n\n```\nsudo ufw allow 80/tcp\n```\n\n或者\n\n```\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --reload\n```\n\n### 8. 完成\n\n现在，你已经成功在 Nginx 上开启了 WebDAV 服务。你可以通过 WebDAV 客户端访问该服务并进行文件管理。\n","source":"_posts/nginx-turn-on-the-webdav-service-zadzub.md","raw":"---\ntitle: 在Nginx上配置并开启WebDAV服务的完整指南\ndate: '2024-12-26 17:24:17'\nupdated: '2024-12-26 17:26:38'\nexcerpt: |-\n  要在Nginx上开启WebDAV服务，需要进行以下步骤：\n\n  1. 确认Nginx已安装WebDAV模块，可通过`nginx -V`命令检查。\n  2. 编辑Nginx配置文件，添加WebDAV相关配置，包括指定存储目录、启用WebDAV方法、设置访问权限等。\n  3. 创建WebDAV存储目录，并设置权限。\n  4. 如需认证，生成密码文件并配置基本认证。\n  5. 测试Nginx配置并重启服务。\n  6. 使用`cadaver`工具测试WebDAV服务。\n  7. 确保防火墙允许HTTP或HTTPS流量。\n  8. 完成以上步骤后，即可通过WebDAV客户端进行文件管理。\ntags:\n  - Nginx\n  - WebDAV\n  - 配置\n  - 安全\n  - 服务\ncategories:\n  - 服务器\n  - 网络配置\n  - WebDAV\npermalink: /post/nginx-turn-on-the-webdav-service-zadzub.html\ncomments: true\ntoc: true\nabbrlink: 47927\n---\n\n# nginx 开启webdav服务\n\n## 如何在 Nginx 上开启 WebDAV 服务\n\n要在 Nginx 上开启 WebDAV 服务，你需要配置 Nginx 以支持 WebDAV 请求。以下是详细的步骤：\n\n### 1. 确保 Nginx 安装了 WebDAV 模块\n\nNginx 的 WebDAV 功能由 `http_dav_module`​ 模块提供。默认情况下，这个模块是包含在标准 Nginx 编译中的，但某些情况下可能需要重新编译 Nginx 以包含此模块。\n\n检查 Nginx 是否包含 `http_dav_module`​ 模块：\n\n```\nnginx -V 2>&1 | grep -o with-http_dav_module\n```\n\n如果输出包含 `with-http_dav_module`​，则模块已启用。否则，你需要重新编译 Nginx 并添加此模块。\n\n### 2. 配置 Nginx 以支持 WebDAV\n\n编辑你的 Nginx 配置文件（通常位于 `/etc/nginx/nginx.conf`​ 或 `/etc/nginx/sites-available/default`​），添加或修改以下配置：\n\n```\nserver {\n    listen 80;\n    server_name your_domain.com;\n\n    location /webdav {\n        root /path/to/webdav/storage;\n        autoindex on;\n        dav_methods PUT DELETE MKCOL COPY MOVE;\n        dav_ext_methods PROPFIND PROPPATCH MKACTIVITY CHECKOUT;\n        dav_access user:rw group:rw all:r;\n        create_full_path on;\n\n        # 认证配置（可选）\n        auth_basic \"WebDAV Authentication\";\n        auth_basic_user_file /etc/nginx/.htpasswd;\n    }\n}\n```\n\n**配置说明：**\n\n* ​`root /path/to/webdav/storage;`​：指定 WebDAV 存储目录。\n* ​`dav_methods`​ 和 `dav_ext_methods`​：启用 WebDAV 方法。\n* ​`dav_access`​：设置访问权限。\n* ​`create_full_path`​：允许创建完整路径。\n* ​`auth_basic`​ 和 `auth_basic_user_file`​：启用基本认证（可选）。\n\n### 3. 创建存储目录并设置权限\n\n创建 WebDAV 存储目录并设置适当的权限：\n\n```\nsudo mkdir -p /path/to/webdav/storage\nsudo chown -R www-data:www-data /path/to/webdav/storage\nsudo chmod -R 755 /path/to/webdav/storage\n```\n\n### 4. 配置基本认证（可选）\n\n如果启用了认证，生成密码文件：\n\n```\nsudo htpasswd -c /etc/nginx/.htpasswd username\n```\n\n**注意：**  将 `username`​ 替换为实际的用户名，并根据提示设置密码。\n\n### 5. 测试 Nginx 配置并重启服务\n\n测试 Nginx 配置是否正确：\n\n```\nsudo nginx -t\n```\n\n如果配置正确，重启 Nginx 以应用更改：\n\n```\nsudo systemctl restart nginx\n```\n\n或者\n\n```\nsudo service nginx restart\n```\n\n### 6. 测试 WebDAV 服务\n\n你可以使用 `cadaver`​ 工具来测试 WebDAV 服务：\n\n```\nsudo apt-get install cadaver\ncadaver http://your_domain.com/webdav\n```\n\n输入认证信息后，你应该能够进行文件上传、下载等操作。\n\n### 7. 防火墙设置\n\n确保防火墙允许 HTTP（端口 80）或 HTTPS（端口 443）流量。\n\n```\nsudo ufw allow 80/tcp\n```\n\n或者\n\n```\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --reload\n```\n\n### 8. 完成\n\n现在，你已经成功在 Nginx 上开启了 WebDAV 服务。你可以通过 WebDAV 客户端访问该服务并进行文件管理。\n","slug":"nginx-turn-on-the-webdav-service-zadzub","published":1,"__permalink":"/post/nginx-turn-on-the-webdav-service-zadzub.html","_id":"cmck55828000essvw10zxa4nn","layout":"post","photos":[],"content":"<h1 id=\"nginx-开启webdav服务\"><a href=\"#nginx-开启webdav服务\" class=\"headerlink\" title=\"nginx 开启webdav服务\"></a>nginx 开启webdav服务</h1><h2 id=\"如何在-Nginx-上开启-WebDAV-服务\"><a href=\"#如何在-Nginx-上开启-WebDAV-服务\" class=\"headerlink\" title=\"如何在 Nginx 上开启 WebDAV 服务\"></a>如何在 Nginx 上开启 WebDAV 服务</h2><p>要在 Nginx 上开启 WebDAV 服务，你需要配置 Nginx 以支持 WebDAV 请求。以下是详细的步骤：</p>\n<h3 id=\"1-确保-Nginx-安装了-WebDAV-模块\"><a href=\"#1-确保-Nginx-安装了-WebDAV-模块\" class=\"headerlink\" title=\"1. 确保 Nginx 安装了 WebDAV 模块\"></a>1. 确保 Nginx 安装了 WebDAV 模块</h3><p>Nginx 的 WebDAV 功能由 <code>http_dav_module</code>​ 模块提供。默认情况下，这个模块是包含在标准 Nginx 编译中的，但某些情况下可能需要重新编译 Nginx 以包含此模块。</p>\n<p>检查 Nginx 是否包含 <code>http_dav_module</code>​ 模块：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -V 2&gt;&amp;1 | grep -o with-http_dav_module</span><br></pre></td></tr></table></figure>\n\n<p>如果输出包含 <code>with-http_dav_module</code>​，则模块已启用。否则，你需要重新编译 Nginx 并添加此模块。</p>\n<h3 id=\"2-配置-Nginx-以支持-WebDAV\"><a href=\"#2-配置-Nginx-以支持-WebDAV\" class=\"headerlink\" title=\"2. 配置 Nginx 以支持 WebDAV\"></a>2. 配置 Nginx 以支持 WebDAV</h3><p>编辑你的 Nginx 配置文件（通常位于 <code>/etc/nginx/nginx.conf</code>​ 或 <code>/etc/nginx/sites-available/default</code>​），添加或修改以下配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name your_domain.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /webdav &#123;</span><br><span class=\"line\">        root /path/to/webdav/storage;</span><br><span class=\"line\">        autoindex on;</span><br><span class=\"line\">        dav_methods PUT DELETE MKCOL COPY MOVE;</span><br><span class=\"line\">        dav_ext_methods PROPFIND PROPPATCH MKACTIVITY CHECKOUT;</span><br><span class=\"line\">        dav_access user:rw group:rw all:r;</span><br><span class=\"line\">        create_full_path on;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 认证配置（可选）</span><br><span class=\"line\">        auth_basic &quot;WebDAV Authentication&quot;;</span><br><span class=\"line\">        auth_basic_user_file /etc/nginx/.htpasswd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置说明：</strong></p>\n<ul>\n<li>​<code>root /path/to/webdav/storage;</code>​：指定 WebDAV 存储目录。</li>\n<li>​<code>dav_methods</code>​ 和 <code>dav_ext_methods</code>​：启用 WebDAV 方法。</li>\n<li>​<code>dav_access</code>​：设置访问权限。</li>\n<li>​<code>create_full_path</code>​：允许创建完整路径。</li>\n<li>​<code>auth_basic</code>​ 和 <code>auth_basic_user_file</code>​：启用基本认证（可选）。</li>\n</ul>\n<h3 id=\"3-创建存储目录并设置权限\"><a href=\"#3-创建存储目录并设置权限\" class=\"headerlink\" title=\"3. 创建存储目录并设置权限\"></a>3. 创建存储目录并设置权限</h3><p>创建 WebDAV 存储目录并设置适当的权限：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /path/to/webdav/storage</span><br><span class=\"line\">sudo chown -R www-data:www-data /path/to/webdav/storage</span><br><span class=\"line\">sudo chmod -R 755 /path/to/webdav/storage</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-配置基本认证（可选）\"><a href=\"#4-配置基本认证（可选）\" class=\"headerlink\" title=\"4. 配置基本认证（可选）\"></a>4. 配置基本认证（可选）</h3><p>如果启用了认证，生成密码文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo htpasswd -c /etc/nginx/.htpasswd username</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>  将 <code>username</code>​ 替换为实际的用户名，并根据提示设置密码。</p>\n<h3 id=\"5-测试-Nginx-配置并重启服务\"><a href=\"#5-测试-Nginx-配置并重启服务\" class=\"headerlink\" title=\"5. 测试 Nginx 配置并重启服务\"></a>5. 测试 Nginx 配置并重启服务</h3><p>测试 Nginx 配置是否正确：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>如果配置正确，重启 Nginx 以应用更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-测试-WebDAV-服务\"><a href=\"#6-测试-WebDAV-服务\" class=\"headerlink\" title=\"6. 测试 WebDAV 服务\"></a>6. 测试 WebDAV 服务</h3><p>你可以使用 <code>cadaver</code>​ 工具来测试 WebDAV 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install cadaver</span><br><span class=\"line\">cadaver http://your_domain.com/webdav</span><br></pre></td></tr></table></figure>\n\n<p>输入认证信息后，你应该能够进行文件上传、下载等操作。</p>\n<h3 id=\"7-防火墙设置\"><a href=\"#7-防火墙设置\" class=\"headerlink\" title=\"7. 防火墙设置\"></a>7. 防火墙设置</h3><p>确保防火墙允许 HTTP（端口 80）或 HTTPS（端口 443）流量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 80/tcp</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo firewall-cmd --permanent --add-service=http</span><br><span class=\"line\">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-完成\"><a href=\"#8-完成\" class=\"headerlink\" title=\"8. 完成\"></a>8. 完成</h3><p>现在，你已经成功在 Nginx 上开启了 WebDAV 服务。你可以通过 WebDAV 客户端访问该服务并进行文件管理。</p>\n","cover":false,"more":"<h1 id=\"nginx-开启webdav服务\"><a href=\"#nginx-开启webdav服务\" class=\"headerlink\" title=\"nginx 开启webdav服务\"></a>nginx 开启webdav服务</h1><h2 id=\"如何在-Nginx-上开启-WebDAV-服务\"><a href=\"#如何在-Nginx-上开启-WebDAV-服务\" class=\"headerlink\" title=\"如何在 Nginx 上开启 WebDAV 服务\"></a>如何在 Nginx 上开启 WebDAV 服务</h2><p>要在 Nginx 上开启 WebDAV 服务，你需要配置 Nginx 以支持 WebDAV 请求。以下是详细的步骤：</p>\n<h3 id=\"1-确保-Nginx-安装了-WebDAV-模块\"><a href=\"#1-确保-Nginx-安装了-WebDAV-模块\" class=\"headerlink\" title=\"1. 确保 Nginx 安装了 WebDAV 模块\"></a>1. 确保 Nginx 安装了 WebDAV 模块</h3><p>Nginx 的 WebDAV 功能由 <code>http_dav_module</code>​ 模块提供。默认情况下，这个模块是包含在标准 Nginx 编译中的，但某些情况下可能需要重新编译 Nginx 以包含此模块。</p>\n<p>检查 Nginx 是否包含 <code>http_dav_module</code>​ 模块：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -V 2&gt;&amp;1 | grep -o with-http_dav_module</span><br></pre></td></tr></table></figure>\n\n<p>如果输出包含 <code>with-http_dav_module</code>​，则模块已启用。否则，你需要重新编译 Nginx 并添加此模块。</p>\n<h3 id=\"2-配置-Nginx-以支持-WebDAV\"><a href=\"#2-配置-Nginx-以支持-WebDAV\" class=\"headerlink\" title=\"2. 配置 Nginx 以支持 WebDAV\"></a>2. 配置 Nginx 以支持 WebDAV</h3><p>编辑你的 Nginx 配置文件（通常位于 <code>/etc/nginx/nginx.conf</code>​ 或 <code>/etc/nginx/sites-available/default</code>​），添加或修改以下配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name your_domain.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /webdav &#123;</span><br><span class=\"line\">        root /path/to/webdav/storage;</span><br><span class=\"line\">        autoindex on;</span><br><span class=\"line\">        dav_methods PUT DELETE MKCOL COPY MOVE;</span><br><span class=\"line\">        dav_ext_methods PROPFIND PROPPATCH MKACTIVITY CHECKOUT;</span><br><span class=\"line\">        dav_access user:rw group:rw all:r;</span><br><span class=\"line\">        create_full_path on;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 认证配置（可选）</span><br><span class=\"line\">        auth_basic &quot;WebDAV Authentication&quot;;</span><br><span class=\"line\">        auth_basic_user_file /etc/nginx/.htpasswd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置说明：</strong></p>\n<ul>\n<li>​<code>root /path/to/webdav/storage;</code>​：指定 WebDAV 存储目录。</li>\n<li>​<code>dav_methods</code>​ 和 <code>dav_ext_methods</code>​：启用 WebDAV 方法。</li>\n<li>​<code>dav_access</code>​：设置访问权限。</li>\n<li>​<code>create_full_path</code>​：允许创建完整路径。</li>\n<li>​<code>auth_basic</code>​ 和 <code>auth_basic_user_file</code>​：启用基本认证（可选）。</li>\n</ul>\n<h3 id=\"3-创建存储目录并设置权限\"><a href=\"#3-创建存储目录并设置权限\" class=\"headerlink\" title=\"3. 创建存储目录并设置权限\"></a>3. 创建存储目录并设置权限</h3><p>创建 WebDAV 存储目录并设置适当的权限：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /path/to/webdav/storage</span><br><span class=\"line\">sudo chown -R www-data:www-data /path/to/webdav/storage</span><br><span class=\"line\">sudo chmod -R 755 /path/to/webdav/storage</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-配置基本认证（可选）\"><a href=\"#4-配置基本认证（可选）\" class=\"headerlink\" title=\"4. 配置基本认证（可选）\"></a>4. 配置基本认证（可选）</h3><p>如果启用了认证，生成密码文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo htpasswd -c /etc/nginx/.htpasswd username</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>  将 <code>username</code>​ 替换为实际的用户名，并根据提示设置密码。</p>\n<h3 id=\"5-测试-Nginx-配置并重启服务\"><a href=\"#5-测试-Nginx-配置并重启服务\" class=\"headerlink\" title=\"5. 测试 Nginx 配置并重启服务\"></a>5. 测试 Nginx 配置并重启服务</h3><p>测试 Nginx 配置是否正确：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>如果配置正确，重启 Nginx 以应用更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-测试-WebDAV-服务\"><a href=\"#6-测试-WebDAV-服务\" class=\"headerlink\" title=\"6. 测试 WebDAV 服务\"></a>6. 测试 WebDAV 服务</h3><p>你可以使用 <code>cadaver</code>​ 工具来测试 WebDAV 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install cadaver</span><br><span class=\"line\">cadaver http://your_domain.com/webdav</span><br></pre></td></tr></table></figure>\n\n<p>输入认证信息后，你应该能够进行文件上传、下载等操作。</p>\n<h3 id=\"7-防火墙设置\"><a href=\"#7-防火墙设置\" class=\"headerlink\" title=\"7. 防火墙设置\"></a>7. 防火墙设置</h3><p>确保防火墙允许 HTTP（端口 80）或 HTTPS（端口 443）流量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 80/tcp</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo firewall-cmd --permanent --add-service=http</span><br><span class=\"line\">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-完成\"><a href=\"#8-完成\" class=\"headerlink\" title=\"8. 完成\"></a>8. 完成</h3><p>现在，你已经成功在 Nginx 上开启了 WebDAV 服务。你可以通过 WebDAV 客户端访问该服务并进行文件管理。</p>\n"},{"title":"实现点击复制文本功能的Vue组件","date":"2024-12-23T08:24:35.000Z","updated":"2024-12-23T08:49:14.000Z","excerpt":"本文介绍了如何创建一个名为 `CopyButton.vue` 的 Vue 组件，用于实现点击复制功能。该组件接收一个 `text` prop，表示要复制的内容，并在点击按钮时执行复制操作。主要步骤包括：1. **创建 `CopyButton.vue` 组件**：定义按钮并实现复制逻辑，支持现代浏览器和旧版浏览器的兼容性。2. **在父组件中引入并注册 `CopyButton` 组件**：在表格列的模板中使用 `CopyButton`，传入要复制的文本。3. **确保组件和依赖项正确导入**：在父组件中导入 `CopyButton` 和 Element Plus 的组件。4. **处理兼容性和国际化**：兼容不同浏览器，并可对消息提示文本进行国际化处理。通过这些步骤，实现了在表格中点击按钮即可复制指定文本的功能，并提供了成功或失败的提示消息。","comments":1,"toc":true,"abbrlink":30813,"_content":"\n# 实现点击复制文本功能的Vue组件\n\n思路：\n\n```cmd\n首先，我需要创建一个新的组件，专门用于点击复制功能。这个组件应该接收要复制的文本，并在点击时执行复制操作。\n\n我应该把这个组件命名为`CopyButton.vue`，然后在其中定义一个按钮，点击时调用复制方法。\n\n在`CopyButton.vue`中，我需要：\n\n1. 接收一个`text` prop，表示要复制的内容。\n\n2. 定义一个方法`copyToClipboard`来执行复制操作。\n\n3. 在按钮的点击事件中调用这个方法。\n\n4. 可能需要导入Element Plus的图标和消息提示组件。\n\n然后，在父组件中，我需要引入这个`CopyButton.vue`组件，并在表格的列模板中使用它。\n\n具体步骤如下：\n\n1. 创建`CopyButton.vue`组件。\n\n2. 在`CopyButton.vue`中实现复制逻辑。\n\n3. 在父组件中引入并注册`CopyButton`组件。\n\n4. 在表格列的模板中使用`CopyButton`，传入要复制的文本。\n\n我还需要确保在`CopyButton.vue`中正确导入并使用Element Plus的组件，比如图标和消息提示。\n\n另外，为了提高复用性，可能需要将消息提示也抽出来，或者直接使用ElMessage。\n\n我还需要考虑组件的props定义，确保`text`是必需的，并且是字符串类型。\n\n在实现过程中，我可能会遇到以下问题：\n\n- 组件注册不正确，导致组件无法显示。\n\n- 事件绑定错误，导致点击按钮时无法触发复制操作。\n\n- 复制逻辑在某些浏览器中不兼容，需要处理兼容性问题。\n\n为了解决这些问题，我需要：\n\n- 确保组件正确注册和引入。\n\n- 检查事件绑定和方法调用是否正确。\n\n- 测试不同浏览器的兼容性，确保复制功能正常工作。\n\n此外，我还需要考虑国际化，如果需要的话，可以将消息提示文本进行国际化处理。\n\n最后，我需要测试整个功能，确保点击按钮时能够正确复制文本，并显示相应的提示消息。\n```\n\n### 实现步骤\n\n#### 1. 创建 `CopyButton.vue`​ 组件\n\n```js\n<!-- CopyButton.vue -->\n<template>\n  <el-button\n    type=\"primary\"\n    size=\"small\"\n    @click=\"copyToClipboard\"\n    :icon=\"DocumentCopy\"\n    :title=\"`复制${label}`\"\n  />\n</template>\n\n<script setup>\nimport { ElMessage } from 'element-plus';\nimport { DocumentCopy } from '@element-plus/icons-vue';\n\nconst props = defineProps({\n  text: {\n    type: String,\n    required: true\n  },\n  label: {\n    type: String,\n    default: '文本'\n  }\n});\n\nconst copyToClipboard = () => {\n  if (props.text) {\n    if (navigator.clipboard && navigator.clipboard.writeText) {\n      navigator.clipboard.writeText(props.text).then(() => {\n        ElMessage.success('复制成功');\n      }).catch((err) => {\n        ElMessage.error('复制失败: ' + err);\n      });\n    } else {\n      const textarea = document.createElement('textarea');\n      textarea.value = props.text;\n      document.body.appendChild(textarea);\n      textarea.select();\n      document.execCommand('copy');\n      document.body.removeChild(textarea);\n      ElMessage.success('复制成功');\n    }\n  } else {\n    ElMessage.warning('无内容可复制');\n  }\n};\n</script>\n```\n\n#### 2. 在父组件中引入并注册 `CopyButton`​ 组件\n\n```js\n<script setup>\nimport CopyButton from './CopyButton.vue';\nimport { ElTable, ElTableColumn } from 'element-plus';\n</script>\n\n<template>\n  <el-table :data=\"tableData\" border>\n    <el-table-column label=\"物流单号\" align=\"center\" prop=\"trackingNumber\">\n      <template #default=\"scope\">\n        <span>{{ scope.row.trackingNumber }}</span>\n        <CopyButton\n          class=\"ml-2\"\n          :text=\"scope.row.trackingNumber\"\n          label=\"物流单号\"\n        />\n      </template>\n    </el-table-column>\n    <!-- 其他列定义 -->\n  </el-table>\n</template>\n```\n\n#### 3. 确保所有组件和依赖项已正确导入\n\n在父组件中，确保导入了 `CopyButton`​ 和 Element Plus 的组件。\n\n```js\nimport { ElTable, ElTableColumn } from 'element-plus';\nimport CopyButton from './CopyButton.vue';\n```\n\n#### 4. 处理兼容性和国际化\n\n* **兼容性**: 已在 `copyToClipboard`​ 方法中处理现代和旧版浏览器的兼容性。\n* **国际化**: 可以将 `ElMessage`​ 的消息文本进行国际化处理，例如使用 `i18n`​。\n\n### 完整代码示例\n\n#### `CopyButton.vue`​\n\n```js\n<template>\n  <el-button\n   type=\"primary\"\n    size=\"small\"\n    @click=\"copyToClipboard\"\n    :icon=\"DocumentCopy\"\n    :title=\"`复制${label}`\"\n  />\n</template>\n\n<script setup>\nimport { ElMessage } from 'element-plus';\nimport { DocumentCopy } from '@element-plus/icons-vue';\n\nconst props = defineProps({\n  text: {\n    type: String,\n    required: true\n  },\n  label: {\n    type: String,\n    default: '文本'\n  }\n});\n\nconst copyToClipboard = () => {\n  if (props.text) {\n    if (navigator.clipboard && navigator.clipboard.writeText) {\n      navigator.clipboard.writeText(props.text).then(() => {\n        ElMessage.success('复制成功');\n      }).catch((err) => {\n        ElMessage.error('复制失败: ' + err);\n      });\n    } else {\n      const textarea = document.createElement('textarea');\n      textarea.value = props.text;\n      document.body.appendChild(textarea);\n      textarea.select();\n      document.execCommand('copy');\n      document.body.removeChild(textarea);\n      ElMessage.success('复制成功');\n    }\n  } else {\n    ElMessage.warning('无内容可复制');\n  }\n};\n</script>\n```\n\n#### 父组件\n\n```js\n<script setup>\nimport { ElTable, ElTableColumn } from 'element-plus';\nimport CopyButton from './CopyButton.vue';\n\nconst tableData = [\n  { trackingNumber: '123456789' },\n  // 其他数据\n];\n</script>\n\n<template>\n  <el-table :data=\"tableData\" border>\n    <el-table-column label=\"物流单号\" align=\"center\" prop=\"trackingNumber\">\n      <template #default=\"scope\">\n        <span>{{ scope.row.trackingNumber }}</span>\n        <CopyButton\n          class=\"ml-2\"\n          :text=\"scope.row.trackingNumber\"\n          label=\"物流单号\"\n        />\n      </template>\n    </el-table-column>\n    <!-- 其他列定义 -->\n  </el-table>\n</template>\n```\n\n通过以上步骤，我们成功地将点击复制功能提取为一个独立的组件，并在父组件中复用该组件，提高了代码的可维护性和复用性。\n\n#### 最终效果：\n\n​![](https://gh.qptf.eu.org/https://raw.githubusercontent.com/Damonny/blog-img/main/20241223163653.png)​\n\n‍\n","source":"_posts/press-a-copy-component-z2ezflv.md","raw":"---\ntitle: 实现点击复制文本功能的Vue组件\ndate: '2024-12-23 16:24:35'\nupdated: '2024-12-23 16:49:14'\nexcerpt: >-\n  本文介绍了如何创建一个名为 `CopyButton.vue` 的 Vue 组件，用于实现点击复制功能。该组件接收一个 `text`\n  prop，表示要复制的内容，并在点击按钮时执行复制操作。主要步骤包括：1. **创建 `CopyButton.vue`\n  组件**：定义按钮并实现复制逻辑，支持现代浏览器和旧版浏览器的兼容性。2. **在父组件中引入并注册 `CopyButton`\n  组件**：在表格列的模板中使用 `CopyButton`，传入要复制的文本。3. **确保组件和依赖项正确导入**：在父组件中导入 `CopyButton`\n  和 Element Plus 的组件。4.\n  **处理兼容性和国际化**：兼容不同浏览器，并可对消息提示文本进行国际化处理。通过这些步骤，实现了在表格中点击按钮即可复制指定文本的功能，并提供了成功或失败的提示消息。\ntags:\n  - 复制组件\n  - vue\n  - element-plus\n  - 剪贴板\n  - 国际化\ncategories:\n  - 前端开发\n  - 组件设计\n  - 代码示例\npermalink: /post/press-a-copy-component-z2ezflv.html\ncomments: true\ntoc: true\nabbrlink: 30813\n---\n\n# 实现点击复制文本功能的Vue组件\n\n思路：\n\n```cmd\n首先，我需要创建一个新的组件，专门用于点击复制功能。这个组件应该接收要复制的文本，并在点击时执行复制操作。\n\n我应该把这个组件命名为`CopyButton.vue`，然后在其中定义一个按钮，点击时调用复制方法。\n\n在`CopyButton.vue`中，我需要：\n\n1. 接收一个`text` prop，表示要复制的内容。\n\n2. 定义一个方法`copyToClipboard`来执行复制操作。\n\n3. 在按钮的点击事件中调用这个方法。\n\n4. 可能需要导入Element Plus的图标和消息提示组件。\n\n然后，在父组件中，我需要引入这个`CopyButton.vue`组件，并在表格的列模板中使用它。\n\n具体步骤如下：\n\n1. 创建`CopyButton.vue`组件。\n\n2. 在`CopyButton.vue`中实现复制逻辑。\n\n3. 在父组件中引入并注册`CopyButton`组件。\n\n4. 在表格列的模板中使用`CopyButton`，传入要复制的文本。\n\n我还需要确保在`CopyButton.vue`中正确导入并使用Element Plus的组件，比如图标和消息提示。\n\n另外，为了提高复用性，可能需要将消息提示也抽出来，或者直接使用ElMessage。\n\n我还需要考虑组件的props定义，确保`text`是必需的，并且是字符串类型。\n\n在实现过程中，我可能会遇到以下问题：\n\n- 组件注册不正确，导致组件无法显示。\n\n- 事件绑定错误，导致点击按钮时无法触发复制操作。\n\n- 复制逻辑在某些浏览器中不兼容，需要处理兼容性问题。\n\n为了解决这些问题，我需要：\n\n- 确保组件正确注册和引入。\n\n- 检查事件绑定和方法调用是否正确。\n\n- 测试不同浏览器的兼容性，确保复制功能正常工作。\n\n此外，我还需要考虑国际化，如果需要的话，可以将消息提示文本进行国际化处理。\n\n最后，我需要测试整个功能，确保点击按钮时能够正确复制文本，并显示相应的提示消息。\n```\n\n### 实现步骤\n\n#### 1. 创建 `CopyButton.vue`​ 组件\n\n```js\n<!-- CopyButton.vue -->\n<template>\n  <el-button\n    type=\"primary\"\n    size=\"small\"\n    @click=\"copyToClipboard\"\n    :icon=\"DocumentCopy\"\n    :title=\"`复制${label}`\"\n  />\n</template>\n\n<script setup>\nimport { ElMessage } from 'element-plus';\nimport { DocumentCopy } from '@element-plus/icons-vue';\n\nconst props = defineProps({\n  text: {\n    type: String,\n    required: true\n  },\n  label: {\n    type: String,\n    default: '文本'\n  }\n});\n\nconst copyToClipboard = () => {\n  if (props.text) {\n    if (navigator.clipboard && navigator.clipboard.writeText) {\n      navigator.clipboard.writeText(props.text).then(() => {\n        ElMessage.success('复制成功');\n      }).catch((err) => {\n        ElMessage.error('复制失败: ' + err);\n      });\n    } else {\n      const textarea = document.createElement('textarea');\n      textarea.value = props.text;\n      document.body.appendChild(textarea);\n      textarea.select();\n      document.execCommand('copy');\n      document.body.removeChild(textarea);\n      ElMessage.success('复制成功');\n    }\n  } else {\n    ElMessage.warning('无内容可复制');\n  }\n};\n</script>\n```\n\n#### 2. 在父组件中引入并注册 `CopyButton`​ 组件\n\n```js\n<script setup>\nimport CopyButton from './CopyButton.vue';\nimport { ElTable, ElTableColumn } from 'element-plus';\n</script>\n\n<template>\n  <el-table :data=\"tableData\" border>\n    <el-table-column label=\"物流单号\" align=\"center\" prop=\"trackingNumber\">\n      <template #default=\"scope\">\n        <span>{{ scope.row.trackingNumber }}</span>\n        <CopyButton\n          class=\"ml-2\"\n          :text=\"scope.row.trackingNumber\"\n          label=\"物流单号\"\n        />\n      </template>\n    </el-table-column>\n    <!-- 其他列定义 -->\n  </el-table>\n</template>\n```\n\n#### 3. 确保所有组件和依赖项已正确导入\n\n在父组件中，确保导入了 `CopyButton`​ 和 Element Plus 的组件。\n\n```js\nimport { ElTable, ElTableColumn } from 'element-plus';\nimport CopyButton from './CopyButton.vue';\n```\n\n#### 4. 处理兼容性和国际化\n\n* **兼容性**: 已在 `copyToClipboard`​ 方法中处理现代和旧版浏览器的兼容性。\n* **国际化**: 可以将 `ElMessage`​ 的消息文本进行国际化处理，例如使用 `i18n`​。\n\n### 完整代码示例\n\n#### `CopyButton.vue`​\n\n```js\n<template>\n  <el-button\n   type=\"primary\"\n    size=\"small\"\n    @click=\"copyToClipboard\"\n    :icon=\"DocumentCopy\"\n    :title=\"`复制${label}`\"\n  />\n</template>\n\n<script setup>\nimport { ElMessage } from 'element-plus';\nimport { DocumentCopy } from '@element-plus/icons-vue';\n\nconst props = defineProps({\n  text: {\n    type: String,\n    required: true\n  },\n  label: {\n    type: String,\n    default: '文本'\n  }\n});\n\nconst copyToClipboard = () => {\n  if (props.text) {\n    if (navigator.clipboard && navigator.clipboard.writeText) {\n      navigator.clipboard.writeText(props.text).then(() => {\n        ElMessage.success('复制成功');\n      }).catch((err) => {\n        ElMessage.error('复制失败: ' + err);\n      });\n    } else {\n      const textarea = document.createElement('textarea');\n      textarea.value = props.text;\n      document.body.appendChild(textarea);\n      textarea.select();\n      document.execCommand('copy');\n      document.body.removeChild(textarea);\n      ElMessage.success('复制成功');\n    }\n  } else {\n    ElMessage.warning('无内容可复制');\n  }\n};\n</script>\n```\n\n#### 父组件\n\n```js\n<script setup>\nimport { ElTable, ElTableColumn } from 'element-plus';\nimport CopyButton from './CopyButton.vue';\n\nconst tableData = [\n  { trackingNumber: '123456789' },\n  // 其他数据\n];\n</script>\n\n<template>\n  <el-table :data=\"tableData\" border>\n    <el-table-column label=\"物流单号\" align=\"center\" prop=\"trackingNumber\">\n      <template #default=\"scope\">\n        <span>{{ scope.row.trackingNumber }}</span>\n        <CopyButton\n          class=\"ml-2\"\n          :text=\"scope.row.trackingNumber\"\n          label=\"物流单号\"\n        />\n      </template>\n    </el-table-column>\n    <!-- 其他列定义 -->\n  </el-table>\n</template>\n```\n\n通过以上步骤，我们成功地将点击复制功能提取为一个独立的组件，并在父组件中复用该组件，提高了代码的可维护性和复用性。\n\n#### 最终效果：\n\n​![](https://gh.qptf.eu.org/https://raw.githubusercontent.com/Damonny/blog-img/main/20241223163653.png)​\n\n‍\n","slug":"press-a-copy-component-z2ezflv","published":1,"__permalink":"/post/press-a-copy-component-z2ezflv.html","_id":"cmck55829000fssvw4a93aqpq","layout":"post","photos":[],"content":"<h1 id=\"实现点击复制文本功能的Vue组件\"><a href=\"#实现点击复制文本功能的Vue组件\" class=\"headerlink\" title=\"实现点击复制文本功能的Vue组件\"></a>实现点击复制文本功能的Vue组件</h1><p>思路：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先，我需要创建一个新的组件，专门用于点击复制功能。这个组件应该接收要复制的文本，并在点击时执行复制操作。</span><br><span class=\"line\"></span><br><span class=\"line\">我应该把这个组件命名为`CopyButton.vue`，然后在其中定义一个按钮，点击时调用复制方法。</span><br><span class=\"line\"></span><br><span class=\"line\">在`CopyButton.vue`中，我需要：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>. 接收一个`text` prop，表示要复制的内容。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>. 定义一个方法`copyToClipboard`来执行复制操作。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>. 在按钮的点击事件中调用这个方法。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>. 可能需要导入Element Plus的图标和消息提示组件。</span><br><span class=\"line\"></span><br><span class=\"line\">然后，在父组件中，我需要引入这个`CopyButton.vue`组件，并在表格的列模板中使用它。</span><br><span class=\"line\"></span><br><span class=\"line\">具体步骤如下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>. 创建`CopyButton.vue`组件。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>. 在`CopyButton.vue`中实现复制逻辑。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>. 在父组件中引入并注册`CopyButton`组件。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>. 在表格列的模板中使用`CopyButton`，传入要复制的文本。</span><br><span class=\"line\"></span><br><span class=\"line\">我还需要确保在`CopyButton.vue`中正确导入并使用Element Plus的组件，比如图标和消息提示。</span><br><span class=\"line\"></span><br><span class=\"line\">另外，为了提高复用性，可能需要将消息提示也抽出来，或者直接使用ElMessage。</span><br><span class=\"line\"></span><br><span class=\"line\">我还需要考虑组件的props定义，确保`text`是必需的，并且是字符串类型。</span><br><span class=\"line\"></span><br><span class=\"line\">在实现过程中，我可能会遇到以下问题：</span><br><span class=\"line\"></span><br><span class=\"line\">- 组件注册不正确，导致组件无法显示。</span><br><span class=\"line\"></span><br><span class=\"line\">- 事件绑定错误，导致点击按钮时无法触发复制操作。</span><br><span class=\"line\"></span><br><span class=\"line\">- 复制逻辑在某些浏览器中不兼容，需要处理兼容性问题。</span><br><span class=\"line\"></span><br><span class=\"line\">为了解决这些问题，我需要：</span><br><span class=\"line\"></span><br><span class=\"line\">- 确保组件正确注册和引入。</span><br><span class=\"line\"></span><br><span class=\"line\">- 检查事件绑定和方法调用是否正确。</span><br><span class=\"line\"></span><br><span class=\"line\">- 测试不同浏览器的兼容性，确保复制功能正常工作。</span><br><span class=\"line\"></span><br><span class=\"line\">此外，我还需要考虑国际化，如果需要的话，可以将消息提示文本进行国际化处理。</span><br><span class=\"line\"></span><br><span class=\"line\">最后，我需要测试整个功能，确保点击按钮时能够正确复制文本，并显示相应的提示消息。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><h4 id=\"1-创建-CopyButton-vue​-组件\"><a href=\"#1-创建-CopyButton-vue​-组件\" class=\"headerlink\" title=\"1. 创建 CopyButton.vue​ 组件\"></a>1. 创建 <code>CopyButton.vue</code>​ 组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- <span class=\"title class_\">CopyButton</span>.<span class=\"property\">vue</span> --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">el-button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    @<span class=\"attr\">click</span>=<span class=\"string\">&quot;copyToClipboard&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:icon</span>=<span class=\"string\">&quot;DocumentCopy&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:title</span>=<span class=\"string\">&quot;`复制$&#123;label&#125;`&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">  /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElMessage</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-plus&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DocumentCopy</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@element-plus/icons-vue&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">const</span> props = <span class=\"title function_\">defineProps</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">text</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">required</span>: <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">label</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">default</span>: <span class=\"string\">&#x27;文本&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">const</span> <span class=\"title function_\">copyToClipboard</span> = (<span class=\"params\"></span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">if</span> (props.<span class=\"property\">text</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">if</span> (navigator.<span class=\"property\">clipboard</span> &amp;&amp; navigator.<span class=\"property\">clipboard</span>.<span class=\"property\">writeText</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      navigator.<span class=\"property\">clipboard</span>.<span class=\"title function_\">writeText</span>(props.<span class=\"property\">text</span>).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">success</span>(<span class=\"string\">&#x27;复制成功&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;复制失败: &#x27;</span> + err);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">const</span> textarea = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;textarea&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      textarea.<span class=\"property\">value</span> = props.<span class=\"property\">text</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(textarea);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      textarea.<span class=\"title function_\">select</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">execCommand</span>(<span class=\"string\">&#x27;copy&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(textarea);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">success</span>(<span class=\"string\">&#x27;复制成功&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">warning</span>(<span class=\"string\">&#x27;无内容可复制&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-在父组件中引入并注册-CopyButton​-组件\"><a href=\"#2-在父组件中引入并注册-CopyButton​-组件\" class=\"headerlink\" title=\"2. 在父组件中引入并注册 CopyButton​ 组件\"></a>2. 在父组件中引入并注册 <code>CopyButton</code>​ 组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CopyButton</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./CopyButton.vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElTable</span>, <span class=\"title class_\">ElTableColumn</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-plus&#x27;</span>;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">el-table</span> <span class=\"attr\">:data</span>=<span class=\"string\">&quot;tableData&quot;</span> <span class=\"attr\">border</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;物流单号&quot;</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;trackingNumber&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">default</span>=<span class=\"string\">&quot;scope&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; scope.row.trackingNumber &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">CopyButton</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">class</span>=<span class=\"string\">&quot;ml-2&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">:text</span>=<span class=\"string\">&quot;scope.row.trackingNumber&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;物流单号&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"comment\">&lt;!-- 其他列定义 --&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-确保所有组件和依赖项已正确导入\"><a href=\"#3-确保所有组件和依赖项已正确导入\" class=\"headerlink\" title=\"3. 确保所有组件和依赖项已正确导入\"></a>3. 确保所有组件和依赖项已正确导入</h4><p>在父组件中，确保导入了 <code>CopyButton</code>​ 和 Element Plus 的组件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElTable</span>, <span class=\"title class_\">ElTableColumn</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-plus&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CopyButton</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./CopyButton.vue&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-处理兼容性和国际化\"><a href=\"#4-处理兼容性和国际化\" class=\"headerlink\" title=\"4. 处理兼容性和国际化\"></a>4. 处理兼容性和国际化</h4><ul>\n<li><strong>兼容性</strong>: 已在 <code>copyToClipboard</code>​ 方法中处理现代和旧版浏览器的兼容性。</li>\n<li><strong>国际化</strong>: 可以将 <code>ElMessage</code>​ 的消息文本进行国际化处理，例如使用 <code>i18n</code>​。</li>\n</ul>\n<h3 id=\"完整代码示例\"><a href=\"#完整代码示例\" class=\"headerlink\" title=\"完整代码示例\"></a>完整代码示例</h3><h4 id=\"CopyButton-vue​\"><a href=\"#CopyButton-vue​\" class=\"headerlink\" title=\"CopyButton.vue​\"></a><code>CopyButton.vue</code>​</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">el-button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">   <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    @<span class=\"attr\">click</span>=<span class=\"string\">&quot;copyToClipboard&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:icon</span>=<span class=\"string\">&quot;DocumentCopy&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:title</span>=<span class=\"string\">&quot;`复制$&#123;label&#125;`&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">  /&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElMessage</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-plus&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DocumentCopy</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@element-plus/icons-vue&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">const</span> props = <span class=\"title function_\">defineProps</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">text</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">required</span>: <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">label</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">default</span>: <span class=\"string\">&#x27;文本&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">const</span> <span class=\"title function_\">copyToClipboard</span> = (<span class=\"params\"></span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">if</span> (props.<span class=\"property\">text</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">if</span> (navigator.<span class=\"property\">clipboard</span> &amp;&amp; navigator.<span class=\"property\">clipboard</span>.<span class=\"property\">writeText</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      navigator.<span class=\"property\">clipboard</span>.<span class=\"title function_\">writeText</span>(props.<span class=\"property\">text</span>).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">success</span>(<span class=\"string\">&#x27;复制成功&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;复制失败: &#x27;</span> + err);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">const</span> textarea = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;textarea&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      textarea.<span class=\"property\">value</span> = props.<span class=\"property\">text</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(textarea);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      textarea.<span class=\"title function_\">select</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">execCommand</span>(<span class=\"string\">&#x27;copy&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(textarea);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">success</span>(<span class=\"string\">&#x27;复制成功&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">warning</span>(<span class=\"string\">&#x27;无内容可复制&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElTable</span>, <span class=\"title class_\">ElTableColumn</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-plus&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CopyButton</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./CopyButton.vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tableData = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">trackingNumber</span>: <span class=\"string\">&#x27;123456789&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 其他数据</span></span><br><span class=\"line\">];</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">el-table</span> <span class=\"attr\">:data</span>=<span class=\"string\">&quot;tableData&quot;</span> <span class=\"attr\">border</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;物流单号&quot;</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;trackingNumber&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">default</span>=<span class=\"string\">&quot;scope&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; scope.row.trackingNumber &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">CopyButton</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">class</span>=<span class=\"string\">&quot;ml-2&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">:text</span>=<span class=\"string\">&quot;scope.row.trackingNumber&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;物流单号&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"comment\">&lt;!-- 其他列定义 --&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>通过以上步骤，我们成功地将点击复制功能提取为一个独立的组件，并在父组件中复用该组件，提高了代码的可维护性和复用性。</p>\n<h4 id=\"最终效果：\"><a href=\"#最终效果：\" class=\"headerlink\" title=\"最终效果：\"></a>最终效果：</h4><p>​<img src=\"https://gh.qptf.eu.org/https://raw.githubusercontent.com/Damonny/blog-img/main/20241223163653.png\">​</p>\n<p>‍</p>\n","cover":false,"more":"<h1 id=\"实现点击复制文本功能的Vue组件\"><a href=\"#实现点击复制文本功能的Vue组件\" class=\"headerlink\" title=\"实现点击复制文本功能的Vue组件\"></a>实现点击复制文本功能的Vue组件</h1><p>思路：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先，我需要创建一个新的组件，专门用于点击复制功能。这个组件应该接收要复制的文本，并在点击时执行复制操作。</span><br><span class=\"line\"></span><br><span class=\"line\">我应该把这个组件命名为`CopyButton.vue`，然后在其中定义一个按钮，点击时调用复制方法。</span><br><span class=\"line\"></span><br><span class=\"line\">在`CopyButton.vue`中，我需要：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>. 接收一个`text` prop，表示要复制的内容。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>. 定义一个方法`copyToClipboard`来执行复制操作。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>. 在按钮的点击事件中调用这个方法。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>. 可能需要导入Element Plus的图标和消息提示组件。</span><br><span class=\"line\"></span><br><span class=\"line\">然后，在父组件中，我需要引入这个`CopyButton.vue`组件，并在表格的列模板中使用它。</span><br><span class=\"line\"></span><br><span class=\"line\">具体步骤如下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>. 创建`CopyButton.vue`组件。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>. 在`CopyButton.vue`中实现复制逻辑。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>. 在父组件中引入并注册`CopyButton`组件。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>. 在表格列的模板中使用`CopyButton`，传入要复制的文本。</span><br><span class=\"line\"></span><br><span class=\"line\">我还需要确保在`CopyButton.vue`中正确导入并使用Element Plus的组件，比如图标和消息提示。</span><br><span class=\"line\"></span><br><span class=\"line\">另外，为了提高复用性，可能需要将消息提示也抽出来，或者直接使用ElMessage。</span><br><span class=\"line\"></span><br><span class=\"line\">我还需要考虑组件的props定义，确保`text`是必需的，并且是字符串类型。</span><br><span class=\"line\"></span><br><span class=\"line\">在实现过程中，我可能会遇到以下问题：</span><br><span class=\"line\"></span><br><span class=\"line\">- 组件注册不正确，导致组件无法显示。</span><br><span class=\"line\"></span><br><span class=\"line\">- 事件绑定错误，导致点击按钮时无法触发复制操作。</span><br><span class=\"line\"></span><br><span class=\"line\">- 复制逻辑在某些浏览器中不兼容，需要处理兼容性问题。</span><br><span class=\"line\"></span><br><span class=\"line\">为了解决这些问题，我需要：</span><br><span class=\"line\"></span><br><span class=\"line\">- 确保组件正确注册和引入。</span><br><span class=\"line\"></span><br><span class=\"line\">- 检查事件绑定和方法调用是否正确。</span><br><span class=\"line\"></span><br><span class=\"line\">- 测试不同浏览器的兼容性，确保复制功能正常工作。</span><br><span class=\"line\"></span><br><span class=\"line\">此外，我还需要考虑国际化，如果需要的话，可以将消息提示文本进行国际化处理。</span><br><span class=\"line\"></span><br><span class=\"line\">最后，我需要测试整个功能，确保点击按钮时能够正确复制文本，并显示相应的提示消息。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><h4 id=\"1-创建-CopyButton-vue​-组件\"><a href=\"#1-创建-CopyButton-vue​-组件\" class=\"headerlink\" title=\"1. 创建 CopyButton.vue​ 组件\"></a>1. 创建 <code>CopyButton.vue</code>​ 组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- <span class=\"title class_\">CopyButton</span>.<span class=\"property\">vue</span> --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">el-button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    @<span class=\"attr\">click</span>=<span class=\"string\">&quot;copyToClipboard&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:icon</span>=<span class=\"string\">&quot;DocumentCopy&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:title</span>=<span class=\"string\">&quot;`复制$&#123;label&#125;`&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">  /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElMessage</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-plus&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DocumentCopy</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@element-plus/icons-vue&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">const</span> props = <span class=\"title function_\">defineProps</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">text</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">required</span>: <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">label</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">default</span>: <span class=\"string\">&#x27;文本&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">const</span> <span class=\"title function_\">copyToClipboard</span> = (<span class=\"params\"></span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">if</span> (props.<span class=\"property\">text</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">if</span> (navigator.<span class=\"property\">clipboard</span> &amp;&amp; navigator.<span class=\"property\">clipboard</span>.<span class=\"property\">writeText</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      navigator.<span class=\"property\">clipboard</span>.<span class=\"title function_\">writeText</span>(props.<span class=\"property\">text</span>).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">success</span>(<span class=\"string\">&#x27;复制成功&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;复制失败: &#x27;</span> + err);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">const</span> textarea = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;textarea&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      textarea.<span class=\"property\">value</span> = props.<span class=\"property\">text</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(textarea);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      textarea.<span class=\"title function_\">select</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">execCommand</span>(<span class=\"string\">&#x27;copy&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(textarea);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">success</span>(<span class=\"string\">&#x27;复制成功&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">warning</span>(<span class=\"string\">&#x27;无内容可复制&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-在父组件中引入并注册-CopyButton​-组件\"><a href=\"#2-在父组件中引入并注册-CopyButton​-组件\" class=\"headerlink\" title=\"2. 在父组件中引入并注册 CopyButton​ 组件\"></a>2. 在父组件中引入并注册 <code>CopyButton</code>​ 组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CopyButton</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./CopyButton.vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElTable</span>, <span class=\"title class_\">ElTableColumn</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-plus&#x27;</span>;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">el-table</span> <span class=\"attr\">:data</span>=<span class=\"string\">&quot;tableData&quot;</span> <span class=\"attr\">border</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;物流单号&quot;</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;trackingNumber&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">default</span>=<span class=\"string\">&quot;scope&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; scope.row.trackingNumber &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">CopyButton</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">class</span>=<span class=\"string\">&quot;ml-2&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">:text</span>=<span class=\"string\">&quot;scope.row.trackingNumber&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;物流单号&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"comment\">&lt;!-- 其他列定义 --&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-确保所有组件和依赖项已正确导入\"><a href=\"#3-确保所有组件和依赖项已正确导入\" class=\"headerlink\" title=\"3. 确保所有组件和依赖项已正确导入\"></a>3. 确保所有组件和依赖项已正确导入</h4><p>在父组件中，确保导入了 <code>CopyButton</code>​ 和 Element Plus 的组件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElTable</span>, <span class=\"title class_\">ElTableColumn</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-plus&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CopyButton</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./CopyButton.vue&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-处理兼容性和国际化\"><a href=\"#4-处理兼容性和国际化\" class=\"headerlink\" title=\"4. 处理兼容性和国际化\"></a>4. 处理兼容性和国际化</h4><ul>\n<li><strong>兼容性</strong>: 已在 <code>copyToClipboard</code>​ 方法中处理现代和旧版浏览器的兼容性。</li>\n<li><strong>国际化</strong>: 可以将 <code>ElMessage</code>​ 的消息文本进行国际化处理，例如使用 <code>i18n</code>​。</li>\n</ul>\n<h3 id=\"完整代码示例\"><a href=\"#完整代码示例\" class=\"headerlink\" title=\"完整代码示例\"></a>完整代码示例</h3><h4 id=\"CopyButton-vue​\"><a href=\"#CopyButton-vue​\" class=\"headerlink\" title=\"CopyButton.vue​\"></a><code>CopyButton.vue</code>​</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">el-button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">   <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    @<span class=\"attr\">click</span>=<span class=\"string\">&quot;copyToClipboard&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:icon</span>=<span class=\"string\">&quot;DocumentCopy&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:title</span>=<span class=\"string\">&quot;`复制$&#123;label&#125;`&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">  /&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElMessage</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-plus&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DocumentCopy</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@element-plus/icons-vue&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">const</span> props = <span class=\"title function_\">defineProps</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">text</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">required</span>: <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">label</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">default</span>: <span class=\"string\">&#x27;文本&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">const</span> <span class=\"title function_\">copyToClipboard</span> = (<span class=\"params\"></span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">if</span> (props.<span class=\"property\">text</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">if</span> (navigator.<span class=\"property\">clipboard</span> &amp;&amp; navigator.<span class=\"property\">clipboard</span>.<span class=\"property\">writeText</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      navigator.<span class=\"property\">clipboard</span>.<span class=\"title function_\">writeText</span>(props.<span class=\"property\">text</span>).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">success</span>(<span class=\"string\">&#x27;复制成功&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;复制失败: &#x27;</span> + err);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">const</span> textarea = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;textarea&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      textarea.<span class=\"property\">value</span> = props.<span class=\"property\">text</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(textarea);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      textarea.<span class=\"title function_\">select</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">execCommand</span>(<span class=\"string\">&#x27;copy&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(textarea);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">success</span>(<span class=\"string\">&#x27;复制成功&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title class_\">ElMessage</span>.<span class=\"title function_\">warning</span>(<span class=\"string\">&#x27;无内容可复制&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElTable</span>, <span class=\"title class_\">ElTableColumn</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-plus&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CopyButton</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./CopyButton.vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tableData = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">trackingNumber</span>: <span class=\"string\">&#x27;123456789&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 其他数据</span></span><br><span class=\"line\">];</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">el-table</span> <span class=\"attr\">:data</span>=<span class=\"string\">&quot;tableData&quot;</span> <span class=\"attr\">border</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;物流单号&quot;</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;trackingNumber&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">default</span>=<span class=\"string\">&quot;scope&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; scope.row.trackingNumber &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">CopyButton</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">class</span>=<span class=\"string\">&quot;ml-2&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">:text</span>=<span class=\"string\">&quot;scope.row.trackingNumber&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">label</span>=<span class=\"string\">&quot;物流单号&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"comment\">&lt;!-- 其他列定义 --&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>通过以上步骤，我们成功地将点击复制功能提取为一个独立的组件，并在父组件中复用该组件，提高了代码的可维护性和复用性。</p>\n<h4 id=\"最终效果：\"><a href=\"#最终效果：\" class=\"headerlink\" title=\"最终效果：\"></a>最终效果：</h4><p>​<img src=\"https://gh.qptf.eu.org/https://raw.githubusercontent.com/Damonny/blog-img/main/20241223163653.png\">​</p>\n<p>‍</p>\n"},{"title":"思源笔记 Docker-Compose 一键部署及解锁付费功能教程","date":"2024-12-19T02:39:24.000Z","updated":"2024-12-23T09:00:54.000Z","excerpt":"这篇文章介绍了如何使用Docker Compose一键部署思源笔记的两个版本：官方开源版本和解锁付费功能的版本。官方版本使用`b3log/siyuan`镜像，配置了工作区路径和访问授权码，并设置了时区和端口映射。解锁版本使用`apkdv/siyuan-unlock`镜像，解锁了云备份等付费功能，并通过Docker网络实现容器间通讯。两个版本都配置了持久化存储和自动重启策略。","comments":1,"toc":true,"abbrlink":44245,"_content":"\n# 思源笔记-docker-compose一键部署\n\n## 官方开源版本\n\n```docker-compose\nversion: \"3.9\"\nservices:\n  siyuan:\n    image: b3log/siyuan\n    container_name: siyuan\n    user: root\n    command: ['--workspace=/siyuan/workspace/', '--accessAuthCode=Qsxzxc123@']\n    environment:\n      - TZ=Asia/Shanghai\n    ports:\n      - 6806:6806\n    volumes:\n      - ./workspace:/siyuan/workspace\n    restart: always\n```\n\n## 热心网友[github.com/appdev/siyuan-unlock](https://github.com/appdev/siyuan-unlock)unlook版本(解锁相关云备份付费功能)\n\n```bash\n# 创建网卡，方便容器间网络通讯\ndocker network create mynet\n# 创建文件夹\nmkdir SiYuan\n# 创建docker-compose.yml文件\ntouch docker-compose.yml\n\n# 把以下内容复制进文件后执行\ndocker-compose -f docker-compose.yml up -d\n\n# 然后访问你的云主机ip http:IP:6806\n```\n\n```js\nversion: \"3.9\"\nservices:\n  siyuan:\n#    image: b3log/siyuan\n    image: apkdv/siyuan-unlock\n    container_name: siyuan\n    user: root  # 可选，偷懒做法\n    command: ['--workspace=/siyuan/SiYuan/', '--accessAuthCode=yourAccessAuthCode']\n    environment:\n      - TZ=Asia/Shanghai\n    ports:\n      - 6806:6806\n    volumes:\n      - ./SiYuan:/siyuan/SiYuan\n    restart: always\n    networks:\n      - mynet\nnetworks:\n  mynet:\n    external: true\n```\n\n‍\n","source":"_posts/siyuan-notedockercompose-oneclick-deployment-1wlgle.md","raw":"---\ntitle: 思源笔记 Docker-Compose 一键部署及解锁付费功能教程\ndate: '2024-12-19 10:39:24'\nupdated: '2024-12-23 17:00:54'\nexcerpt: >-\n  这篇文章介绍了如何使用Docker\n  Compose一键部署思源笔记的两个版本：官方开源版本和解锁付费功能的版本。官方版本使用`b3log/siyuan`镜像，配置了工作区路径和访问授权码，并设置了时区和端口映射。解锁版本使用`apkdv/siyuan-unlock`镜像，解锁了云备份等付费功能，并通过Docker网络实现容器间通讯。两个版本都配置了持久化存储和自动重启策略。\ntags:\n  - 思源笔记\n  - docker\n  - 一键部署\n  - 云备份\n  - 解锁版\ncategories:\n  - Docker\n  - 笔记软件\n  - 开源\npermalink: /post/siyuan-notedockercompose-oneclick-deployment-1wlgle.html\ncomments: true\ntoc: true\nabbrlink: 44245\n---\n\n# 思源笔记-docker-compose一键部署\n\n## 官方开源版本\n\n```docker-compose\nversion: \"3.9\"\nservices:\n  siyuan:\n    image: b3log/siyuan\n    container_name: siyuan\n    user: root\n    command: ['--workspace=/siyuan/workspace/', '--accessAuthCode=Qsxzxc123@']\n    environment:\n      - TZ=Asia/Shanghai\n    ports:\n      - 6806:6806\n    volumes:\n      - ./workspace:/siyuan/workspace\n    restart: always\n```\n\n## 热心网友[github.com/appdev/siyuan-unlock](https://github.com/appdev/siyuan-unlock)unlook版本(解锁相关云备份付费功能)\n\n```bash\n# 创建网卡，方便容器间网络通讯\ndocker network create mynet\n# 创建文件夹\nmkdir SiYuan\n# 创建docker-compose.yml文件\ntouch docker-compose.yml\n\n# 把以下内容复制进文件后执行\ndocker-compose -f docker-compose.yml up -d\n\n# 然后访问你的云主机ip http:IP:6806\n```\n\n```js\nversion: \"3.9\"\nservices:\n  siyuan:\n#    image: b3log/siyuan\n    image: apkdv/siyuan-unlock\n    container_name: siyuan\n    user: root  # 可选，偷懒做法\n    command: ['--workspace=/siyuan/SiYuan/', '--accessAuthCode=yourAccessAuthCode']\n    environment:\n      - TZ=Asia/Shanghai\n    ports:\n      - 6806:6806\n    volumes:\n      - ./SiYuan:/siyuan/SiYuan\n    restart: always\n    networks:\n      - mynet\nnetworks:\n  mynet:\n    external: true\n```\n\n‍\n","slug":"siyuan-notedockercompose-oneclick-deployment-1wlgle","published":1,"__permalink":"/post/siyuan-notedockercompose-oneclick-deployment-1wlgle.html","_id":"cmck5582b000issvw7ekc2kx8","layout":"post","photos":[],"content":"<h1 id=\"思源笔记-docker-compose一键部署\"><a href=\"#思源笔记-docker-compose一键部署\" class=\"headerlink\" title=\"思源笔记-docker-compose一键部署\"></a>思源笔记-docker-compose一键部署</h1><h2 id=\"官方开源版本\"><a href=\"#官方开源版本\" class=\"headerlink\" title=\"官方开源版本\"></a>官方开源版本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3.9&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  siyuan:</span><br><span class=\"line\">    image: b3log/siyuan</span><br><span class=\"line\">    container_name: siyuan</span><br><span class=\"line\">    user: root</span><br><span class=\"line\">    command: [&#x27;--workspace=/siyuan/workspace/&#x27;, &#x27;--accessAuthCode=Qsxzxc123@&#x27;]</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - TZ=Asia/Shanghai</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 6806:6806</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./workspace:/siyuan/workspace</span><br><span class=\"line\">    restart: always</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"热心网友github-com-appdev-siyuan-unlockunlook版本-解锁相关云备份付费功能\"><a href=\"#热心网友github-com-appdev-siyuan-unlockunlook版本-解锁相关云备份付费功能\" class=\"headerlink\" title=\"热心网友github.com&#x2F;appdev&#x2F;siyuan-unlockunlook版本(解锁相关云备份付费功能)\"></a>热心网友<a href=\"https://github.com/appdev/siyuan-unlock\">github.com&#x2F;appdev&#x2F;siyuan-unlock</a>unlook版本(解锁相关云备份付费功能)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建网卡，方便容器间网络通讯</span></span><br><span class=\"line\">docker network create mynet</span><br><span class=\"line\"><span class=\"comment\"># 创建文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> SiYuan</span><br><span class=\"line\"><span class=\"comment\"># 创建docker-compose.yml文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> docker-compose.yml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把以下内容复制进文件后执行</span></span><br><span class=\"line\">docker-compose -f docker-compose.yml up -d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 然后访问你的云主机ip http:IP:6806</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version</span>: <span class=\"string\">&quot;3.9&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services</span>:</span><br><span class=\"line\">  <span class=\"attr\">siyuan</span>:</span><br><span class=\"line\">#    <span class=\"attr\">image</span>: b3log/siyuan</span><br><span class=\"line\">    <span class=\"attr\">image</span>: apkdv/siyuan-unlock</span><br><span class=\"line\">    <span class=\"attr\">container_name</span>: siyuan</span><br><span class=\"line\">    <span class=\"attr\">user</span>: root  # 可选，偷懒做法</span><br><span class=\"line\">    <span class=\"attr\">command</span>: [<span class=\"string\">&#x27;--workspace=/siyuan/SiYuan/&#x27;</span>, <span class=\"string\">&#x27;--accessAuthCode=yourAccessAuthCode&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">environment</span>:</span><br><span class=\"line\">      - <span class=\"variable constant_\">TZ</span>=<span class=\"title class_\">Asia</span>/<span class=\"title class_\">Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">ports</span>:</span><br><span class=\"line\">      - <span class=\"number\">6806</span>:<span class=\"number\">6806</span></span><br><span class=\"line\">    <span class=\"attr\">volumes</span>:</span><br><span class=\"line\">      - ./<span class=\"title class_\">SiYuan</span>:<span class=\"regexp\">/siyuan/</span><span class=\"title class_\">SiYuan</span></span><br><span class=\"line\">    <span class=\"attr\">restart</span>: always</span><br><span class=\"line\">    <span class=\"attr\">networks</span>:</span><br><span class=\"line\">      - mynet</span><br><span class=\"line\"><span class=\"attr\">networks</span>:</span><br><span class=\"line\">  <span class=\"attr\">mynet</span>:</span><br><span class=\"line\">    <span class=\"attr\">external</span>: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>‍</p>\n","cover":false,"more":"<h1 id=\"思源笔记-docker-compose一键部署\"><a href=\"#思源笔记-docker-compose一键部署\" class=\"headerlink\" title=\"思源笔记-docker-compose一键部署\"></a>思源笔记-docker-compose一键部署</h1><h2 id=\"官方开源版本\"><a href=\"#官方开源版本\" class=\"headerlink\" title=\"官方开源版本\"></a>官方开源版本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3.9&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  siyuan:</span><br><span class=\"line\">    image: b3log/siyuan</span><br><span class=\"line\">    container_name: siyuan</span><br><span class=\"line\">    user: root</span><br><span class=\"line\">    command: [&#x27;--workspace=/siyuan/workspace/&#x27;, &#x27;--accessAuthCode=Qsxzxc123@&#x27;]</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - TZ=Asia/Shanghai</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 6806:6806</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./workspace:/siyuan/workspace</span><br><span class=\"line\">    restart: always</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"热心网友github-com-appdev-siyuan-unlockunlook版本-解锁相关云备份付费功能\"><a href=\"#热心网友github-com-appdev-siyuan-unlockunlook版本-解锁相关云备份付费功能\" class=\"headerlink\" title=\"热心网友github.com&#x2F;appdev&#x2F;siyuan-unlockunlook版本(解锁相关云备份付费功能)\"></a>热心网友<a href=\"https://github.com/appdev/siyuan-unlock\">github.com&#x2F;appdev&#x2F;siyuan-unlock</a>unlook版本(解锁相关云备份付费功能)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建网卡，方便容器间网络通讯</span></span><br><span class=\"line\">docker network create mynet</span><br><span class=\"line\"><span class=\"comment\"># 创建文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> SiYuan</span><br><span class=\"line\"><span class=\"comment\"># 创建docker-compose.yml文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> docker-compose.yml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把以下内容复制进文件后执行</span></span><br><span class=\"line\">docker-compose -f docker-compose.yml up -d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 然后访问你的云主机ip http:IP:6806</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version</span>: <span class=\"string\">&quot;3.9&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services</span>:</span><br><span class=\"line\">  <span class=\"attr\">siyuan</span>:</span><br><span class=\"line\">#    <span class=\"attr\">image</span>: b3log/siyuan</span><br><span class=\"line\">    <span class=\"attr\">image</span>: apkdv/siyuan-unlock</span><br><span class=\"line\">    <span class=\"attr\">container_name</span>: siyuan</span><br><span class=\"line\">    <span class=\"attr\">user</span>: root  # 可选，偷懒做法</span><br><span class=\"line\">    <span class=\"attr\">command</span>: [<span class=\"string\">&#x27;--workspace=/siyuan/SiYuan/&#x27;</span>, <span class=\"string\">&#x27;--accessAuthCode=yourAccessAuthCode&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">environment</span>:</span><br><span class=\"line\">      - <span class=\"variable constant_\">TZ</span>=<span class=\"title class_\">Asia</span>/<span class=\"title class_\">Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">ports</span>:</span><br><span class=\"line\">      - <span class=\"number\">6806</span>:<span class=\"number\">6806</span></span><br><span class=\"line\">    <span class=\"attr\">volumes</span>:</span><br><span class=\"line\">      - ./<span class=\"title class_\">SiYuan</span>:<span class=\"regexp\">/siyuan/</span><span class=\"title class_\">SiYuan</span></span><br><span class=\"line\">    <span class=\"attr\">restart</span>: always</span><br><span class=\"line\">    <span class=\"attr\">networks</span>:</span><br><span class=\"line\">      - mynet</span><br><span class=\"line\"><span class=\"attr\">networks</span>:</span><br><span class=\"line\">  <span class=\"attr\">mynet</span>:</span><br><span class=\"line\">    <span class=\"attr\">external</span>: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>‍</p>\n"},{"title":"SpringBoot引入本地Jar包","date":"2025-02-06T06:24:57.000Z","updated":"2025-02-06T06:30:22.000Z","excerpt":"本文介绍了在SpringBoot项目中引入本地Jar包的两种方法。方法一是直接在项目中引用：创建*src/main/resources/lib*目录并放入Jar包，然后在*pom.xml*中添加依赖配置，使用`<scope>system</scope>`并指定`<systemPath>`路径，同时配置Spring Boot Maven插件以包含系统范围的依赖。方法二是将Jar包安装到本地Maven仓库：使用Maven命令`mvn install:install-file`将Jar包安装到本地仓库，然后在*pom.xml*中添加普通依赖配置。两种方法均可有效实现本地Jar包的引入。","comments":1,"toc":true,"abbrlink":13810,"_content":"\n# SpringBoot引入本地Jar包\n\n## SpringBoot引入本地Jar包\n\n在SpringBoot项目中引入本地Jar包有两种常见的方法：直接在项目中引用和将Jar包安装到本地Maven仓库。\n\n方法一：直接在项目中引用\n\n1. **创建lib目录**：在项目的*src/main/resources*目录下创建一个名为*lib*的文件夹，并将本地Jar包放入其中。\n2. **修改pom.xml**：在*pom.xml*文件中添加以下依赖配置：\n\n```JAVA\n<dependency>\n\t<groupId>com.example</groupId>\n\t<artifactId>example-jar</artifactId>\n\t<version>1.0</version>\n\t<scope>system</scope>\n\t<systemPath>${project.basedir}/src/main/resources/lib/example-jar-1.0.jar</systemPath>\n</dependency>\n```\n\n* **配置插件**：为了确保打包时包含这些Jar包，需要在*pom.xml*文件中添加Spring Boot Maven插件配置：\n\n```JAVA\n<build>\n\t<plugins>\n\t\t<plugin>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<includeSystemScope>true</includeSystemScope>\n\t\t\t\t</configuration>\n\t\t</plugin>\n\t</plugins>\n</build>\n```\n\n方法二：将Jar包安装到本地Maven仓库\n\n* **安装Jar包**：使用Maven命令将Jar包安装到本地仓库：\n\n```JAVA\nmvn install:install-file -Dfile=path/to/your.jar -DgroupId=com.example -DartifactId=example-jar -Dversion=1.0 -Dpackaging=jar\n```\n\n* **修改pom.xml**：在*pom.xml*文件中添加以下依赖配置：\n\n```JAVA\n<dependency>\n\t<groupId>com.example</groupId>\n\t<artifactId>example-jar</artifactId>\n\t<version>1.0</version>\n</dependency>\n```\n\n这两种方法都可以有效地将本地Jar包引入到SpringBoot项目中。\n","source":"_posts/springboot-introduces-local-jar-packages-1lmxzy.md","raw":"---\ntitle: SpringBoot引入本地Jar包\ndate: '2025-02-06 14:24:57'\nupdated: '2025-02-06 14:30:22'\nexcerpt: >-\n  本文介绍了在SpringBoot项目中引入本地Jar包的两种方法。方法一是直接在项目中引用：创建*src/main/resources/lib*目录并放入Jar包，然后在*pom.xml*中添加依赖配置，使用`<scope>system</scope>`并指定`<systemPath>`路径，同时配置Spring\n  Boot Maven插件以包含系统范围的依赖。方法二是将Jar包安装到本地Maven仓库：使用Maven命令`mvn\n  install:install-file`将Jar包安装到本地仓库，然后在*pom.xml*中添加普通依赖配置。两种方法均可有效实现本地Jar包的引入。\ntags:\n  - springboot\n  - 本地jar\n  - maven\n  - 依赖管理\n  - 项目配置\ncategories:\n  - Spring\n  - Java\n  - Maven\npermalink: /post/springboot-introduces-local-jar-packages-1lmxzy.html\ncomments: true\ntoc: true\nabbrlink: 13810\n---\n\n# SpringBoot引入本地Jar包\n\n## SpringBoot引入本地Jar包\n\n在SpringBoot项目中引入本地Jar包有两种常见的方法：直接在项目中引用和将Jar包安装到本地Maven仓库。\n\n方法一：直接在项目中引用\n\n1. **创建lib目录**：在项目的*src/main/resources*目录下创建一个名为*lib*的文件夹，并将本地Jar包放入其中。\n2. **修改pom.xml**：在*pom.xml*文件中添加以下依赖配置：\n\n```JAVA\n<dependency>\n\t<groupId>com.example</groupId>\n\t<artifactId>example-jar</artifactId>\n\t<version>1.0</version>\n\t<scope>system</scope>\n\t<systemPath>${project.basedir}/src/main/resources/lib/example-jar-1.0.jar</systemPath>\n</dependency>\n```\n\n* **配置插件**：为了确保打包时包含这些Jar包，需要在*pom.xml*文件中添加Spring Boot Maven插件配置：\n\n```JAVA\n<build>\n\t<plugins>\n\t\t<plugin>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<includeSystemScope>true</includeSystemScope>\n\t\t\t\t</configuration>\n\t\t</plugin>\n\t</plugins>\n</build>\n```\n\n方法二：将Jar包安装到本地Maven仓库\n\n* **安装Jar包**：使用Maven命令将Jar包安装到本地仓库：\n\n```JAVA\nmvn install:install-file -Dfile=path/to/your.jar -DgroupId=com.example -DartifactId=example-jar -Dversion=1.0 -Dpackaging=jar\n```\n\n* **修改pom.xml**：在*pom.xml*文件中添加以下依赖配置：\n\n```JAVA\n<dependency>\n\t<groupId>com.example</groupId>\n\t<artifactId>example-jar</artifactId>\n\t<version>1.0</version>\n</dependency>\n```\n\n这两种方法都可以有效地将本地Jar包引入到SpringBoot项目中。\n","slug":"springboot-introduces-local-jar-packages-1lmxzy","published":1,"__permalink":"/post/springboot-introduces-local-jar-packages-1lmxzy.html","_id":"cmck5582c000jssvw0t4v4t69","layout":"post","photos":[],"content":"<h1 id=\"SpringBoot引入本地Jar包\"><a href=\"#SpringBoot引入本地Jar包\" class=\"headerlink\" title=\"SpringBoot引入本地Jar包\"></a>SpringBoot引入本地Jar包</h1><h2 id=\"SpringBoot引入本地Jar包-1\"><a href=\"#SpringBoot引入本地Jar包-1\" class=\"headerlink\" title=\"SpringBoot引入本地Jar包\"></a>SpringBoot引入本地Jar包</h2><p>在SpringBoot项目中引入本地Jar包有两种常见的方法：直接在项目中引用和将Jar包安装到本地Maven仓库。</p>\n<p>方法一：直接在项目中引用</p>\n<ol>\n<li><strong>创建lib目录</strong>：在项目的<em>src&#x2F;main&#x2F;resources</em>目录下创建一个名为<em>lib</em>的文件夹，并将本地Jar包放入其中。</li>\n<li><strong>修改pom.xml</strong>：在<em>pom.xml</em>文件中添加以下依赖配置：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;example-jar&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;<span class=\"number\">1.0</span>&lt;/version&gt;</span><br><span class=\"line\">\t&lt;scope&gt;system&lt;/scope&gt;</span><br><span class=\"line\">\t&lt;systemPath&gt;$&#123;project.basedir&#125;/src/main/resources/lib/example-jar-<span class=\"number\">1.0</span>.jar&lt;/systemPath&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>配置插件</strong>：为了确保打包时包含这些Jar包，需要在<em>pom.xml</em>文件中添加Spring Boot Maven插件配置：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">\t&lt;plugins&gt;</span><br><span class=\"line\">\t\t&lt;plugin&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;configuration&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;includeSystemScope&gt;<span class=\"literal\">true</span>&lt;/includeSystemScope&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/configuration&gt;</span><br><span class=\"line\">\t\t&lt;/plugin&gt;</span><br><span class=\"line\">\t&lt;/plugins&gt;</span><br><span class=\"line\">&lt;/build&gt;</span><br></pre></td></tr></table></figure>\n\n<p>方法二：将Jar包安装到本地Maven仓库</p>\n<ul>\n<li><strong>安装Jar包</strong>：使用Maven命令将Jar包安装到本地仓库：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install:install-file -Dfile=path/to/your.jar -DgroupId=com.example -DartifactId=example-jar -Dversion=<span class=\"number\">1.0</span> -Dpackaging=jar</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>修改pom.xml</strong>：在<em>pom.xml</em>文件中添加以下依赖配置：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;example-jar&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;<span class=\"number\">1.0</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这两种方法都可以有效地将本地Jar包引入到SpringBoot项目中。</p>\n","cover":false,"more":"<h1 id=\"SpringBoot引入本地Jar包\"><a href=\"#SpringBoot引入本地Jar包\" class=\"headerlink\" title=\"SpringBoot引入本地Jar包\"></a>SpringBoot引入本地Jar包</h1><h2 id=\"SpringBoot引入本地Jar包-1\"><a href=\"#SpringBoot引入本地Jar包-1\" class=\"headerlink\" title=\"SpringBoot引入本地Jar包\"></a>SpringBoot引入本地Jar包</h2><p>在SpringBoot项目中引入本地Jar包有两种常见的方法：直接在项目中引用和将Jar包安装到本地Maven仓库。</p>\n<p>方法一：直接在项目中引用</p>\n<ol>\n<li><strong>创建lib目录</strong>：在项目的<em>src&#x2F;main&#x2F;resources</em>目录下创建一个名为<em>lib</em>的文件夹，并将本地Jar包放入其中。</li>\n<li><strong>修改pom.xml</strong>：在<em>pom.xml</em>文件中添加以下依赖配置：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;example-jar&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;<span class=\"number\">1.0</span>&lt;/version&gt;</span><br><span class=\"line\">\t&lt;scope&gt;system&lt;/scope&gt;</span><br><span class=\"line\">\t&lt;systemPath&gt;$&#123;project.basedir&#125;/src/main/resources/lib/example-jar-<span class=\"number\">1.0</span>.jar&lt;/systemPath&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>配置插件</strong>：为了确保打包时包含这些Jar包，需要在<em>pom.xml</em>文件中添加Spring Boot Maven插件配置：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">\t&lt;plugins&gt;</span><br><span class=\"line\">\t\t&lt;plugin&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;configuration&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;includeSystemScope&gt;<span class=\"literal\">true</span>&lt;/includeSystemScope&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/configuration&gt;</span><br><span class=\"line\">\t\t&lt;/plugin&gt;</span><br><span class=\"line\">\t&lt;/plugins&gt;</span><br><span class=\"line\">&lt;/build&gt;</span><br></pre></td></tr></table></figure>\n\n<p>方法二：将Jar包安装到本地Maven仓库</p>\n<ul>\n<li><strong>安装Jar包</strong>：使用Maven命令将Jar包安装到本地仓库：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install:install-file -Dfile=path/to/your.jar -DgroupId=com.example -DartifactId=example-jar -Dversion=<span class=\"number\">1.0</span> -Dpackaging=jar</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>修改pom.xml</strong>：在<em>pom.xml</em>文件中添加以下依赖配置：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;example-jar&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;<span class=\"number\">1.0</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这两种方法都可以有效地将本地Jar包引入到SpringBoot项目中。</p>\n"},{"title":"测试Linux系统磁盘读写性能（linux磁盘读写测试）","date":"2024-12-19T01:56:33.000Z","updated":"2025-01-17T10:46:27.000Z","excerpt":"本文介绍了在Linux系统下测试磁盘读写性能的三种方法。一是使用dd命令，如“dd if=/dev/zero of=/dev/hda1 bs=1k count=10000”等，通过设置不同参数来测试。二是利用Iozone软件，它能测试特定文件大小、数量及类型的I/O性能，安装使用可参考文档。三是基于文件系统的测试，以EXT4文件系统为例，通过“mkfs.ext4 /dev/hda1 & mount /dev/hda1 /mnt/test”和“iozone -Rab ./result.xls -i 0 -i 1 -i 2 -t 8 /mnt/test”等命令进行，可生成详细结果文件。通过比较不同分区结果，可了解各分区性能，从而选择合适方法准确测试磁盘读写性能，优化系统。","comments":1,"toc":true,"abbrlink":54934,"_content":"\n# 测试Linux系统磁盘读写性能（linux磁盘读写测试）\n\n# 测试Linux系统磁盘读写性能（linux磁盘读写测试）\n\n测试Linux系统磁盘读写性能（linux磁盘读写测试）\n\n---\n\nLinux系统磁盘读写性能测试广泛应用于云计算、分布式计算、嵌入式系统等地方，用于了解磁盘I/O操作效率，合理调整配置以改进系统性能，下面介绍在Linux系统下如何测试磁盘读写性能。\n\n1、在Linux系统下，可以使用dd命令测试磁盘读写性能，具体命令行格式为：dd if=\\[输入文件\\] of=\\[输出文件\\] bs=\\[块大小\\] count=\\[块数\\]。输入文件通常是/dev/zero，输出文件为要测试的磁盘分区，这里使用/dev/hda1表示分区块，块大小可设为1k或4k，块数设置为10000或100000，这里以1M大小的文件为例，命令如下：\n\n```sh\ndd if=/dev/zero of=/dev/hda1 bs=1k count=10000\n```\n\n```sh\ndd if=/dev/zero of=/volume1/testfile.txt bs=32k count=40k oflag=dsync\n```\n\n2、为了更准确的测试磁盘读写性能，可以使用Iozone进行测试。Iozone是一款开源的磁盘I/O性能测试软件，可以测试某一特定的文件大小、文件数量以及文件类型的I/O性能，来获取更精准的测试数据，具体安装使用可以参考相关文档。\n\n3、基于文件系统的IOzone测试也可以更加准确的测试磁盘读写性能，这里以EXT4文件系统为例，可以使用以下命令进行测试：\n\n```sh\nmkfs.ext4 /dev/hda1 & mount /dev/hda1 /mnt/test\n\niozone -Rab ./result.xls -i 0 -i 1 -i 2 -t 8 /mnt/test\n```\n\n上述命令中，“-Rab”用于生成详细的结果文件result.xls，“-i 0、-i 1、-i 2”分别代表不同的测试参数，“-t 8”表示同时使用8个线程测试，/mnt/test是挂载的分区。\n\n4、最后，通过比较不同的分区的结果信息，就可以知道不同的分区的性能情况。\n\n综上，我们介绍了Linux系统下测试磁盘读写性能的三种方法：dd命令、Iozone软件以及基于文件系统的测试，选择合适的方法可以更准确的测试磁盘读写性能，改进系统性能，完成更加高效的工作。\n","source":"_posts/test-the-linux-system-disk-read-and-write-performance-linux-disk-read-and-write-test-z1eep63.md","raw":"---\ntitle: 测试Linux系统磁盘读写性能（linux磁盘读写测试）\ndate: '2024-12-19 09:56:33'\nupdated: '2025-01-17 18:46:27'\nexcerpt: >-\n  本文介绍了在Linux系统下测试磁盘读写性能的三种方法。一是使用dd命令，如“dd if=/dev/zero of=/dev/hda1 bs=1k\n  count=10000”等，通过设置不同参数来测试。二是利用Iozone软件，它能测试特定文件大小、数量及类型的I/O性能，安装使用可参考文档。三是基于文件系统的测试，以EXT4文件系统为例，通过“mkfs.ext4\n  /dev/hda1 & mount /dev/hda1 /mnt/test”和“iozone -Rab ./result.xls -i 0 -i 1 -i\n  2 -t 8 /mnt/test”等命令进行，可生成详细结果文件。通过比较不同分区结果，可了解各分区性能，从而选择合适方法准确测试磁盘读写性能，优化系统。\ntags:\n  - 磁盘测试\n  - iozone\n  - dd命令\n  - 文件系统\n  - 性能优化\ncategories:\n  - Linux系统\n  - 磁盘测试\npermalink: >-\n  /post/test-the-linux-system-disk-read-and-write-performance-linux-disk-read-and-write-test-z1eep63.html\ncomments: true\ntoc: true\nabbrlink: 54934\n---\n\n# 测试Linux系统磁盘读写性能（linux磁盘读写测试）\n\n# 测试Linux系统磁盘读写性能（linux磁盘读写测试）\n\n测试Linux系统磁盘读写性能（linux磁盘读写测试）\n\n---\n\nLinux系统磁盘读写性能测试广泛应用于云计算、分布式计算、嵌入式系统等地方，用于了解磁盘I/O操作效率，合理调整配置以改进系统性能，下面介绍在Linux系统下如何测试磁盘读写性能。\n\n1、在Linux系统下，可以使用dd命令测试磁盘读写性能，具体命令行格式为：dd if=\\[输入文件\\] of=\\[输出文件\\] bs=\\[块大小\\] count=\\[块数\\]。输入文件通常是/dev/zero，输出文件为要测试的磁盘分区，这里使用/dev/hda1表示分区块，块大小可设为1k或4k，块数设置为10000或100000，这里以1M大小的文件为例，命令如下：\n\n```sh\ndd if=/dev/zero of=/dev/hda1 bs=1k count=10000\n```\n\n```sh\ndd if=/dev/zero of=/volume1/testfile.txt bs=32k count=40k oflag=dsync\n```\n\n2、为了更准确的测试磁盘读写性能，可以使用Iozone进行测试。Iozone是一款开源的磁盘I/O性能测试软件，可以测试某一特定的文件大小、文件数量以及文件类型的I/O性能，来获取更精准的测试数据，具体安装使用可以参考相关文档。\n\n3、基于文件系统的IOzone测试也可以更加准确的测试磁盘读写性能，这里以EXT4文件系统为例，可以使用以下命令进行测试：\n\n```sh\nmkfs.ext4 /dev/hda1 & mount /dev/hda1 /mnt/test\n\niozone -Rab ./result.xls -i 0 -i 1 -i 2 -t 8 /mnt/test\n```\n\n上述命令中，“-Rab”用于生成详细的结果文件result.xls，“-i 0、-i 1、-i 2”分别代表不同的测试参数，“-t 8”表示同时使用8个线程测试，/mnt/test是挂载的分区。\n\n4、最后，通过比较不同的分区的结果信息，就可以知道不同的分区的性能情况。\n\n综上，我们介绍了Linux系统下测试磁盘读写性能的三种方法：dd命令、Iozone软件以及基于文件系统的测试，选择合适的方法可以更准确的测试磁盘读写性能，改进系统性能，完成更加高效的工作。\n","slug":"test-the-linux-system-disk-read-and-write-performance-linux-disk-read-and-write-test-z1eep63","published":1,"__permalink":"/post/test-the-linux-system-disk-read-and-write-performance-linux-disk-read-and-write-test-z1eep63.html","_id":"cmck5582d000kssvw59m4ehih","layout":"post","photos":[],"content":"<h1 id=\"测试Linux系统磁盘读写性能（linux磁盘读写测试）\"><a href=\"#测试Linux系统磁盘读写性能（linux磁盘读写测试）\" class=\"headerlink\" title=\"测试Linux系统磁盘读写性能（linux磁盘读写测试）\"></a>测试Linux系统磁盘读写性能（linux磁盘读写测试）</h1><h1 id=\"测试Linux系统磁盘读写性能（linux磁盘读写测试）-1\"><a href=\"#测试Linux系统磁盘读写性能（linux磁盘读写测试）-1\" class=\"headerlink\" title=\"测试Linux系统磁盘读写性能（linux磁盘读写测试）\"></a>测试Linux系统磁盘读写性能（linux磁盘读写测试）</h1><p>测试Linux系统磁盘读写性能（linux磁盘读写测试）</p>\n<hr>\n<p>Linux系统磁盘读写性能测试广泛应用于云计算、分布式计算、嵌入式系统等地方，用于了解磁盘I&#x2F;O操作效率，合理调整配置以改进系统性能，下面介绍在Linux系统下如何测试磁盘读写性能。</p>\n<p>1、在Linux系统下，可以使用dd命令测试磁盘读写性能，具体命令行格式为：dd if&#x3D;[输入文件] of&#x3D;[输出文件] bs&#x3D;[块大小] count&#x3D;[块数]。输入文件通常是&#x2F;dev&#x2F;zero，输出文件为要测试的磁盘分区，这里使用&#x2F;dev&#x2F;hda1表示分区块，块大小可设为1k或4k，块数设置为10000或100000，这里以1M大小的文件为例，命令如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=/dev/zero of=/dev/hda1 bs=1k count=10000</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=/dev/zero of=/volume1/testfile.txt bs=32k count=40k oflag=dsync</span><br></pre></td></tr></table></figure>\n\n<p>2、为了更准确的测试磁盘读写性能，可以使用Iozone进行测试。Iozone是一款开源的磁盘I&#x2F;O性能测试软件，可以测试某一特定的文件大小、文件数量以及文件类型的I&#x2F;O性能，来获取更精准的测试数据，具体安装使用可以参考相关文档。</p>\n<p>3、基于文件系统的IOzone测试也可以更加准确的测试磁盘读写性能，这里以EXT4文件系统为例，可以使用以下命令进行测试：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.ext4 /dev/hda1 &amp; mount /dev/hda1 /mnt/test</span><br><span class=\"line\"></span><br><span class=\"line\">iozone -Rab ./result.xls -i 0 -i 1 -i 2 -t 8 /mnt/test</span><br></pre></td></tr></table></figure>\n\n<p>上述命令中，“-Rab”用于生成详细的结果文件result.xls，“-i 0、-i 1、-i 2”分别代表不同的测试参数，“-t 8”表示同时使用8个线程测试，&#x2F;mnt&#x2F;test是挂载的分区。</p>\n<p>4、最后，通过比较不同的分区的结果信息，就可以知道不同的分区的性能情况。</p>\n<p>综上，我们介绍了Linux系统下测试磁盘读写性能的三种方法：dd命令、Iozone软件以及基于文件系统的测试，选择合适的方法可以更准确的测试磁盘读写性能，改进系统性能，完成更加高效的工作。</p>\n","cover":false,"more":"<h1 id=\"测试Linux系统磁盘读写性能（linux磁盘读写测试）\"><a href=\"#测试Linux系统磁盘读写性能（linux磁盘读写测试）\" class=\"headerlink\" title=\"测试Linux系统磁盘读写性能（linux磁盘读写测试）\"></a>测试Linux系统磁盘读写性能（linux磁盘读写测试）</h1><h1 id=\"测试Linux系统磁盘读写性能（linux磁盘读写测试）-1\"><a href=\"#测试Linux系统磁盘读写性能（linux磁盘读写测试）-1\" class=\"headerlink\" title=\"测试Linux系统磁盘读写性能（linux磁盘读写测试）\"></a>测试Linux系统磁盘读写性能（linux磁盘读写测试）</h1><p>测试Linux系统磁盘读写性能（linux磁盘读写测试）</p>\n<hr>\n<p>Linux系统磁盘读写性能测试广泛应用于云计算、分布式计算、嵌入式系统等地方，用于了解磁盘I&#x2F;O操作效率，合理调整配置以改进系统性能，下面介绍在Linux系统下如何测试磁盘读写性能。</p>\n<p>1、在Linux系统下，可以使用dd命令测试磁盘读写性能，具体命令行格式为：dd if&#x3D;[输入文件] of&#x3D;[输出文件] bs&#x3D;[块大小] count&#x3D;[块数]。输入文件通常是&#x2F;dev&#x2F;zero，输出文件为要测试的磁盘分区，这里使用&#x2F;dev&#x2F;hda1表示分区块，块大小可设为1k或4k，块数设置为10000或100000，这里以1M大小的文件为例，命令如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=/dev/zero of=/dev/hda1 bs=1k count=10000</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=/dev/zero of=/volume1/testfile.txt bs=32k count=40k oflag=dsync</span><br></pre></td></tr></table></figure>\n\n<p>2、为了更准确的测试磁盘读写性能，可以使用Iozone进行测试。Iozone是一款开源的磁盘I&#x2F;O性能测试软件，可以测试某一特定的文件大小、文件数量以及文件类型的I&#x2F;O性能，来获取更精准的测试数据，具体安装使用可以参考相关文档。</p>\n<p>3、基于文件系统的IOzone测试也可以更加准确的测试磁盘读写性能，这里以EXT4文件系统为例，可以使用以下命令进行测试：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.ext4 /dev/hda1 &amp; mount /dev/hda1 /mnt/test</span><br><span class=\"line\"></span><br><span class=\"line\">iozone -Rab ./result.xls -i 0 -i 1 -i 2 -t 8 /mnt/test</span><br></pre></td></tr></table></figure>\n\n<p>上述命令中，“-Rab”用于生成详细的结果文件result.xls，“-i 0、-i 1、-i 2”分别代表不同的测试参数，“-t 8”表示同时使用8个线程测试，&#x2F;mnt&#x2F;test是挂载的分区。</p>\n<p>4、最后，通过比较不同的分区的结果信息，就可以知道不同的分区的性能情况。</p>\n<p>综上，我们介绍了Linux系统下测试磁盘读写性能的三种方法：dd命令、Iozone软件以及基于文件系统的测试，选择合适的方法可以更准确的测试磁盘读写性能，改进系统性能，完成更加高效的工作。</p>\n"},{"title":"在 MyBatis-Plus 中使用 IN 语法","date":"2024-12-31T03:19:30.000Z","updated":"2024-12-31T03:26:42.000Z","excerpt":"在 MyBatis-Plus 中使用 `IN` 语法可以通过多种方式实现。首先，可以使用 `QueryWrapper` 或 `LambdaQueryWrapper` 的 `in` 方法动态构建查询条件，适合在 Java 代码中直接操作。其次，可以在 XML 映射文件中编写 SQL 语句，使用 `<foreach>` 标签处理 `IN` 查询，适合复杂 SQL 场景。此外，注解方式也可用于编写 `IN` 查询，但需手动处理列表转换。需要注意的是，当传入的列表为空时，可能导致 SQL 语法错误，因此应提前检查列表是否为空。根据需求选择合适的方式，既能提高代码可读性，又能避免潜在问题。","comments":1,"toc":true,"abbrlink":42944,"_content":"\n# 在 MyBatis-Plus 中使用 IN 语法\n\n在 MyBatis-Plus 中使用 `IN`​ 语法可以通过以下几种方式实现：\n\n### 1. 使用 `QueryWrapper`​ 的 `in`​ 方法\n\n​`QueryWrapper`​ 是 MyBatis-Plus 提供的查询条件构造器，可以使用 `in`​ 方法来构建 `IN`​ 查询。\n\n```JAVA\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n\npublic class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService {\n\n    public List<User> findUsersByIds(List<Long> ids) {\n        QueryWrapper<User> queryWrapper = new QueryWrapper<>();\n        queryWrapper.in(\"id\", ids);\n        return baseMapper.selectList(queryWrapper);\n    }\n}\n```\n\n**SQL 输出：**\n\n```\nSELECT * FROM user WHERE id IN (1, 2, 3);\n```\n\n### 2. 使用 `LambdaQueryWrapper`​ 的 `in`​ 方法\n\n​`LambdaQueryWrapper`​ 提供了类型安全的查询条件构造，可以使用 `in`​ 方法来构建 `IN`​ 查询。\n\n```\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n\npublic class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService {\n\n    public List<User> findUsersByIds(List<Long> ids) {\n        LambdaQueryWrapper<User> lambdaQueryWrapper = new LambdaQueryWrapper<>();\n        lambdaQueryWrapper.in(User::getId, ids);\n        return baseMapper.selectList(lambdaQueryWrapper);\n    }\n}\n```\n\n**SQL 输出：**\n\n```\nSELECT * FROM user WHERE id IN (1, 2, 3);\n```\n\n### 3. 使用 XML 映射文件\n\n在 MyBatis 的 XML 映射文件中，可以直接编写 SQL 语句，使用 `IN`​ 语法。\n\n```\n<select id=\"findUsersByIds\" resultType=\"User\">\n    SELECT * FROM user WHERE id IN\n    <foreach collection=\"ids\" item=\"id\" open=\"(\" separator=\",\" close=\")\">\n        #{id}\n    </foreach>\n</select>\n```\n\n运行 HTML\n\n**Java 代码：**\n\n```\npublic interface UserMapper extends BaseMapper<User> {\n    List<User> findUsersByIds(@Param(\"ids\") List<Long> ids);\n}\n```\n\n**SQL 输出：**\n\n```\nSELECT * FROM user WHERE id IN (1, 2, 3);\n```\n\n### 4. 使用注解方式\n\n在 MyBatis 的注解方式中，可以使用 `@Select`​ 注解编写 SQL 语句，使用 `IN`​ 语法。\n\n```\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Select;\n\nimport java.util.List;\n\npublic interface UserMapper extends BaseMapper<User> {\n\n    @Select(\"SELECT * FROM user WHERE id IN (#{ids})\")\n    List<User> findUsersByIds(@Param(\"ids\") List<Long> ids);\n}\n```\n\n**注意：**  这种方式需要手动将 `List`​ 转换为逗号分隔的字符串。\n\n### 5. 处理空列表的情况\n\n在使用 `IN`​ 语法时，如果传入的列表为空，可能会导致 SQL 语法错误。可以通过以下方式处理：\n\n```\npublic List<User> findUsersByIds(List<Long> ids) {\n    if (ids == null || ids.isEmpty()) {\n        return new ArrayList<>();\n    }\n    QueryWrapper<User> queryWrapper = new QueryWrapper<>();\n    queryWrapper.in(\"id\", ids);\n    return baseMapper.selectList(queryWrapper);\n}\n```\n\n### 总结\n\n* ​**​`QueryWrapper`​**​ **和** **​`LambdaQueryWrapper`​**​ 是 MyBatis-Plus 提供的便捷查询条件构造器，适合在 Java 代码中动态构建查询条件。\n* **XML 映射文件** 和 **注解方式** 适合在需要编写复杂 SQL 或需要复用 SQL 的场景下使用。\n* **处理空列表** 是使用 `IN`​ 语法时需要注意的一个细节，避免 SQL 语法错误。\n\n根据具体需求选择合适的方式来实现 `IN`​ 查询。\n\n‍\n\n除此之外，在使用 `LambdaQueryWrapper`​ 的 `in`​ 方法时，如果传入的数组或列表为空，可能会导致生成的 SQL 语句不合法（例如 `IN ()`​），从而引发 SQL 语法错误。为了避免这种情况，可以在调用 `in`​ 方法之前对数组或列表进行判空处理。\n\n以下是处理空数组的几种常见方式：\n\n---\n\n### 1. **直接返回空结果**\n\n如果传入的数组为空，直接返回一个空列表，避免执行 SQL 查询。\n\n```\npublic List<User> findUsersByIds(List<Long> ids) {\n    if (ids == null || ids.isEmpty()) {\n        return new ArrayList<>();\n    }\n    LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n    queryWrapper.in(User::getId, ids);\n    return baseMapper.selectList(queryWrapper);\n}\n```\n\n**优点：**\n\n* 简单直接，避免执行无意义的查询。\n\n**缺点：**\n\n* 需要在业务逻辑中显式处理空列表。\n\n---\n\n### 2. **添加空值检查条件**\n\n如果希望即使传入空列表也能执行查询，可以通过添加一个永假条件（例如 `1 = 0`​）来避免生成 `IN ()`​。\n\n```\npublic List<User> findUsersByIds(List<Long> ids) {\n    LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n    if (ids == null || ids.isEmpty()) {\n        queryWrapper.apply(\"1 = 0\"); // 永假条件，避免生成 IN ()\n    } else {\n        queryWrapper.in(User::getId, ids);\n    }\n    return baseMapper.selectList(queryWrapper);\n}\n```\n\n**生成的 SQL：**\n\n```\nSELECT * FROM user WHERE 1 = 0;\n```\n\n**优点：**\n\n* 统一处理空列表，避免在业务逻辑中显式返回空列表。\n\n**缺点：**\n\n* 生成的 SQL 可能不够直观。\n\n---\n\n### 3. **使用** **​`Optional`​**​ **处理空值**\n\n使用 `Optional`​ 对传入的列表进行包装，避免空指针异常。\n\n```\npublic List<User> findUsersByIds(List<Long> ids) {\n    List<Long> nonNullIds = Optional.ofNullable(ids).orElse(Collections.emptyList());\n    if (nonNullIds.isEmpty()) {\n        return new ArrayList<>();\n    }\n    LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n    queryWrapper.in(User::getId, nonNullIds);\n    return baseMapper.selectList(queryWrapper);\n}\n```\n\n**优点：**\n\n* 代码更健壮，避免空指针异常。\n\n**缺点：**\n\n* 需要额外引入 `Optional`​。\n\n---\n\n### 4. **自定义工具方法**\n\n封装一个工具方法，统一处理 `in`​ 方法的空列表问题。\n\n```\npublic class QueryWrapperUtils {\n    public static <T, R> void inIfNotEmpty(LambdaQueryWrapper<T> queryWrapper, SFunction<T, R> column, Collection<R> values) {\n        if (values != null && !values.isEmpty()) {\n            queryWrapper.in(column, values);\n        } else {\n            queryWrapper.apply(\"1 = 0\"); // 永假条件\n        }\n    }\n}\n\n// 使用工具方法\npublic List<User> findUsersByIds(List<Long> ids) {\n    LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n    QueryWrapperUtils.inIfNotEmpty(queryWrapper, User::getId, ids);\n    return baseMapper.selectList(queryWrapper);\n}\n```\n\n**优点：**\n\n* 代码复用，逻辑清晰。\n\n**缺点：**\n\n* 需要额外定义工具类。\n\n---\n\n### 5. **使用 MyBatis-Plus 的** **​`apply`​**​ **方法动态生成 SQL**\n\n通过 `apply`​ 方法动态生成 `IN`​ 子句，避免空列表问题。\n\n```\npublic List<User> findUsersByIds(List<Long> ids) {\n    LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n    if (ids != null && !ids.isEmpty()) {\n        String inClause = ids.stream()\n                .map(String::valueOf)\n                .collect(Collectors.joining(\",\", \"(\", \")\"));\n        queryWrapper.apply(\"id IN \" + inClause);\n    } else {\n        queryWrapper.apply(\"1 = 0\");\n    }\n    return baseMapper.selectList(queryWrapper);\n}\n```\n\n**生成的 SQL：**\n\n```\nSELECT * FROM user WHERE id IN (1, 2, 3);\n```\n\n**优点：**\n\n* 灵活控制 SQL 生成。\n\n**缺点：**\n\n* 需要手动拼接 SQL，可能引入 SQL 注入风险（需确保输入安全）。\n\n---\n\n### 总结\n\n|方法|优点|缺点|\n| ----------------| --------------------------| ---------------------------------------|\n|直接返回空结果|简单直接|需在业务逻辑中显式处理|\n|添加永假条件|统一处理空列表|生成的 SQL 不够直观|\n|使用 `Optional`​|避免空指针异常，代码健壮|需要额外引入 `Optional`​|\n|自定义工具方法|代码复用，逻辑清晰|需要额外定义工具类|\n|动态生成 SQL|灵活控制 SQL 生成|需手动拼接 SQL，可能引入 SQL 注入风险|\n\n根据具体场景选择合适的方式处理空数组问题。推荐使用 **直接返回空结果** 或 **自定义工具方法**，既简单又安全。\n","source":"_posts/use-in-grammar-in-mybatisplus-1bihse.md","raw":"---\ntitle: 在 MyBatis-Plus 中使用 IN 语法\ndate: '2024-12-31 11:19:30'\nupdated: '2024-12-31 11:26:42'\nexcerpt: >-\n  在 MyBatis-Plus 中使用 `IN` 语法可以通过多种方式实现。首先，可以使用 `QueryWrapper` 或\n  `LambdaQueryWrapper` 的 `in` 方法动态构建查询条件，适合在 Java 代码中直接操作。其次，可以在 XML 映射文件中编写 SQL\n  语句，使用 `<foreach>` 标签处理 `IN` 查询，适合复杂 SQL 场景。此外，注解方式也可用于编写 `IN`\n  查询，但需手动处理列表转换。需要注意的是，当传入的列表为空时，可能导致 SQL\n  语法错误，因此应提前检查列表是否为空。根据需求选择合适的方式，既能提高代码可读性，又能避免潜在问题。\ntags:\n  - mybatis-plus\n  - in语法\n  - 查询\n  - 空列表处理\n  - lambda\ncategories:\n  - mybatis\npermalink: /post/use-in-grammar-in-mybatisplus-1bihse.html\ncomments: true\ntoc: true\nabbrlink: 42944\n---\n\n# 在 MyBatis-Plus 中使用 IN 语法\n\n在 MyBatis-Plus 中使用 `IN`​ 语法可以通过以下几种方式实现：\n\n### 1. 使用 `QueryWrapper`​ 的 `in`​ 方法\n\n​`QueryWrapper`​ 是 MyBatis-Plus 提供的查询条件构造器，可以使用 `in`​ 方法来构建 `IN`​ 查询。\n\n```JAVA\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n\npublic class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService {\n\n    public List<User> findUsersByIds(List<Long> ids) {\n        QueryWrapper<User> queryWrapper = new QueryWrapper<>();\n        queryWrapper.in(\"id\", ids);\n        return baseMapper.selectList(queryWrapper);\n    }\n}\n```\n\n**SQL 输出：**\n\n```\nSELECT * FROM user WHERE id IN (1, 2, 3);\n```\n\n### 2. 使用 `LambdaQueryWrapper`​ 的 `in`​ 方法\n\n​`LambdaQueryWrapper`​ 提供了类型安全的查询条件构造，可以使用 `in`​ 方法来构建 `IN`​ 查询。\n\n```\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n\npublic class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService {\n\n    public List<User> findUsersByIds(List<Long> ids) {\n        LambdaQueryWrapper<User> lambdaQueryWrapper = new LambdaQueryWrapper<>();\n        lambdaQueryWrapper.in(User::getId, ids);\n        return baseMapper.selectList(lambdaQueryWrapper);\n    }\n}\n```\n\n**SQL 输出：**\n\n```\nSELECT * FROM user WHERE id IN (1, 2, 3);\n```\n\n### 3. 使用 XML 映射文件\n\n在 MyBatis 的 XML 映射文件中，可以直接编写 SQL 语句，使用 `IN`​ 语法。\n\n```\n<select id=\"findUsersByIds\" resultType=\"User\">\n    SELECT * FROM user WHERE id IN\n    <foreach collection=\"ids\" item=\"id\" open=\"(\" separator=\",\" close=\")\">\n        #{id}\n    </foreach>\n</select>\n```\n\n运行 HTML\n\n**Java 代码：**\n\n```\npublic interface UserMapper extends BaseMapper<User> {\n    List<User> findUsersByIds(@Param(\"ids\") List<Long> ids);\n}\n```\n\n**SQL 输出：**\n\n```\nSELECT * FROM user WHERE id IN (1, 2, 3);\n```\n\n### 4. 使用注解方式\n\n在 MyBatis 的注解方式中，可以使用 `@Select`​ 注解编写 SQL 语句，使用 `IN`​ 语法。\n\n```\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Select;\n\nimport java.util.List;\n\npublic interface UserMapper extends BaseMapper<User> {\n\n    @Select(\"SELECT * FROM user WHERE id IN (#{ids})\")\n    List<User> findUsersByIds(@Param(\"ids\") List<Long> ids);\n}\n```\n\n**注意：**  这种方式需要手动将 `List`​ 转换为逗号分隔的字符串。\n\n### 5. 处理空列表的情况\n\n在使用 `IN`​ 语法时，如果传入的列表为空，可能会导致 SQL 语法错误。可以通过以下方式处理：\n\n```\npublic List<User> findUsersByIds(List<Long> ids) {\n    if (ids == null || ids.isEmpty()) {\n        return new ArrayList<>();\n    }\n    QueryWrapper<User> queryWrapper = new QueryWrapper<>();\n    queryWrapper.in(\"id\", ids);\n    return baseMapper.selectList(queryWrapper);\n}\n```\n\n### 总结\n\n* ​**​`QueryWrapper`​**​ **和** **​`LambdaQueryWrapper`​**​ 是 MyBatis-Plus 提供的便捷查询条件构造器，适合在 Java 代码中动态构建查询条件。\n* **XML 映射文件** 和 **注解方式** 适合在需要编写复杂 SQL 或需要复用 SQL 的场景下使用。\n* **处理空列表** 是使用 `IN`​ 语法时需要注意的一个细节，避免 SQL 语法错误。\n\n根据具体需求选择合适的方式来实现 `IN`​ 查询。\n\n‍\n\n除此之外，在使用 `LambdaQueryWrapper`​ 的 `in`​ 方法时，如果传入的数组或列表为空，可能会导致生成的 SQL 语句不合法（例如 `IN ()`​），从而引发 SQL 语法错误。为了避免这种情况，可以在调用 `in`​ 方法之前对数组或列表进行判空处理。\n\n以下是处理空数组的几种常见方式：\n\n---\n\n### 1. **直接返回空结果**\n\n如果传入的数组为空，直接返回一个空列表，避免执行 SQL 查询。\n\n```\npublic List<User> findUsersByIds(List<Long> ids) {\n    if (ids == null || ids.isEmpty()) {\n        return new ArrayList<>();\n    }\n    LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n    queryWrapper.in(User::getId, ids);\n    return baseMapper.selectList(queryWrapper);\n}\n```\n\n**优点：**\n\n* 简单直接，避免执行无意义的查询。\n\n**缺点：**\n\n* 需要在业务逻辑中显式处理空列表。\n\n---\n\n### 2. **添加空值检查条件**\n\n如果希望即使传入空列表也能执行查询，可以通过添加一个永假条件（例如 `1 = 0`​）来避免生成 `IN ()`​。\n\n```\npublic List<User> findUsersByIds(List<Long> ids) {\n    LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n    if (ids == null || ids.isEmpty()) {\n        queryWrapper.apply(\"1 = 0\"); // 永假条件，避免生成 IN ()\n    } else {\n        queryWrapper.in(User::getId, ids);\n    }\n    return baseMapper.selectList(queryWrapper);\n}\n```\n\n**生成的 SQL：**\n\n```\nSELECT * FROM user WHERE 1 = 0;\n```\n\n**优点：**\n\n* 统一处理空列表，避免在业务逻辑中显式返回空列表。\n\n**缺点：**\n\n* 生成的 SQL 可能不够直观。\n\n---\n\n### 3. **使用** **​`Optional`​**​ **处理空值**\n\n使用 `Optional`​ 对传入的列表进行包装，避免空指针异常。\n\n```\npublic List<User> findUsersByIds(List<Long> ids) {\n    List<Long> nonNullIds = Optional.ofNullable(ids).orElse(Collections.emptyList());\n    if (nonNullIds.isEmpty()) {\n        return new ArrayList<>();\n    }\n    LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n    queryWrapper.in(User::getId, nonNullIds);\n    return baseMapper.selectList(queryWrapper);\n}\n```\n\n**优点：**\n\n* 代码更健壮，避免空指针异常。\n\n**缺点：**\n\n* 需要额外引入 `Optional`​。\n\n---\n\n### 4. **自定义工具方法**\n\n封装一个工具方法，统一处理 `in`​ 方法的空列表问题。\n\n```\npublic class QueryWrapperUtils {\n    public static <T, R> void inIfNotEmpty(LambdaQueryWrapper<T> queryWrapper, SFunction<T, R> column, Collection<R> values) {\n        if (values != null && !values.isEmpty()) {\n            queryWrapper.in(column, values);\n        } else {\n            queryWrapper.apply(\"1 = 0\"); // 永假条件\n        }\n    }\n}\n\n// 使用工具方法\npublic List<User> findUsersByIds(List<Long> ids) {\n    LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n    QueryWrapperUtils.inIfNotEmpty(queryWrapper, User::getId, ids);\n    return baseMapper.selectList(queryWrapper);\n}\n```\n\n**优点：**\n\n* 代码复用，逻辑清晰。\n\n**缺点：**\n\n* 需要额外定义工具类。\n\n---\n\n### 5. **使用 MyBatis-Plus 的** **​`apply`​**​ **方法动态生成 SQL**\n\n通过 `apply`​ 方法动态生成 `IN`​ 子句，避免空列表问题。\n\n```\npublic List<User> findUsersByIds(List<Long> ids) {\n    LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n    if (ids != null && !ids.isEmpty()) {\n        String inClause = ids.stream()\n                .map(String::valueOf)\n                .collect(Collectors.joining(\",\", \"(\", \")\"));\n        queryWrapper.apply(\"id IN \" + inClause);\n    } else {\n        queryWrapper.apply(\"1 = 0\");\n    }\n    return baseMapper.selectList(queryWrapper);\n}\n```\n\n**生成的 SQL：**\n\n```\nSELECT * FROM user WHERE id IN (1, 2, 3);\n```\n\n**优点：**\n\n* 灵活控制 SQL 生成。\n\n**缺点：**\n\n* 需要手动拼接 SQL，可能引入 SQL 注入风险（需确保输入安全）。\n\n---\n\n### 总结\n\n|方法|优点|缺点|\n| ----------------| --------------------------| ---------------------------------------|\n|直接返回空结果|简单直接|需在业务逻辑中显式处理|\n|添加永假条件|统一处理空列表|生成的 SQL 不够直观|\n|使用 `Optional`​|避免空指针异常，代码健壮|需要额外引入 `Optional`​|\n|自定义工具方法|代码复用，逻辑清晰|需要额外定义工具类|\n|动态生成 SQL|灵活控制 SQL 生成|需手动拼接 SQL，可能引入 SQL 注入风险|\n\n根据具体场景选择合适的方式处理空数组问题。推荐使用 **直接返回空结果** 或 **自定义工具方法**，既简单又安全。\n","slug":"use-in-grammar-in-mybatisplus-1bihse","published":1,"__permalink":"/post/use-in-grammar-in-mybatisplus-1bihse.html","_id":"cmck5582f000pssvwh6cr4elk","layout":"post","photos":[],"content":"<h1 id=\"在-MyBatis-Plus-中使用-IN-语法\"><a href=\"#在-MyBatis-Plus-中使用-IN-语法\" class=\"headerlink\" title=\"在 MyBatis-Plus 中使用 IN 语法\"></a>在 MyBatis-Plus 中使用 IN 语法</h1><p>在 MyBatis-Plus 中使用 <code>IN</code>​ 语法可以通过以下几种方式实现：</p>\n<h3 id=\"1-使用-QueryWrapper​-的-in​-方法\"><a href=\"#1-使用-QueryWrapper​-的-in​-方法\" class=\"headerlink\" title=\"1. 使用 QueryWrapper​ 的 in​ 方法\"></a>1. 使用 <code>QueryWrapper</code>​ 的 <code>in</code>​ 方法</h3><p>​<code>QueryWrapper</code>​ 是 MyBatis-Plus 提供的查询条件构造器，可以使用 <code>in</code>​ 方法来构建 <code>IN</code>​ 查询。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ServiceImpl</span>&lt;UserMapper, User&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">findUsersByIds</span><span class=\"params\">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class=\"line\">        QueryWrapper&lt;User&gt; queryWrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">        queryWrapper.in(<span class=\"string\">&quot;id&quot;</span>, ids);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> baseMapper.selectList(queryWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>SQL 输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM user WHERE id IN (1, 2, 3);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用-LambdaQueryWrapper​-的-in​-方法\"><a href=\"#2-使用-LambdaQueryWrapper​-的-in​-方法\" class=\"headerlink\" title=\"2. 使用 LambdaQueryWrapper​ 的 in​ 方法\"></a>2. 使用 <code>LambdaQueryWrapper</code>​ 的 <code>in</code>​ 方法</h3><p>​<code>LambdaQueryWrapper</code>​ 提供了类型安全的查询条件构造，可以使用 <code>in</code>​ 方法来构建 <code>IN</code>​ 查询。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class=\"line\">import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class=\"line\"></span><br><span class=\"line\">public class UserServiceImpl extends ServiceImpl&lt;UserMapper, User&gt; implements UserService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;User&gt; findUsersByIds(List&lt;Long&gt; ids) &#123;</span><br><span class=\"line\">        LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class=\"line\">        lambdaQueryWrapper.in(User::getId, ids);</span><br><span class=\"line\">        return baseMapper.selectList(lambdaQueryWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>SQL 输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM user WHERE id IN (1, 2, 3);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-使用-XML-映射文件\"><a href=\"#3-使用-XML-映射文件\" class=\"headerlink\" title=\"3. 使用 XML 映射文件\"></a>3. 使用 XML 映射文件</h3><p>在 MyBatis 的 XML 映射文件中，可以直接编写 SQL 语句，使用 <code>IN</code>​ 语法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;findUsersByIds&quot; resultType=&quot;User&quot;&gt;</span><br><span class=\"line\">    SELECT * FROM user WHERE id IN</span><br><span class=\"line\">    &lt;foreach collection=&quot;ids&quot; item=&quot;id&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class=\"line\">        #&#123;id&#125;</span><br><span class=\"line\">    &lt;/foreach&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n\n<p>运行 HTML</p>\n<p><strong>Java 代码：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class=\"line\">    List&lt;User&gt; findUsersByIds(@Param(&quot;ids&quot;) List&lt;Long&gt; ids);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>SQL 输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM user WHERE id IN (1, 2, 3);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-使用注解方式\"><a href=\"#4-使用注解方式\" class=\"headerlink\" title=\"4. 使用注解方式\"></a>4. 使用注解方式</h3><p>在 MyBatis 的注解方式中，可以使用 <code>@Select</code>​ 注解编写 SQL 语句，使用 <code>IN</code>​ 语法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.ibatis.annotations.Param;</span><br><span class=\"line\">import org.apache.ibatis.annotations.Select;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Select(&quot;SELECT * FROM user WHERE id IN (#&#123;ids&#125;)&quot;)</span><br><span class=\"line\">    List&lt;User&gt; findUsersByIds(@Param(&quot;ids&quot;) List&lt;Long&gt; ids);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>  这种方式需要手动将 <code>List</code>​ 转换为逗号分隔的字符串。</p>\n<h3 id=\"5-处理空列表的情况\"><a href=\"#5-处理空列表的情况\" class=\"headerlink\" title=\"5. 处理空列表的情况\"></a>5. 处理空列表的情况</h3><p>在使用 <code>IN</code>​ 语法时，如果传入的列表为空，可能会导致 SQL 语法错误。可以通过以下方式处理：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;User&gt; findUsersByIds(List&lt;Long&gt; ids) &#123;</span><br><span class=\"line\">    if (ids == null || ids.isEmpty()) &#123;</span><br><span class=\"line\">        return new ArrayList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class=\"line\">    queryWrapper.in(&quot;id&quot;, ids);</span><br><span class=\"line\">    return baseMapper.selectList(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>​<strong>​<code>QueryWrapper</code>​</strong>​ <strong>和</strong> <strong>​<code>LambdaQueryWrapper</code>​</strong>​ 是 MyBatis-Plus 提供的便捷查询条件构造器，适合在 Java 代码中动态构建查询条件。</li>\n<li><strong>XML 映射文件</strong> 和 <strong>注解方式</strong> 适合在需要编写复杂 SQL 或需要复用 SQL 的场景下使用。</li>\n<li><strong>处理空列表</strong> 是使用 <code>IN</code>​ 语法时需要注意的一个细节，避免 SQL 语法错误。</li>\n</ul>\n<p>根据具体需求选择合适的方式来实现 <code>IN</code>​ 查询。</p>\n<p>‍</p>\n<p>除此之外，在使用 <code>LambdaQueryWrapper</code>​ 的 <code>in</code>​ 方法时，如果传入的数组或列表为空，可能会导致生成的 SQL 语句不合法（例如 <code>IN ()</code>​），从而引发 SQL 语法错误。为了避免这种情况，可以在调用 <code>in</code>​ 方法之前对数组或列表进行判空处理。</p>\n<p>以下是处理空数组的几种常见方式：</p>\n<hr>\n<h3 id=\"1-直接返回空结果\"><a href=\"#1-直接返回空结果\" class=\"headerlink\" title=\"1. 直接返回空结果\"></a>1. <strong>直接返回空结果</strong></h3><p>如果传入的数组为空，直接返回一个空列表，避免执行 SQL 查询。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;User&gt; findUsersByIds(List&lt;Long&gt; ids) &#123;</span><br><span class=\"line\">    if (ids == null || ids.isEmpty()) &#123;</span><br><span class=\"line\">        return new ArrayList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class=\"line\">    queryWrapper.in(User::getId, ids);</span><br><span class=\"line\">    return baseMapper.selectList(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<ul>\n<li>简单直接，避免执行无意义的查询。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>需要在业务逻辑中显式处理空列表。</li>\n</ul>\n<hr>\n<h3 id=\"2-添加空值检查条件\"><a href=\"#2-添加空值检查条件\" class=\"headerlink\" title=\"2. 添加空值检查条件\"></a>2. <strong>添加空值检查条件</strong></h3><p>如果希望即使传入空列表也能执行查询，可以通过添加一个永假条件（例如 <code>1 = 0</code>​）来避免生成 <code>IN ()</code>​。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;User&gt; findUsersByIds(List&lt;Long&gt; ids) &#123;</span><br><span class=\"line\">    LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class=\"line\">    if (ids == null || ids.isEmpty()) &#123;</span><br><span class=\"line\">        queryWrapper.apply(&quot;1 = 0&quot;); // 永假条件，避免生成 IN ()</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        queryWrapper.in(User::getId, ids);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return baseMapper.selectList(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>生成的 SQL：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM user WHERE 1 = 0;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<ul>\n<li>统一处理空列表，避免在业务逻辑中显式返回空列表。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>生成的 SQL 可能不够直观。</li>\n</ul>\n<hr>\n<h3 id=\"3-使用-​Optional​​-处理空值\"><a href=\"#3-使用-​Optional​​-处理空值\" class=\"headerlink\" title=\"3. 使用 ​Optional​​ 处理空值\"></a>3. <strong>使用</strong> <strong>​<code>Optional</code>​</strong>​ <strong>处理空值</strong></h3><p>使用 <code>Optional</code>​ 对传入的列表进行包装，避免空指针异常。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;User&gt; findUsersByIds(List&lt;Long&gt; ids) &#123;</span><br><span class=\"line\">    List&lt;Long&gt; nonNullIds = Optional.ofNullable(ids).orElse(Collections.emptyList());</span><br><span class=\"line\">    if (nonNullIds.isEmpty()) &#123;</span><br><span class=\"line\">        return new ArrayList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class=\"line\">    queryWrapper.in(User::getId, nonNullIds);</span><br><span class=\"line\">    return baseMapper.selectList(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<ul>\n<li>代码更健壮，避免空指针异常。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>需要额外引入 <code>Optional</code>​。</li>\n</ul>\n<hr>\n<h3 id=\"4-自定义工具方法\"><a href=\"#4-自定义工具方法\" class=\"headerlink\" title=\"4. 自定义工具方法\"></a>4. <strong>自定义工具方法</strong></h3><p>封装一个工具方法，统一处理 <code>in</code>​ 方法的空列表问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class QueryWrapperUtils &#123;</span><br><span class=\"line\">    public static &lt;T, R&gt; void inIfNotEmpty(LambdaQueryWrapper&lt;T&gt; queryWrapper, SFunction&lt;T, R&gt; column, Collection&lt;R&gt; values) &#123;</span><br><span class=\"line\">        if (values != null &amp;&amp; !values.isEmpty()) &#123;</span><br><span class=\"line\">            queryWrapper.in(column, values);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            queryWrapper.apply(&quot;1 = 0&quot;); // 永假条件</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用工具方法</span><br><span class=\"line\">public List&lt;User&gt; findUsersByIds(List&lt;Long&gt; ids) &#123;</span><br><span class=\"line\">    LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class=\"line\">    QueryWrapperUtils.inIfNotEmpty(queryWrapper, User::getId, ids);</span><br><span class=\"line\">    return baseMapper.selectList(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<ul>\n<li>代码复用，逻辑清晰。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>需要额外定义工具类。</li>\n</ul>\n<hr>\n<h3 id=\"5-使用-MyBatis-Plus-的-​apply​​-方法动态生成-SQL\"><a href=\"#5-使用-MyBatis-Plus-的-​apply​​-方法动态生成-SQL\" class=\"headerlink\" title=\"5. 使用 MyBatis-Plus 的 ​apply​​ 方法动态生成 SQL\"></a>5. <strong>使用 MyBatis-Plus 的</strong> <strong>​<code>apply</code>​</strong>​ <strong>方法动态生成 SQL</strong></h3><p>通过 <code>apply</code>​ 方法动态生成 <code>IN</code>​ 子句，避免空列表问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;User&gt; findUsersByIds(List&lt;Long&gt; ids) &#123;</span><br><span class=\"line\">    LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class=\"line\">    if (ids != null &amp;&amp; !ids.isEmpty()) &#123;</span><br><span class=\"line\">        String inClause = ids.stream()</span><br><span class=\"line\">                .map(String::valueOf)</span><br><span class=\"line\">                .collect(Collectors.joining(&quot;,&quot;, &quot;(&quot;, &quot;)&quot;));</span><br><span class=\"line\">        queryWrapper.apply(&quot;id IN &quot; + inClause);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        queryWrapper.apply(&quot;1 = 0&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return baseMapper.selectList(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>生成的 SQL：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM user WHERE id IN (1, 2, 3);</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<ul>\n<li>灵活控制 SQL 生成。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>需要手动拼接 SQL，可能引入 SQL 注入风险（需确保输入安全）。</li>\n</ul>\n<hr>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>直接返回空结果</td>\n<td>简单直接</td>\n<td>需在业务逻辑中显式处理</td>\n</tr>\n<tr>\n<td>添加永假条件</td>\n<td>统一处理空列表</td>\n<td>生成的 SQL 不够直观</td>\n</tr>\n<tr>\n<td>使用 <code>Optional</code>​</td>\n<td>避免空指针异常，代码健壮</td>\n<td>需要额外引入 <code>Optional</code>​</td>\n</tr>\n<tr>\n<td>自定义工具方法</td>\n<td>代码复用，逻辑清晰</td>\n<td>需要额外定义工具类</td>\n</tr>\n<tr>\n<td>动态生成 SQL</td>\n<td>灵活控制 SQL 生成</td>\n<td>需手动拼接 SQL，可能引入 SQL 注入风险</td>\n</tr>\n</tbody></table>\n<p>根据具体场景选择合适的方式处理空数组问题。推荐使用 <strong>直接返回空结果</strong> 或 <strong>自定义工具方法</strong>，既简单又安全。</p>\n","cover":false,"more":"<h1 id=\"在-MyBatis-Plus-中使用-IN-语法\"><a href=\"#在-MyBatis-Plus-中使用-IN-语法\" class=\"headerlink\" title=\"在 MyBatis-Plus 中使用 IN 语法\"></a>在 MyBatis-Plus 中使用 IN 语法</h1><p>在 MyBatis-Plus 中使用 <code>IN</code>​ 语法可以通过以下几种方式实现：</p>\n<h3 id=\"1-使用-QueryWrapper​-的-in​-方法\"><a href=\"#1-使用-QueryWrapper​-的-in​-方法\" class=\"headerlink\" title=\"1. 使用 QueryWrapper​ 的 in​ 方法\"></a>1. 使用 <code>QueryWrapper</code>​ 的 <code>in</code>​ 方法</h3><p>​<code>QueryWrapper</code>​ 是 MyBatis-Plus 提供的查询条件构造器，可以使用 <code>in</code>​ 方法来构建 <code>IN</code>​ 查询。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ServiceImpl</span>&lt;UserMapper, User&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">findUsersByIds</span><span class=\"params\">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class=\"line\">        QueryWrapper&lt;User&gt; queryWrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">        queryWrapper.in(<span class=\"string\">&quot;id&quot;</span>, ids);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> baseMapper.selectList(queryWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>SQL 输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM user WHERE id IN (1, 2, 3);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用-LambdaQueryWrapper​-的-in​-方法\"><a href=\"#2-使用-LambdaQueryWrapper​-的-in​-方法\" class=\"headerlink\" title=\"2. 使用 LambdaQueryWrapper​ 的 in​ 方法\"></a>2. 使用 <code>LambdaQueryWrapper</code>​ 的 <code>in</code>​ 方法</h3><p>​<code>LambdaQueryWrapper</code>​ 提供了类型安全的查询条件构造，可以使用 <code>in</code>​ 方法来构建 <code>IN</code>​ 查询。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class=\"line\">import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class=\"line\"></span><br><span class=\"line\">public class UserServiceImpl extends ServiceImpl&lt;UserMapper, User&gt; implements UserService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;User&gt; findUsersByIds(List&lt;Long&gt; ids) &#123;</span><br><span class=\"line\">        LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class=\"line\">        lambdaQueryWrapper.in(User::getId, ids);</span><br><span class=\"line\">        return baseMapper.selectList(lambdaQueryWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>SQL 输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM user WHERE id IN (1, 2, 3);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-使用-XML-映射文件\"><a href=\"#3-使用-XML-映射文件\" class=\"headerlink\" title=\"3. 使用 XML 映射文件\"></a>3. 使用 XML 映射文件</h3><p>在 MyBatis 的 XML 映射文件中，可以直接编写 SQL 语句，使用 <code>IN</code>​ 语法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;findUsersByIds&quot; resultType=&quot;User&quot;&gt;</span><br><span class=\"line\">    SELECT * FROM user WHERE id IN</span><br><span class=\"line\">    &lt;foreach collection=&quot;ids&quot; item=&quot;id&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class=\"line\">        #&#123;id&#125;</span><br><span class=\"line\">    &lt;/foreach&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n\n<p>运行 HTML</p>\n<p><strong>Java 代码：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class=\"line\">    List&lt;User&gt; findUsersByIds(@Param(&quot;ids&quot;) List&lt;Long&gt; ids);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>SQL 输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM user WHERE id IN (1, 2, 3);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-使用注解方式\"><a href=\"#4-使用注解方式\" class=\"headerlink\" title=\"4. 使用注解方式\"></a>4. 使用注解方式</h3><p>在 MyBatis 的注解方式中，可以使用 <code>@Select</code>​ 注解编写 SQL 语句，使用 <code>IN</code>​ 语法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.ibatis.annotations.Param;</span><br><span class=\"line\">import org.apache.ibatis.annotations.Select;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Select(&quot;SELECT * FROM user WHERE id IN (#&#123;ids&#125;)&quot;)</span><br><span class=\"line\">    List&lt;User&gt; findUsersByIds(@Param(&quot;ids&quot;) List&lt;Long&gt; ids);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>  这种方式需要手动将 <code>List</code>​ 转换为逗号分隔的字符串。</p>\n<h3 id=\"5-处理空列表的情况\"><a href=\"#5-处理空列表的情况\" class=\"headerlink\" title=\"5. 处理空列表的情况\"></a>5. 处理空列表的情况</h3><p>在使用 <code>IN</code>​ 语法时，如果传入的列表为空，可能会导致 SQL 语法错误。可以通过以下方式处理：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;User&gt; findUsersByIds(List&lt;Long&gt; ids) &#123;</span><br><span class=\"line\">    if (ids == null || ids.isEmpty()) &#123;</span><br><span class=\"line\">        return new ArrayList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class=\"line\">    queryWrapper.in(&quot;id&quot;, ids);</span><br><span class=\"line\">    return baseMapper.selectList(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>​<strong>​<code>QueryWrapper</code>​</strong>​ <strong>和</strong> <strong>​<code>LambdaQueryWrapper</code>​</strong>​ 是 MyBatis-Plus 提供的便捷查询条件构造器，适合在 Java 代码中动态构建查询条件。</li>\n<li><strong>XML 映射文件</strong> 和 <strong>注解方式</strong> 适合在需要编写复杂 SQL 或需要复用 SQL 的场景下使用。</li>\n<li><strong>处理空列表</strong> 是使用 <code>IN</code>​ 语法时需要注意的一个细节，避免 SQL 语法错误。</li>\n</ul>\n<p>根据具体需求选择合适的方式来实现 <code>IN</code>​ 查询。</p>\n<p>‍</p>\n<p>除此之外，在使用 <code>LambdaQueryWrapper</code>​ 的 <code>in</code>​ 方法时，如果传入的数组或列表为空，可能会导致生成的 SQL 语句不合法（例如 <code>IN ()</code>​），从而引发 SQL 语法错误。为了避免这种情况，可以在调用 <code>in</code>​ 方法之前对数组或列表进行判空处理。</p>\n<p>以下是处理空数组的几种常见方式：</p>\n<hr>\n<h3 id=\"1-直接返回空结果\"><a href=\"#1-直接返回空结果\" class=\"headerlink\" title=\"1. 直接返回空结果\"></a>1. <strong>直接返回空结果</strong></h3><p>如果传入的数组为空，直接返回一个空列表，避免执行 SQL 查询。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;User&gt; findUsersByIds(List&lt;Long&gt; ids) &#123;</span><br><span class=\"line\">    if (ids == null || ids.isEmpty()) &#123;</span><br><span class=\"line\">        return new ArrayList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class=\"line\">    queryWrapper.in(User::getId, ids);</span><br><span class=\"line\">    return baseMapper.selectList(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<ul>\n<li>简单直接，避免执行无意义的查询。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>需要在业务逻辑中显式处理空列表。</li>\n</ul>\n<hr>\n<h3 id=\"2-添加空值检查条件\"><a href=\"#2-添加空值检查条件\" class=\"headerlink\" title=\"2. 添加空值检查条件\"></a>2. <strong>添加空值检查条件</strong></h3><p>如果希望即使传入空列表也能执行查询，可以通过添加一个永假条件（例如 <code>1 = 0</code>​）来避免生成 <code>IN ()</code>​。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;User&gt; findUsersByIds(List&lt;Long&gt; ids) &#123;</span><br><span class=\"line\">    LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class=\"line\">    if (ids == null || ids.isEmpty()) &#123;</span><br><span class=\"line\">        queryWrapper.apply(&quot;1 = 0&quot;); // 永假条件，避免生成 IN ()</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        queryWrapper.in(User::getId, ids);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return baseMapper.selectList(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>生成的 SQL：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM user WHERE 1 = 0;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<ul>\n<li>统一处理空列表，避免在业务逻辑中显式返回空列表。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>生成的 SQL 可能不够直观。</li>\n</ul>\n<hr>\n<h3 id=\"3-使用-​Optional​​-处理空值\"><a href=\"#3-使用-​Optional​​-处理空值\" class=\"headerlink\" title=\"3. 使用 ​Optional​​ 处理空值\"></a>3. <strong>使用</strong> <strong>​<code>Optional</code>​</strong>​ <strong>处理空值</strong></h3><p>使用 <code>Optional</code>​ 对传入的列表进行包装，避免空指针异常。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;User&gt; findUsersByIds(List&lt;Long&gt; ids) &#123;</span><br><span class=\"line\">    List&lt;Long&gt; nonNullIds = Optional.ofNullable(ids).orElse(Collections.emptyList());</span><br><span class=\"line\">    if (nonNullIds.isEmpty()) &#123;</span><br><span class=\"line\">        return new ArrayList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class=\"line\">    queryWrapper.in(User::getId, nonNullIds);</span><br><span class=\"line\">    return baseMapper.selectList(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<ul>\n<li>代码更健壮，避免空指针异常。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>需要额外引入 <code>Optional</code>​。</li>\n</ul>\n<hr>\n<h3 id=\"4-自定义工具方法\"><a href=\"#4-自定义工具方法\" class=\"headerlink\" title=\"4. 自定义工具方法\"></a>4. <strong>自定义工具方法</strong></h3><p>封装一个工具方法，统一处理 <code>in</code>​ 方法的空列表问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class QueryWrapperUtils &#123;</span><br><span class=\"line\">    public static &lt;T, R&gt; void inIfNotEmpty(LambdaQueryWrapper&lt;T&gt; queryWrapper, SFunction&lt;T, R&gt; column, Collection&lt;R&gt; values) &#123;</span><br><span class=\"line\">        if (values != null &amp;&amp; !values.isEmpty()) &#123;</span><br><span class=\"line\">            queryWrapper.in(column, values);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            queryWrapper.apply(&quot;1 = 0&quot;); // 永假条件</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用工具方法</span><br><span class=\"line\">public List&lt;User&gt; findUsersByIds(List&lt;Long&gt; ids) &#123;</span><br><span class=\"line\">    LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class=\"line\">    QueryWrapperUtils.inIfNotEmpty(queryWrapper, User::getId, ids);</span><br><span class=\"line\">    return baseMapper.selectList(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<ul>\n<li>代码复用，逻辑清晰。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>需要额外定义工具类。</li>\n</ul>\n<hr>\n<h3 id=\"5-使用-MyBatis-Plus-的-​apply​​-方法动态生成-SQL\"><a href=\"#5-使用-MyBatis-Plus-的-​apply​​-方法动态生成-SQL\" class=\"headerlink\" title=\"5. 使用 MyBatis-Plus 的 ​apply​​ 方法动态生成 SQL\"></a>5. <strong>使用 MyBatis-Plus 的</strong> <strong>​<code>apply</code>​</strong>​ <strong>方法动态生成 SQL</strong></h3><p>通过 <code>apply</code>​ 方法动态生成 <code>IN</code>​ 子句，避免空列表问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;User&gt; findUsersByIds(List&lt;Long&gt; ids) &#123;</span><br><span class=\"line\">    LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class=\"line\">    if (ids != null &amp;&amp; !ids.isEmpty()) &#123;</span><br><span class=\"line\">        String inClause = ids.stream()</span><br><span class=\"line\">                .map(String::valueOf)</span><br><span class=\"line\">                .collect(Collectors.joining(&quot;,&quot;, &quot;(&quot;, &quot;)&quot;));</span><br><span class=\"line\">        queryWrapper.apply(&quot;id IN &quot; + inClause);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        queryWrapper.apply(&quot;1 = 0&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return baseMapper.selectList(queryWrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>生成的 SQL：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM user WHERE id IN (1, 2, 3);</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<ul>\n<li>灵活控制 SQL 生成。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>需要手动拼接 SQL，可能引入 SQL 注入风险（需确保输入安全）。</li>\n</ul>\n<hr>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>直接返回空结果</td>\n<td>简单直接</td>\n<td>需在业务逻辑中显式处理</td>\n</tr>\n<tr>\n<td>添加永假条件</td>\n<td>统一处理空列表</td>\n<td>生成的 SQL 不够直观</td>\n</tr>\n<tr>\n<td>使用 <code>Optional</code>​</td>\n<td>避免空指针异常，代码健壮</td>\n<td>需要额外引入 <code>Optional</code>​</td>\n</tr>\n<tr>\n<td>自定义工具方法</td>\n<td>代码复用，逻辑清晰</td>\n<td>需要额外定义工具类</td>\n</tr>\n<tr>\n<td>动态生成 SQL</td>\n<td>灵活控制 SQL 生成</td>\n<td>需手动拼接 SQL，可能引入 SQL 注入风险</td>\n</tr>\n</tbody></table>\n<p>根据具体场景选择合适的方式处理空数组问题。推荐使用 <strong>直接返回空结果</strong> 或 <strong>自定义工具方法</strong>，既简单又安全。</p>\n"},{"title":"Java中使用redis作为消息队列","date":"2024-12-26T08:40:23.000Z","updated":"2024-12-26T08:48:21.000Z","excerpt":"本文介绍了在Java中使用Redis作为消息队列的两种主要方法：使用Redis的`List`数据结构和`Pub/Sub`模式。通过`List`，生产者可以使用`lpush`将消息推入队列头部，消费者可以使用`rpop`或`blpop`从队列尾部弹出消息，后者支持阻塞式消费。`Pub/Sub`模式适用于一对多的消息分发，发布者通过`publish`发送消息，订阅者通过`subscribe`接收消息。此外，文章还提到了使用Redisson库来简化操作，Redisson提供了更高层次的抽象，如消息队列和分布式锁。通过这些方法，开发者可以灵活地在Java应用中实现基于Redis的消息队列功能。","comments":1,"toc":true,"abbrlink":3202,"_content":"\n# Java中使用redis作为消息队列\n\n## 使用redis作为消息队列\n\n在Java中使用Redis作为消息队列，可以通过Redis的`List`​数据结构或者`Pub/Sub`​模式来实现。以下是一个简单的示例，展示了如何使用Redis的`List`​作为消息队列。\n\n### 1. 使用Redis的List作为消息队列\n\nRedis的`List`​数据结构非常适合用来实现消息队列，因为它支持在列表的两端进行操作。\n\n#### 1.1 生产者（发送消息）\n\n生产者将消息推入列表的头部：\n\n```java\nimport redis.clients.jedis.Jedis;\n\npublic class RedisProducer {\n    private Jedis jedis;\n\n    public RedisProducer(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public void produce(String queueName, String message) {\n        jedis.lpush(queueName, message);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n#### 1.2 消费者（接收消息）\n\n消费者从列表的尾部弹出消息：\n\n```\nimport redis.clients.jedis.Jedis;\n\npublic class RedisConsumer {\n    private Jedis jedis;\n\n    public RedisConsumer(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public String consume(String queueName) {\n        return jedis.rpop(queueName);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n#### 1.3 阻塞式消费（BLPOP）\n\n为了提高效率，可以使用`BLPOP`​方法，它会在没有消息时阻塞，直到有新消息到达：\n\n```\nimport redis.clients.jedis.Jedis;\n\npublic class RedisBlockingConsumer {\n    private Jedis jedis;\n\n    public RedisBlockingConsumer(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public String blockingConsume(String queueName, int timeout) {\n        String message = jedis.blpop(timeout, queueName).get(1);\n        return message;\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n### 2. 使用Redis的Pub/Sub模式\n\nRedis的发布订阅模式适用于一对多的消息分发。\n\n#### 2.1 发布者（发布消息）\n\n```\nimport redis.clients.jedis.Jedis;\n\npublic class RedisPublisher {\n    private Jedis jedis;\n\n    public RedisPublisher(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public void publish(String channel, String message) {\n        jedis.publish(channel, message);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n#### 2.2 订阅者（接收消息）\n\n```\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPubSub;\n\npublic class RedisSubscriber {\n    private Jedis jedis;\n\n    public RedisSubscriber(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public void subscribe(String channel, JedisPubSub jedisPubSub) {\n        jedis.subscribe(jedisPubSub, channel);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n### 3. 使用Redisson库\n\nRedisson是一个功能丰富的Redis Java客户端，提供了更高层次的抽象，包括消息队列、分布式锁等。\n\n#### 3.1 添加依赖\n\n```xml\n<dependency>\n    <groupId>org.redisson</groupId>\n    <artifactId>redisson</artifactId>\n    <version>3.17.5</version>\n</dependency>\n```\n\n运行 HTML\n\n#### 3.2 生产者和消费者\n\n```\nimport org.redisson.Redisson;\nimport org.redisson.api.RQueue;\nimport org.redisson.api.RedissonClient;\nimport org.redisson.config.Config;\n\npublic class RedissonQueueExample {\n    public static void main(String[] args) {\n        Config config = new Config();\n        config.useSingleServer().setAddress(\"redis://127.0.0.1:6379\");\n        RedissonClient redisson = Redisson.create(config);\n\n        RQueue<String> queue = redisson.getQueue(\"myQueue\");\n\n        // 生产者\n        new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                queue.offer(\"Message \" + i);\n                System.out.println(\"Produced: Message \" + i);\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n\n        // 消费者\n        new Thread(() -> {\n            while (true) {\n                String message = queue.poll();\n                if (message != null) {\n                    System.out.println(\"Consumed: \" + message);\n                } else {\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }).start();\n\n        redisson.shutdown();\n    }\n}\n```\n\n### 4. 总结\n\n* **List**：适用于简单的队列场景，支持阻塞式操作。\n* **Pub/Sub**：适用于发布订阅场景，适合一对多的消息分发。\n* **Redisson**：提供了更高级的抽象，适合复杂的分布式应用场景。\n\n选择哪种方式取决于你的具体需求。如果需要可靠的消息传递和队列功能，建议使用`List`​或Redisson的队列实现。\n\n但是还是存在缺点，redis不存在消息确认机制，所以还得再优化一下。\n\n‍\n\n‍\n\n## Redis 作为消息队列+消息确认机制\n\n为了在使用 Redis 作为消息队列的基础上加上消息确认机制，我们可以采用以下方案：\n\n### 方案概述\n\n1. **生产者**：将消息放入 `queue:待处理`​ 列表。\n2. **消费者**：使用 Lua 脚本原子地将消息从 `queue:待处理`​ 移动到 `queue:正在处理`​，并记录处理开始时间。\n3. **消息处理**：消费者处理消息，处理完成后从 `queue:正在处理`​ 删除消息，并删除处理记录。\n4. **故障处理**：如果处理失败，可以选择不删除消息，或者将其重新放入 `queue:待处理`​。\n5. **定时检查**：使用定时任务检查 `queue:正在处理`​ 中的消息，如果超过阈值时间未处理完成，则重新放入 `queue:待处理`​。\n\n### 实现步骤\n\n#### 1. 生产者代码\n\n```java\nimport redis.clients.jedis.Jedis;\n\npublic class RedisProducer {\n    private Jedis jedis;\n\n    public RedisProducer(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public void produce(String queueName, String message) {\n        jedis.lpush(queueName, message);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n#### 2. 消费者代码\n\n```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.Scripting;\n\npublic class RedisConsumer {\n    private Jedis jedis;\n    private String moveScript = \"local message = redis.call('RPOP', KEYS[1]); if message then redis.call('LPUSH', KEYS[2], message); end; return message;\";\n\n    public RedisConsumer(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public String consume(String待处理Queue, String正在处理Queue) {\n        String message = (String) jedis.eval(moveScript, 2,待处理Queue,正在处理Queue);\n        if (message != null) {\n            jedis.hset(\"hash:正在处理\", message, String.valueOf(System.currentTimeMillis()));\n        }\n        return message;\n    }\n\n    public void confirm(String正在处理Queue, String message) {\n        jedis.lrem(正在处理Queue, 0, message);\n        jedis.hdel(\"hash:正在处理\", message);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n#### 3. 定时检查任务\n\n```java\nimport redis.clients.jedis.Jedis;\nimport java.util.Set;\nimport java.util.Date;\n\npublic class MessageMonitor {\n    private Jedis jedis;\n    private long threshold = 60000; // 1分钟\n\n    public MessageMonitor(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public void checkMessages() {\n        Set<String> messages = jedis.hkeys(\"hash:正在处理\");\n        for (String message : messages) {\n            long startTime = Long.parseLong(jedis.hget(\"hash:正在处理\", message));\n            if (new Date().getTime() - startTime > threshold) {\n                jedis.lpush(\"queue:待处理\", message);\n                jedis.hdel(\"hash:正在处理\", message);\n            }\n        }\n    }\n\n    public void scheduleCheck() {\n        new ScheduledThreadPoolExecutor(1).scheduleAtFixedRate(() -> checkMessages(), 0, 30, TimeUnit.SECONDS);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n### 代码说明\n\n* **生产者**：将消息放入 `queue:待处理`​ 列表。\n* **消费者**：\n\n  * 使用 Lua 脚本原子地将消息从 `queue:待处理`​ 移动到 `queue:正在处理`​。\n  * 记录消息处理开始时间到 `hash:正在处理`​。\n  * 处理消息后，调用 `confirm`​ 方法删除消息和处理记录。\n* **定时检查任务**：\n\n  * 每 30 秒检查一次 `hash:正在处理`​ 中的消息。\n  * 如果消息处理时间超过阈值（例如 1 分钟），将其重新放入 `queue:待处理`​。\n\n### 优点\n\n* **原子操作**：使用 Lua 脚本确保消息移动的原子性。\n* **故障 tolerance**：通过定时检查任务，确保消息不会永久卡在 `queue:正在处理`​ 中。\n* **消息不丢失**：处理失败的消息会重新进入待处理队列。\n\n### 缺点\n\n* **复杂性**：需要额外的逻辑来处理消息确认和故障恢复。\n* **性能开销**：定时任务和哈希表操作可能增加系统负载。\n\n### 结论\n\n通过上述方案，我们实现了基于 Redis 的消息队列的消息确认机制，确保消息的可靠传递和处理。虽然实现较为复杂，但在 Redis 作为消息队列的场景下，这是一个可行的解决方案。\n\n‍\n\n‍\n","source":"_posts/use-redis-as-a-message-queue-in-java-zniajv.md","raw":"---\ntitle: Java中使用redis作为消息队列\ndate: '2024-12-26 16:40:23'\nupdated: '2024-12-26 16:48:21'\nexcerpt: >-\n  本文介绍了在Java中使用Redis作为消息队列的两种主要方法：使用Redis的`List`数据结构和`Pub/Sub`模式。通过`List`，生产者可以使用`lpush`将消息推入队列头部，消费者可以使用`rpop`或`blpop`从队列尾部弹出消息，后者支持阻塞式消费。`Pub/Sub`模式适用于一对多的消息分发，发布者通过`publish`发送消息，订阅者通过`subscribe`接收消息。此外，文章还提到了使用Redisson库来简化操作，Redisson提供了更高层次的抽象，如消息队列和分布式锁。通过这些方法，开发者可以灵活地在Java应用中实现基于Redis的消息队列功能。\ntags:\n  - redis\n  - 消息队列\n  - java\n  - 阻塞消费\n  - 发布订阅\ncategories:\n  - Java\n  - Redis\n  - 消息队列\npermalink: /post/use-redis-as-a-message-queue-in-java-zniajv.html\ncomments: true\ntoc: true\nabbrlink: 3202\n---\n\n# Java中使用redis作为消息队列\n\n## 使用redis作为消息队列\n\n在Java中使用Redis作为消息队列，可以通过Redis的`List`​数据结构或者`Pub/Sub`​模式来实现。以下是一个简单的示例，展示了如何使用Redis的`List`​作为消息队列。\n\n### 1. 使用Redis的List作为消息队列\n\nRedis的`List`​数据结构非常适合用来实现消息队列，因为它支持在列表的两端进行操作。\n\n#### 1.1 生产者（发送消息）\n\n生产者将消息推入列表的头部：\n\n```java\nimport redis.clients.jedis.Jedis;\n\npublic class RedisProducer {\n    private Jedis jedis;\n\n    public RedisProducer(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public void produce(String queueName, String message) {\n        jedis.lpush(queueName, message);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n#### 1.2 消费者（接收消息）\n\n消费者从列表的尾部弹出消息：\n\n```\nimport redis.clients.jedis.Jedis;\n\npublic class RedisConsumer {\n    private Jedis jedis;\n\n    public RedisConsumer(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public String consume(String queueName) {\n        return jedis.rpop(queueName);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n#### 1.3 阻塞式消费（BLPOP）\n\n为了提高效率，可以使用`BLPOP`​方法，它会在没有消息时阻塞，直到有新消息到达：\n\n```\nimport redis.clients.jedis.Jedis;\n\npublic class RedisBlockingConsumer {\n    private Jedis jedis;\n\n    public RedisBlockingConsumer(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public String blockingConsume(String queueName, int timeout) {\n        String message = jedis.blpop(timeout, queueName).get(1);\n        return message;\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n### 2. 使用Redis的Pub/Sub模式\n\nRedis的发布订阅模式适用于一对多的消息分发。\n\n#### 2.1 发布者（发布消息）\n\n```\nimport redis.clients.jedis.Jedis;\n\npublic class RedisPublisher {\n    private Jedis jedis;\n\n    public RedisPublisher(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public void publish(String channel, String message) {\n        jedis.publish(channel, message);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n#### 2.2 订阅者（接收消息）\n\n```\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPubSub;\n\npublic class RedisSubscriber {\n    private Jedis jedis;\n\n    public RedisSubscriber(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public void subscribe(String channel, JedisPubSub jedisPubSub) {\n        jedis.subscribe(jedisPubSub, channel);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n### 3. 使用Redisson库\n\nRedisson是一个功能丰富的Redis Java客户端，提供了更高层次的抽象，包括消息队列、分布式锁等。\n\n#### 3.1 添加依赖\n\n```xml\n<dependency>\n    <groupId>org.redisson</groupId>\n    <artifactId>redisson</artifactId>\n    <version>3.17.5</version>\n</dependency>\n```\n\n运行 HTML\n\n#### 3.2 生产者和消费者\n\n```\nimport org.redisson.Redisson;\nimport org.redisson.api.RQueue;\nimport org.redisson.api.RedissonClient;\nimport org.redisson.config.Config;\n\npublic class RedissonQueueExample {\n    public static void main(String[] args) {\n        Config config = new Config();\n        config.useSingleServer().setAddress(\"redis://127.0.0.1:6379\");\n        RedissonClient redisson = Redisson.create(config);\n\n        RQueue<String> queue = redisson.getQueue(\"myQueue\");\n\n        // 生产者\n        new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                queue.offer(\"Message \" + i);\n                System.out.println(\"Produced: Message \" + i);\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n\n        // 消费者\n        new Thread(() -> {\n            while (true) {\n                String message = queue.poll();\n                if (message != null) {\n                    System.out.println(\"Consumed: \" + message);\n                } else {\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }).start();\n\n        redisson.shutdown();\n    }\n}\n```\n\n### 4. 总结\n\n* **List**：适用于简单的队列场景，支持阻塞式操作。\n* **Pub/Sub**：适用于发布订阅场景，适合一对多的消息分发。\n* **Redisson**：提供了更高级的抽象，适合复杂的分布式应用场景。\n\n选择哪种方式取决于你的具体需求。如果需要可靠的消息传递和队列功能，建议使用`List`​或Redisson的队列实现。\n\n但是还是存在缺点，redis不存在消息确认机制，所以还得再优化一下。\n\n‍\n\n‍\n\n## Redis 作为消息队列+消息确认机制\n\n为了在使用 Redis 作为消息队列的基础上加上消息确认机制，我们可以采用以下方案：\n\n### 方案概述\n\n1. **生产者**：将消息放入 `queue:待处理`​ 列表。\n2. **消费者**：使用 Lua 脚本原子地将消息从 `queue:待处理`​ 移动到 `queue:正在处理`​，并记录处理开始时间。\n3. **消息处理**：消费者处理消息，处理完成后从 `queue:正在处理`​ 删除消息，并删除处理记录。\n4. **故障处理**：如果处理失败，可以选择不删除消息，或者将其重新放入 `queue:待处理`​。\n5. **定时检查**：使用定时任务检查 `queue:正在处理`​ 中的消息，如果超过阈值时间未处理完成，则重新放入 `queue:待处理`​。\n\n### 实现步骤\n\n#### 1. 生产者代码\n\n```java\nimport redis.clients.jedis.Jedis;\n\npublic class RedisProducer {\n    private Jedis jedis;\n\n    public RedisProducer(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public void produce(String queueName, String message) {\n        jedis.lpush(queueName, message);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n#### 2. 消费者代码\n\n```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.Scripting;\n\npublic class RedisConsumer {\n    private Jedis jedis;\n    private String moveScript = \"local message = redis.call('RPOP', KEYS[1]); if message then redis.call('LPUSH', KEYS[2], message); end; return message;\";\n\n    public RedisConsumer(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public String consume(String待处理Queue, String正在处理Queue) {\n        String message = (String) jedis.eval(moveScript, 2,待处理Queue,正在处理Queue);\n        if (message != null) {\n            jedis.hset(\"hash:正在处理\", message, String.valueOf(System.currentTimeMillis()));\n        }\n        return message;\n    }\n\n    public void confirm(String正在处理Queue, String message) {\n        jedis.lrem(正在处理Queue, 0, message);\n        jedis.hdel(\"hash:正在处理\", message);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n#### 3. 定时检查任务\n\n```java\nimport redis.clients.jedis.Jedis;\nimport java.util.Set;\nimport java.util.Date;\n\npublic class MessageMonitor {\n    private Jedis jedis;\n    private long threshold = 60000; // 1分钟\n\n    public MessageMonitor(String host, int port) {\n        this.jedis = new Jedis(host, port);\n    }\n\n    public void checkMessages() {\n        Set<String> messages = jedis.hkeys(\"hash:正在处理\");\n        for (String message : messages) {\n            long startTime = Long.parseLong(jedis.hget(\"hash:正在处理\", message));\n            if (new Date().getTime() - startTime > threshold) {\n                jedis.lpush(\"queue:待处理\", message);\n                jedis.hdel(\"hash:正在处理\", message);\n            }\n        }\n    }\n\n    public void scheduleCheck() {\n        new ScheduledThreadPoolExecutor(1).scheduleAtFixedRate(() -> checkMessages(), 0, 30, TimeUnit.SECONDS);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```\n\n### 代码说明\n\n* **生产者**：将消息放入 `queue:待处理`​ 列表。\n* **消费者**：\n\n  * 使用 Lua 脚本原子地将消息从 `queue:待处理`​ 移动到 `queue:正在处理`​。\n  * 记录消息处理开始时间到 `hash:正在处理`​。\n  * 处理消息后，调用 `confirm`​ 方法删除消息和处理记录。\n* **定时检查任务**：\n\n  * 每 30 秒检查一次 `hash:正在处理`​ 中的消息。\n  * 如果消息处理时间超过阈值（例如 1 分钟），将其重新放入 `queue:待处理`​。\n\n### 优点\n\n* **原子操作**：使用 Lua 脚本确保消息移动的原子性。\n* **故障 tolerance**：通过定时检查任务，确保消息不会永久卡在 `queue:正在处理`​ 中。\n* **消息不丢失**：处理失败的消息会重新进入待处理队列。\n\n### 缺点\n\n* **复杂性**：需要额外的逻辑来处理消息确认和故障恢复。\n* **性能开销**：定时任务和哈希表操作可能增加系统负载。\n\n### 结论\n\n通过上述方案，我们实现了基于 Redis 的消息队列的消息确认机制，确保消息的可靠传递和处理。虽然实现较为复杂，但在 Redis 作为消息队列的场景下，这是一个可行的解决方案。\n\n‍\n\n‍\n","slug":"use-redis-as-a-message-queue-in-java-zniajv","published":1,"__permalink":"/post/use-redis-as-a-message-queue-in-java-zniajv.html","_id":"cmck5582h000tssvwbjqrf1of","layout":"post","photos":[],"content":"<h1 id=\"Java中使用redis作为消息队列\"><a href=\"#Java中使用redis作为消息队列\" class=\"headerlink\" title=\"Java中使用redis作为消息队列\"></a>Java中使用redis作为消息队列</h1><h2 id=\"使用redis作为消息队列\"><a href=\"#使用redis作为消息队列\" class=\"headerlink\" title=\"使用redis作为消息队列\"></a>使用redis作为消息队列</h2><p>在Java中使用Redis作为消息队列，可以通过Redis的<code>List</code>​数据结构或者<code>Pub/Sub</code>​模式来实现。以下是一个简单的示例，展示了如何使用Redis的<code>List</code>​作为消息队列。</p>\n<h3 id=\"1-使用Redis的List作为消息队列\"><a href=\"#1-使用Redis的List作为消息队列\" class=\"headerlink\" title=\"1. 使用Redis的List作为消息队列\"></a>1. 使用Redis的List作为消息队列</h3><p>Redis的<code>List</code>​数据结构非常适合用来实现消息队列，因为它支持在列表的两端进行操作。</p>\n<h4 id=\"1-1-生产者（发送消息）\"><a href=\"#1-1-生产者（发送消息）\" class=\"headerlink\" title=\"1.1 生产者（发送消息）\"></a>1.1 生产者（发送消息）</h4><p>生产者将消息推入列表的头部：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisProducer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Jedis jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RedisProducer</span><span class=\"params\">(String host, <span class=\"type\">int</span> port)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.jedis = <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">produce</span><span class=\"params\">(String queueName, String message)</span> &#123;</span><br><span class=\"line\">        jedis.lpush(queueName, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-消费者（接收消息）\"><a href=\"#1-2-消费者（接收消息）\" class=\"headerlink\" title=\"1.2 消费者（接收消息）\"></a>1.2 消费者（接收消息）</h4><p>消费者从列表的尾部弹出消息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">public class RedisConsumer &#123;</span><br><span class=\"line\">    private Jedis jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">    public RedisConsumer(String host, int port) &#123;</span><br><span class=\"line\">        this.jedis = new Jedis(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String consume(String queueName) &#123;</span><br><span class=\"line\">        return jedis.rpop(queueName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void close() &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-阻塞式消费（BLPOP）\"><a href=\"#1-3-阻塞式消费（BLPOP）\" class=\"headerlink\" title=\"1.3 阻塞式消费（BLPOP）\"></a>1.3 阻塞式消费（BLPOP）</h4><p>为了提高效率，可以使用<code>BLPOP</code>​方法，它会在没有消息时阻塞，直到有新消息到达：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">public class RedisBlockingConsumer &#123;</span><br><span class=\"line\">    private Jedis jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">    public RedisBlockingConsumer(String host, int port) &#123;</span><br><span class=\"line\">        this.jedis = new Jedis(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String blockingConsume(String queueName, int timeout) &#123;</span><br><span class=\"line\">        String message = jedis.blpop(timeout, queueName).get(1);</span><br><span class=\"line\">        return message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void close() &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用Redis的Pub-Sub模式\"><a href=\"#2-使用Redis的Pub-Sub模式\" class=\"headerlink\" title=\"2. 使用Redis的Pub&#x2F;Sub模式\"></a>2. 使用Redis的Pub&#x2F;Sub模式</h3><p>Redis的发布订阅模式适用于一对多的消息分发。</p>\n<h4 id=\"2-1-发布者（发布消息）\"><a href=\"#2-1-发布者（发布消息）\" class=\"headerlink\" title=\"2.1 发布者（发布消息）\"></a>2.1 发布者（发布消息）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">public class RedisPublisher &#123;</span><br><span class=\"line\">    private Jedis jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">    public RedisPublisher(String host, int port) &#123;</span><br><span class=\"line\">        this.jedis = new Jedis(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void publish(String channel, String message) &#123;</span><br><span class=\"line\">        jedis.publish(channel, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void close() &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-订阅者（接收消息）\"><a href=\"#2-2-订阅者（接收消息）\" class=\"headerlink\" title=\"2.2 订阅者（接收消息）\"></a>2.2 订阅者（接收消息）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\">import redis.clients.jedis.JedisPubSub;</span><br><span class=\"line\"></span><br><span class=\"line\">public class RedisSubscriber &#123;</span><br><span class=\"line\">    private Jedis jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">    public RedisSubscriber(String host, int port) &#123;</span><br><span class=\"line\">        this.jedis = new Jedis(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void subscribe(String channel, JedisPubSub jedisPubSub) &#123;</span><br><span class=\"line\">        jedis.subscribe(jedisPubSub, channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void close() &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-使用Redisson库\"><a href=\"#3-使用Redisson库\" class=\"headerlink\" title=\"3. 使用Redisson库\"></a>3. 使用Redisson库</h3><p>Redisson是一个功能丰富的Redis Java客户端，提供了更高层次的抽象，包括消息队列、分布式锁等。</p>\n<h4 id=\"3-1-添加依赖\"><a href=\"#3-1-添加依赖\" class=\"headerlink\" title=\"3.1 添加依赖\"></a>3.1 添加依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.redisson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>redisson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.17.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>运行 HTML</p>\n<h4 id=\"3-2-生产者和消费者\"><a href=\"#3-2-生产者和消费者\" class=\"headerlink\" title=\"3.2 生产者和消费者\"></a>3.2 生产者和消费者</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.redisson.Redisson;</span><br><span class=\"line\">import org.redisson.api.RQueue;</span><br><span class=\"line\">import org.redisson.api.RedissonClient;</span><br><span class=\"line\">import org.redisson.config.Config;</span><br><span class=\"line\"></span><br><span class=\"line\">public class RedissonQueueExample &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Config config = new Config();</span><br><span class=\"line\">        config.useSingleServer().setAddress(&quot;redis://127.0.0.1:6379&quot;);</span><br><span class=\"line\">        RedissonClient redisson = Redisson.create(config);</span><br><span class=\"line\"></span><br><span class=\"line\">        RQueue&lt;String&gt; queue = redisson.getQueue(&quot;myQueue&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 生产者</span><br><span class=\"line\">        new Thread(() -&gt; &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">                queue.offer(&quot;Message &quot; + i);</span><br><span class=\"line\">                System.out.println(&quot;Produced: Message &quot; + i);</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    Thread.sleep(1000);</span><br><span class=\"line\">                &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 消费者</span><br><span class=\"line\">        new Thread(() -&gt; &#123;</span><br><span class=\"line\">            while (true) &#123;</span><br><span class=\"line\">                String message = queue.poll();</span><br><span class=\"line\">                if (message != null) &#123;</span><br><span class=\"line\">                    System.out.println(&quot;Consumed: &quot; + message);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        Thread.sleep(1000);</span><br><span class=\"line\">                    &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        redisson.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong>List</strong>：适用于简单的队列场景，支持阻塞式操作。</li>\n<li><strong>Pub&#x2F;Sub</strong>：适用于发布订阅场景，适合一对多的消息分发。</li>\n<li><strong>Redisson</strong>：提供了更高级的抽象，适合复杂的分布式应用场景。</li>\n</ul>\n<p>选择哪种方式取决于你的具体需求。如果需要可靠的消息传递和队列功能，建议使用<code>List</code>​或Redisson的队列实现。</p>\n<p>但是还是存在缺点，redis不存在消息确认机制，所以还得再优化一下。</p>\n<p>‍</p>\n<p>‍</p>\n<h2 id=\"Redis-作为消息队列-消息确认机制\"><a href=\"#Redis-作为消息队列-消息确认机制\" class=\"headerlink\" title=\"Redis 作为消息队列+消息确认机制\"></a>Redis 作为消息队列+消息确认机制</h2><p>为了在使用 Redis 作为消息队列的基础上加上消息确认机制，我们可以采用以下方案：</p>\n<h3 id=\"方案概述\"><a href=\"#方案概述\" class=\"headerlink\" title=\"方案概述\"></a>方案概述</h3><ol>\n<li><strong>生产者</strong>：将消息放入 <code>queue:待处理</code>​ 列表。</li>\n<li><strong>消费者</strong>：使用 Lua 脚本原子地将消息从 <code>queue:待处理</code>​ 移动到 <code>queue:正在处理</code>​，并记录处理开始时间。</li>\n<li><strong>消息处理</strong>：消费者处理消息，处理完成后从 <code>queue:正在处理</code>​ 删除消息，并删除处理记录。</li>\n<li><strong>故障处理</strong>：如果处理失败，可以选择不删除消息，或者将其重新放入 <code>queue:待处理</code>​。</li>\n<li><strong>定时检查</strong>：使用定时任务检查 <code>queue:正在处理</code>​ 中的消息，如果超过阈值时间未处理完成，则重新放入 <code>queue:待处理</code>​。</li>\n</ol>\n<h3 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><h4 id=\"1-生产者代码\"><a href=\"#1-生产者代码\" class=\"headerlink\" title=\"1. 生产者代码\"></a>1. 生产者代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisProducer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Jedis jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RedisProducer</span><span class=\"params\">(String host, <span class=\"type\">int</span> port)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.jedis = <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">produce</span><span class=\"params\">(String queueName, String message)</span> &#123;</span><br><span class=\"line\">        jedis.lpush(queueName, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-消费者代码\"><a href=\"#2-消费者代码\" class=\"headerlink\" title=\"2. 消费者代码\"></a>2. 消费者代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Scripting;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConsumer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Jedis jedis;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">moveScript</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;local message = redis.call(&#x27;RPOP&#x27;, KEYS[1]); if message then redis.call(&#x27;LPUSH&#x27;, KEYS[2], message); end; return message;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RedisConsumer</span><span class=\"params\">(String host, <span class=\"type\">int</span> port)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.jedis = <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">consume</span><span class=\"params\">(String待处理Queue, String正在处理Queue)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> (String) jedis.eval(moveScript, <span class=\"number\">2</span>,待处理Queue,正在处理Queue);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            jedis.hset(<span class=\"string\">&quot;hash:正在处理&quot;</span>, message, String.valueOf(System.currentTimeMillis()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">confirm</span><span class=\"params\">(String正在处理Queue, String message)</span> &#123;</span><br><span class=\"line\">        jedis.lrem(正在处理Queue, <span class=\"number\">0</span>, message);</span><br><span class=\"line\">        jedis.hdel(<span class=\"string\">&quot;hash:正在处理&quot;</span>, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-定时检查任务\"><a href=\"#3-定时检查任务\" class=\"headerlink\" title=\"3. 定时检查任务\"></a>3. 定时检查任务</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MessageMonitor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Jedis jedis;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"variable\">threshold</span> <span class=\"operator\">=</span> <span class=\"number\">60000</span>; <span class=\"comment\">// 1分钟</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MessageMonitor</span><span class=\"params\">(String host, <span class=\"type\">int</span> port)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.jedis = <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkMessages</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Set&lt;String&gt; messages = jedis.hkeys(<span class=\"string\">&quot;hash:正在处理&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String message : messages) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">startTime</span> <span class=\"operator\">=</span> Long.parseLong(jedis.hget(<span class=\"string\">&quot;hash:正在处理&quot;</span>, message));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().getTime() - startTime &gt; threshold) &#123;</span><br><span class=\"line\">                jedis.lpush(<span class=\"string\">&quot;queue:待处理&quot;</span>, message);</span><br><span class=\"line\">                jedis.hdel(<span class=\"string\">&quot;hash:正在处理&quot;</span>, message);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">scheduleCheck</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ScheduledThreadPoolExecutor</span>(<span class=\"number\">1</span>).scheduleAtFixedRate(() -&gt; checkMessages(), <span class=\"number\">0</span>, <span class=\"number\">30</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码说明\"><a href=\"#代码说明\" class=\"headerlink\" title=\"代码说明\"></a>代码说明</h3><ul>\n<li><p><strong>生产者</strong>：将消息放入 <code>queue:待处理</code>​ 列表。</p>\n</li>\n<li><p><strong>消费者</strong>：</p>\n<ul>\n<li>使用 Lua 脚本原子地将消息从 <code>queue:待处理</code>​ 移动到 <code>queue:正在处理</code>​。</li>\n<li>记录消息处理开始时间到 <code>hash:正在处理</code>​。</li>\n<li>处理消息后，调用 <code>confirm</code>​ 方法删除消息和处理记录。</li>\n</ul>\n</li>\n<li><p><strong>定时检查任务</strong>：</p>\n<ul>\n<li>每 30 秒检查一次 <code>hash:正在处理</code>​ 中的消息。</li>\n<li>如果消息处理时间超过阈值（例如 1 分钟），将其重新放入 <code>queue:待处理</code>​。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li><strong>原子操作</strong>：使用 Lua 脚本确保消息移动的原子性。</li>\n<li><strong>故障 tolerance</strong>：通过定时检查任务，确保消息不会永久卡在 <code>queue:正在处理</code>​ 中。</li>\n<li><strong>消息不丢失</strong>：处理失败的消息会重新进入待处理队列。</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li><strong>复杂性</strong>：需要额外的逻辑来处理消息确认和故障恢复。</li>\n<li><strong>性能开销</strong>：定时任务和哈希表操作可能增加系统负载。</li>\n</ul>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>通过上述方案，我们实现了基于 Redis 的消息队列的消息确认机制，确保消息的可靠传递和处理。虽然实现较为复杂，但在 Redis 作为消息队列的场景下，这是一个可行的解决方案。</p>\n<p>‍</p>\n<p>‍</p>\n","cover":false,"more":"<h1 id=\"Java中使用redis作为消息队列\"><a href=\"#Java中使用redis作为消息队列\" class=\"headerlink\" title=\"Java中使用redis作为消息队列\"></a>Java中使用redis作为消息队列</h1><h2 id=\"使用redis作为消息队列\"><a href=\"#使用redis作为消息队列\" class=\"headerlink\" title=\"使用redis作为消息队列\"></a>使用redis作为消息队列</h2><p>在Java中使用Redis作为消息队列，可以通过Redis的<code>List</code>​数据结构或者<code>Pub/Sub</code>​模式来实现。以下是一个简单的示例，展示了如何使用Redis的<code>List</code>​作为消息队列。</p>\n<h3 id=\"1-使用Redis的List作为消息队列\"><a href=\"#1-使用Redis的List作为消息队列\" class=\"headerlink\" title=\"1. 使用Redis的List作为消息队列\"></a>1. 使用Redis的List作为消息队列</h3><p>Redis的<code>List</code>​数据结构非常适合用来实现消息队列，因为它支持在列表的两端进行操作。</p>\n<h4 id=\"1-1-生产者（发送消息）\"><a href=\"#1-1-生产者（发送消息）\" class=\"headerlink\" title=\"1.1 生产者（发送消息）\"></a>1.1 生产者（发送消息）</h4><p>生产者将消息推入列表的头部：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisProducer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Jedis jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RedisProducer</span><span class=\"params\">(String host, <span class=\"type\">int</span> port)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.jedis = <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">produce</span><span class=\"params\">(String queueName, String message)</span> &#123;</span><br><span class=\"line\">        jedis.lpush(queueName, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-消费者（接收消息）\"><a href=\"#1-2-消费者（接收消息）\" class=\"headerlink\" title=\"1.2 消费者（接收消息）\"></a>1.2 消费者（接收消息）</h4><p>消费者从列表的尾部弹出消息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">public class RedisConsumer &#123;</span><br><span class=\"line\">    private Jedis jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">    public RedisConsumer(String host, int port) &#123;</span><br><span class=\"line\">        this.jedis = new Jedis(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String consume(String queueName) &#123;</span><br><span class=\"line\">        return jedis.rpop(queueName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void close() &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-阻塞式消费（BLPOP）\"><a href=\"#1-3-阻塞式消费（BLPOP）\" class=\"headerlink\" title=\"1.3 阻塞式消费（BLPOP）\"></a>1.3 阻塞式消费（BLPOP）</h4><p>为了提高效率，可以使用<code>BLPOP</code>​方法，它会在没有消息时阻塞，直到有新消息到达：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">public class RedisBlockingConsumer &#123;</span><br><span class=\"line\">    private Jedis jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">    public RedisBlockingConsumer(String host, int port) &#123;</span><br><span class=\"line\">        this.jedis = new Jedis(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String blockingConsume(String queueName, int timeout) &#123;</span><br><span class=\"line\">        String message = jedis.blpop(timeout, queueName).get(1);</span><br><span class=\"line\">        return message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void close() &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用Redis的Pub-Sub模式\"><a href=\"#2-使用Redis的Pub-Sub模式\" class=\"headerlink\" title=\"2. 使用Redis的Pub&#x2F;Sub模式\"></a>2. 使用Redis的Pub&#x2F;Sub模式</h3><p>Redis的发布订阅模式适用于一对多的消息分发。</p>\n<h4 id=\"2-1-发布者（发布消息）\"><a href=\"#2-1-发布者（发布消息）\" class=\"headerlink\" title=\"2.1 发布者（发布消息）\"></a>2.1 发布者（发布消息）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">public class RedisPublisher &#123;</span><br><span class=\"line\">    private Jedis jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">    public RedisPublisher(String host, int port) &#123;</span><br><span class=\"line\">        this.jedis = new Jedis(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void publish(String channel, String message) &#123;</span><br><span class=\"line\">        jedis.publish(channel, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void close() &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-订阅者（接收消息）\"><a href=\"#2-2-订阅者（接收消息）\" class=\"headerlink\" title=\"2.2 订阅者（接收消息）\"></a>2.2 订阅者（接收消息）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\">import redis.clients.jedis.JedisPubSub;</span><br><span class=\"line\"></span><br><span class=\"line\">public class RedisSubscriber &#123;</span><br><span class=\"line\">    private Jedis jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">    public RedisSubscriber(String host, int port) &#123;</span><br><span class=\"line\">        this.jedis = new Jedis(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void subscribe(String channel, JedisPubSub jedisPubSub) &#123;</span><br><span class=\"line\">        jedis.subscribe(jedisPubSub, channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void close() &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-使用Redisson库\"><a href=\"#3-使用Redisson库\" class=\"headerlink\" title=\"3. 使用Redisson库\"></a>3. 使用Redisson库</h3><p>Redisson是一个功能丰富的Redis Java客户端，提供了更高层次的抽象，包括消息队列、分布式锁等。</p>\n<h4 id=\"3-1-添加依赖\"><a href=\"#3-1-添加依赖\" class=\"headerlink\" title=\"3.1 添加依赖\"></a>3.1 添加依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.redisson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>redisson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.17.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>运行 HTML</p>\n<h4 id=\"3-2-生产者和消费者\"><a href=\"#3-2-生产者和消费者\" class=\"headerlink\" title=\"3.2 生产者和消费者\"></a>3.2 生产者和消费者</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.redisson.Redisson;</span><br><span class=\"line\">import org.redisson.api.RQueue;</span><br><span class=\"line\">import org.redisson.api.RedissonClient;</span><br><span class=\"line\">import org.redisson.config.Config;</span><br><span class=\"line\"></span><br><span class=\"line\">public class RedissonQueueExample &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Config config = new Config();</span><br><span class=\"line\">        config.useSingleServer().setAddress(&quot;redis://127.0.0.1:6379&quot;);</span><br><span class=\"line\">        RedissonClient redisson = Redisson.create(config);</span><br><span class=\"line\"></span><br><span class=\"line\">        RQueue&lt;String&gt; queue = redisson.getQueue(&quot;myQueue&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 生产者</span><br><span class=\"line\">        new Thread(() -&gt; &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">                queue.offer(&quot;Message &quot; + i);</span><br><span class=\"line\">                System.out.println(&quot;Produced: Message &quot; + i);</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    Thread.sleep(1000);</span><br><span class=\"line\">                &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 消费者</span><br><span class=\"line\">        new Thread(() -&gt; &#123;</span><br><span class=\"line\">            while (true) &#123;</span><br><span class=\"line\">                String message = queue.poll();</span><br><span class=\"line\">                if (message != null) &#123;</span><br><span class=\"line\">                    System.out.println(&quot;Consumed: &quot; + message);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        Thread.sleep(1000);</span><br><span class=\"line\">                    &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        redisson.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong>List</strong>：适用于简单的队列场景，支持阻塞式操作。</li>\n<li><strong>Pub&#x2F;Sub</strong>：适用于发布订阅场景，适合一对多的消息分发。</li>\n<li><strong>Redisson</strong>：提供了更高级的抽象，适合复杂的分布式应用场景。</li>\n</ul>\n<p>选择哪种方式取决于你的具体需求。如果需要可靠的消息传递和队列功能，建议使用<code>List</code>​或Redisson的队列实现。</p>\n<p>但是还是存在缺点，redis不存在消息确认机制，所以还得再优化一下。</p>\n<p>‍</p>\n<p>‍</p>\n<h2 id=\"Redis-作为消息队列-消息确认机制\"><a href=\"#Redis-作为消息队列-消息确认机制\" class=\"headerlink\" title=\"Redis 作为消息队列+消息确认机制\"></a>Redis 作为消息队列+消息确认机制</h2><p>为了在使用 Redis 作为消息队列的基础上加上消息确认机制，我们可以采用以下方案：</p>\n<h3 id=\"方案概述\"><a href=\"#方案概述\" class=\"headerlink\" title=\"方案概述\"></a>方案概述</h3><ol>\n<li><strong>生产者</strong>：将消息放入 <code>queue:待处理</code>​ 列表。</li>\n<li><strong>消费者</strong>：使用 Lua 脚本原子地将消息从 <code>queue:待处理</code>​ 移动到 <code>queue:正在处理</code>​，并记录处理开始时间。</li>\n<li><strong>消息处理</strong>：消费者处理消息，处理完成后从 <code>queue:正在处理</code>​ 删除消息，并删除处理记录。</li>\n<li><strong>故障处理</strong>：如果处理失败，可以选择不删除消息，或者将其重新放入 <code>queue:待处理</code>​。</li>\n<li><strong>定时检查</strong>：使用定时任务检查 <code>queue:正在处理</code>​ 中的消息，如果超过阈值时间未处理完成，则重新放入 <code>queue:待处理</code>​。</li>\n</ol>\n<h3 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><h4 id=\"1-生产者代码\"><a href=\"#1-生产者代码\" class=\"headerlink\" title=\"1. 生产者代码\"></a>1. 生产者代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisProducer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Jedis jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RedisProducer</span><span class=\"params\">(String host, <span class=\"type\">int</span> port)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.jedis = <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">produce</span><span class=\"params\">(String queueName, String message)</span> &#123;</span><br><span class=\"line\">        jedis.lpush(queueName, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-消费者代码\"><a href=\"#2-消费者代码\" class=\"headerlink\" title=\"2. 消费者代码\"></a>2. 消费者代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Scripting;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConsumer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Jedis jedis;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">moveScript</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;local message = redis.call(&#x27;RPOP&#x27;, KEYS[1]); if message then redis.call(&#x27;LPUSH&#x27;, KEYS[2], message); end; return message;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RedisConsumer</span><span class=\"params\">(String host, <span class=\"type\">int</span> port)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.jedis = <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">consume</span><span class=\"params\">(String待处理Queue, String正在处理Queue)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> (String) jedis.eval(moveScript, <span class=\"number\">2</span>,待处理Queue,正在处理Queue);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            jedis.hset(<span class=\"string\">&quot;hash:正在处理&quot;</span>, message, String.valueOf(System.currentTimeMillis()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">confirm</span><span class=\"params\">(String正在处理Queue, String message)</span> &#123;</span><br><span class=\"line\">        jedis.lrem(正在处理Queue, <span class=\"number\">0</span>, message);</span><br><span class=\"line\">        jedis.hdel(<span class=\"string\">&quot;hash:正在处理&quot;</span>, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-定时检查任务\"><a href=\"#3-定时检查任务\" class=\"headerlink\" title=\"3. 定时检查任务\"></a>3. 定时检查任务</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MessageMonitor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Jedis jedis;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"variable\">threshold</span> <span class=\"operator\">=</span> <span class=\"number\">60000</span>; <span class=\"comment\">// 1分钟</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MessageMonitor</span><span class=\"params\">(String host, <span class=\"type\">int</span> port)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.jedis = <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(host, port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkMessages</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Set&lt;String&gt; messages = jedis.hkeys(<span class=\"string\">&quot;hash:正在处理&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String message : messages) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">startTime</span> <span class=\"operator\">=</span> Long.parseLong(jedis.hget(<span class=\"string\">&quot;hash:正在处理&quot;</span>, message));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().getTime() - startTime &gt; threshold) &#123;</span><br><span class=\"line\">                jedis.lpush(<span class=\"string\">&quot;queue:待处理&quot;</span>, message);</span><br><span class=\"line\">                jedis.hdel(<span class=\"string\">&quot;hash:正在处理&quot;</span>, message);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">scheduleCheck</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ScheduledThreadPoolExecutor</span>(<span class=\"number\">1</span>).scheduleAtFixedRate(() -&gt; checkMessages(), <span class=\"number\">0</span>, <span class=\"number\">30</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        jedis.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码说明\"><a href=\"#代码说明\" class=\"headerlink\" title=\"代码说明\"></a>代码说明</h3><ul>\n<li><p><strong>生产者</strong>：将消息放入 <code>queue:待处理</code>​ 列表。</p>\n</li>\n<li><p><strong>消费者</strong>：</p>\n<ul>\n<li>使用 Lua 脚本原子地将消息从 <code>queue:待处理</code>​ 移动到 <code>queue:正在处理</code>​。</li>\n<li>记录消息处理开始时间到 <code>hash:正在处理</code>​。</li>\n<li>处理消息后，调用 <code>confirm</code>​ 方法删除消息和处理记录。</li>\n</ul>\n</li>\n<li><p><strong>定时检查任务</strong>：</p>\n<ul>\n<li>每 30 秒检查一次 <code>hash:正在处理</code>​ 中的消息。</li>\n<li>如果消息处理时间超过阈值（例如 1 分钟），将其重新放入 <code>queue:待处理</code>​。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li><strong>原子操作</strong>：使用 Lua 脚本确保消息移动的原子性。</li>\n<li><strong>故障 tolerance</strong>：通过定时检查任务，确保消息不会永久卡在 <code>queue:正在处理</code>​ 中。</li>\n<li><strong>消息不丢失</strong>：处理失败的消息会重新进入待处理队列。</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li><strong>复杂性</strong>：需要额外的逻辑来处理消息确认和故障恢复。</li>\n<li><strong>性能开销</strong>：定时任务和哈希表操作可能增加系统负载。</li>\n</ul>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>通过上述方案，我们实现了基于 Redis 的消息队列的消息确认机制，确保消息的可靠传递和处理。虽然实现较为复杂，但在 Redis 作为消息队列的场景下，这是一个可行的解决方案。</p>\n<p>‍</p>\n<p>‍</p>\n"},{"title":"yum源更换","date":"2024-12-19T01:56:33.000Z","updated":"2024-12-22T11:39:15.000Z","excerpt":"yum源更换","comments":1,"toc":true,"abbrlink":30940,"_content":"\n# yum源更换\n\n# yum源更换\n\n### 概括\n\n1.备份\n\n2.下载新的CentOs-Base.repo\n\n3.yum makecache生成缓存\n\n4.更换DNS，重启Centos\n\n### 1、备份\n\n将原本的/etc/yum.repos.d/CentOS-Base.repo 文件备份，命令如下：\n\n```shell\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n```\n\n### 2、下载新的CentOs-Base.repo\n\n下载新的CentOS-Base.repo 到/etc/yum.repos.d/ ，命令如下：\n\n```shell\n# CentOS 6 下载链接\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\n# CentOS 7 下载链接\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n```\n\n### 3、yum makecache生成缓存\n\n重新生成缓存，更换新的yum.repos.d/CentOS-Base.repo，命令如下：\n\n```shell\nyum makecache\n```\n\n### 4、更换DNS，重启Centos\n\n建议更换一下DNS，然后重启一下哦 DNS推荐《[一些好用的DNS服务器](https://link.zhihu.com/?target=http%3A//blog.yxccan.cn/blog/detail/17)》 选择阿里的DNS可以比较有效加速\n\n```shell\nshutdown -r now\n```\n\n### 总结\n\n1.备份\n\n2.下载新的CentOs-Base.repo\n\n3.yum makecache生成缓存\n\n4.重启Centos\n","source":"_posts/yum-source-replacement-1jg9tx.md","raw":"---\ntitle: yum源更换\ndate: '2024-12-19 09:56:33'\nupdated: '2024-12-22 19:39:15'\nexcerpt: yum源更换\ntags:\n  - yum源更换\ncategories:\n  - linux\npermalink: /post/yum-source-replacement-1jg9tx.html\ncomments: true\ntoc: true\nabbrlink: 30940\n---\n\n# yum源更换\n\n# yum源更换\n\n### 概括\n\n1.备份\n\n2.下载新的CentOs-Base.repo\n\n3.yum makecache生成缓存\n\n4.更换DNS，重启Centos\n\n### 1、备份\n\n将原本的/etc/yum.repos.d/CentOS-Base.repo 文件备份，命令如下：\n\n```shell\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n```\n\n### 2、下载新的CentOs-Base.repo\n\n下载新的CentOS-Base.repo 到/etc/yum.repos.d/ ，命令如下：\n\n```shell\n# CentOS 6 下载链接\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\n# CentOS 7 下载链接\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n```\n\n### 3、yum makecache生成缓存\n\n重新生成缓存，更换新的yum.repos.d/CentOS-Base.repo，命令如下：\n\n```shell\nyum makecache\n```\n\n### 4、更换DNS，重启Centos\n\n建议更换一下DNS，然后重启一下哦 DNS推荐《[一些好用的DNS服务器](https://link.zhihu.com/?target=http%3A//blog.yxccan.cn/blog/detail/17)》 选择阿里的DNS可以比较有效加速\n\n```shell\nshutdown -r now\n```\n\n### 总结\n\n1.备份\n\n2.下载新的CentOs-Base.repo\n\n3.yum makecache生成缓存\n\n4.重启Centos\n","slug":"yum-source-replacement-1jg9tx","published":1,"__permalink":"/post/yum-source-replacement-1jg9tx.html","_id":"cmck5582h000vssvw5raogrv5","layout":"post","photos":[],"content":"<h1 id=\"yum源更换\"><a href=\"#yum源更换\" class=\"headerlink\" title=\"yum源更换\"></a>yum源更换</h1><h1 id=\"yum源更换-1\"><a href=\"#yum源更换-1\" class=\"headerlink\" title=\"yum源更换\"></a>yum源更换</h1><h3 id=\"概括\"><a href=\"#概括\" class=\"headerlink\" title=\"概括\"></a>概括</h3><p>1.备份</p>\n<p>2.下载新的CentOs-Base.repo</p>\n<p>3.yum makecache生成缓存</p>\n<p>4.更换DNS，重启Centos</p>\n<h3 id=\"1、备份\"><a href=\"#1、备份\" class=\"headerlink\" title=\"1、备份\"></a>1、备份</h3><p>将原本的&#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo 文件备份，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、下载新的CentOs-Base-repo\"><a href=\"#2、下载新的CentOs-Base-repo\" class=\"headerlink\" title=\"2、下载新的CentOs-Base.repo\"></a>2、下载新的CentOs-Base.repo</h3><p>下载新的CentOS-Base.repo 到&#x2F;etc&#x2F;yum.repos.d&#x2F; ，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">CentOS 6 下载链接</span></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">CentOS 7 下载链接</span></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、yum-makecache生成缓存\"><a href=\"#3、yum-makecache生成缓存\" class=\"headerlink\" title=\"3、yum makecache生成缓存\"></a>3、yum makecache生成缓存</h3><p>重新生成缓存，更换新的yum.repos.d&#x2F;CentOS-Base.repo，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、更换DNS，重启Centos\"><a href=\"#4、更换DNS，重启Centos\" class=\"headerlink\" title=\"4、更换DNS，重启Centos\"></a>4、更换DNS，重启Centos</h3><p>建议更换一下DNS，然后重启一下哦 DNS推荐《<a href=\"https://link.zhihu.com/?target=http://blog.yxccan.cn/blog/detail/17\">一些好用的DNS服务器</a>》 选择阿里的DNS可以比较有效加速</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutdown -r now</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>1.备份</p>\n<p>2.下载新的CentOs-Base.repo</p>\n<p>3.yum makecache生成缓存</p>\n<p>4.重启Centos</p>\n","cover":false,"more":"<h1 id=\"yum源更换\"><a href=\"#yum源更换\" class=\"headerlink\" title=\"yum源更换\"></a>yum源更换</h1><h1 id=\"yum源更换-1\"><a href=\"#yum源更换-1\" class=\"headerlink\" title=\"yum源更换\"></a>yum源更换</h1><h3 id=\"概括\"><a href=\"#概括\" class=\"headerlink\" title=\"概括\"></a>概括</h3><p>1.备份</p>\n<p>2.下载新的CentOs-Base.repo</p>\n<p>3.yum makecache生成缓存</p>\n<p>4.更换DNS，重启Centos</p>\n<h3 id=\"1、备份\"><a href=\"#1、备份\" class=\"headerlink\" title=\"1、备份\"></a>1、备份</h3><p>将原本的&#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo 文件备份，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、下载新的CentOs-Base-repo\"><a href=\"#2、下载新的CentOs-Base-repo\" class=\"headerlink\" title=\"2、下载新的CentOs-Base.repo\"></a>2、下载新的CentOs-Base.repo</h3><p>下载新的CentOS-Base.repo 到&#x2F;etc&#x2F;yum.repos.d&#x2F; ，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">CentOS 6 下载链接</span></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">CentOS 7 下载链接</span></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、yum-makecache生成缓存\"><a href=\"#3、yum-makecache生成缓存\" class=\"headerlink\" title=\"3、yum makecache生成缓存\"></a>3、yum makecache生成缓存</h3><p>重新生成缓存，更换新的yum.repos.d&#x2F;CentOS-Base.repo，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、更换DNS，重启Centos\"><a href=\"#4、更换DNS，重启Centos\" class=\"headerlink\" title=\"4、更换DNS，重启Centos\"></a>4、更换DNS，重启Centos</h3><p>建议更换一下DNS，然后重启一下哦 DNS推荐《<a href=\"https://link.zhihu.com/?target=http://blog.yxccan.cn/blog/detail/17\">一些好用的DNS服务器</a>》 选择阿里的DNS可以比较有效加速</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutdown -r now</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>1.备份</p>\n<p>2.下载新的CentOs-Base.repo</p>\n<p>3.yum makecache生成缓存</p>\n<p>4.重启Centos</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm4zhl9ar0005n1bm544hdq39","category_id":"cm4zhl9at0008n1bm9v9y2817","_id":"cm4zhl9b2000on1bm6w6b5oiz"},{"post_id":"cm4zhl9ar0005n1bm544hdq39","category_id":"cm4zhl9ay000en1bm9hvi4q53","_id":"cm4zhl9b2000rn1bmf76ycb2c"},{"post_id":"cm4zhl9ar0005n1bm544hdq39","category_id":"cm4zhl9az000in1bm84ruccmq","_id":"cm4zhl9b2000tn1bm7sxxh6jq"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","category_id":"cm4zhl9ax000cn1bmhzgy7yrk","_id":"cm4zhl9b3000wn1bm703cfyrt"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","category_id":"cm4zhl9az000gn1bmb3e876ke","_id":"cm4zhl9b3000xn1bm530bggcc"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","category_id":"cm4zhl9b0000kn1bm7la0fc0z","_id":"cm4zhl9b3000zn1bmc64pghjq"},{"post_id":"cmck5581q0001ssvw7qpse4em","category_id":"cmck558200005ssvwhocb9zuv","_id":"cmck55827000bssvwbfo6drgg"},{"post_id":"cmck5581y0004ssvwhiwhbry8","category_id":"cmck558220008ssvw9f613z7i","_id":"cmck5582i000wssvw09fl3q8g"},{"post_id":"cmck5581y0004ssvwhiwhbry8","category_id":"cmck5582d000lssvwbyqf1i8x","_id":"cmck5582i0010ssvw54syf9xc"},{"post_id":"cmck5581n0000ssvwgej52cq4","category_id":"cmck5581t0002ssvw4rtoelqr","_id":"cmck5582j0017ssvwd30raksm"},{"post_id":"cmck5581n0000ssvwgej52cq4","category_id":"cmck55827000cssvw2qy724i0","_id":"cmck5582k001bssvwbvwe6ayk"},{"post_id":"cmck5581n0000ssvwgej52cq4","category_id":"cmck5582i0011ssvwbguf2ys5","_id":"cmck5582k001dssvw4tlh784z"},{"post_id":"cmck5582f000pssvwh6cr4elk","category_id":"cmck5582l001issvwdmuxefwp","_id":"cmck5582n001ossvw7yvobwoq"},{"post_id":"cmck5582h000vssvw5raogrv5","category_id":"cmck5582n001tssvw5ca3corf","_id":"cmck5582p001yssvwa3pk971l"},{"post_id":"cmck558210007ssvwarzya114","category_id":"cmck5582a000gssvw0q1n7ssu","_id":"cmck5582t002cssvwg70l437t"},{"post_id":"cmck558210007ssvwarzya114","category_id":"cmck5582k001essvwg22cbihx","_id":"cmck5582t002fssvwbdy57l12"},{"post_id":"cmck558210007ssvwarzya114","category_id":"cmck5582s0027ssvwew6yhgbr","_id":"cmck5582t002gssvwh4agf8yk"},{"post_id":"cmck5582d000kssvw59m4ehih","category_id":"cmck5582k001gssvwfoh53qt2","_id":"cmck5582u002jssvw748cegui"},{"post_id":"cmck5582d000kssvw59m4ehih","category_id":"cmck5582s002assvwcbgr6ojo","_id":"cmck5582u002lssvw0wiucd6o"},{"post_id":"cmck55828000essvw10zxa4nn","category_id":"cmck5582g000qssvw7szkfohh","_id":"cmck5582v002rssvw7ocq8k18"},{"post_id":"cmck55828000essvw10zxa4nn","category_id":"cmck5582n001pssvw3o4t3x4m","_id":"cmck5582w002vssvw4r71e7zc"},{"post_id":"cmck55828000essvw10zxa4nn","category_id":"cmck5582t002hssvwcm8fhqbg","_id":"cmck5582w002wssvw2quv5spt"},{"post_id":"cmck55829000fssvw4a93aqpq","category_id":"cmck5582i000xssvw5vrw6lo4","_id":"cmck5582x002zssvwanmm6ti8"},{"post_id":"cmck55829000fssvw4a93aqpq","category_id":"cmck5582o001wssvwhcvc70f3","_id":"cmck5582x0030ssvw65hv56x8"},{"post_id":"cmck55829000fssvw4a93aqpq","category_id":"cmck5582u002nssvw4hqcg4s1","_id":"cmck5582y0033ssvw0ckl22hh"},{"post_id":"cmck5582b000issvw7ekc2kx8","category_id":"cmck5582j0013ssvw27f390gd","_id":"cmck5582y0034ssvw56fg4p4a"},{"post_id":"cmck5582b000issvw7ekc2kx8","category_id":"cmck5582p001zssvw2bhr4fz0","_id":"cmck5582y0036ssvw40bi0c2k"},{"post_id":"cmck5582b000issvw7ekc2kx8","category_id":"cmck5582v002sssvw6wdka9ob","_id":"cmck5582y0038ssvw52mhcju9"},{"post_id":"cmck5582c000jssvw0t4v4t69","category_id":"cmck5582j0018ssvw89va0m2l","_id":"cmck5582z003assvw8f2j3121"},{"post_id":"cmck5582c000jssvw0t4v4t69","category_id":"cmck5582q0023ssvw3mfshj47","_id":"cmck5582z003dssvw3qlcc1k8"},{"post_id":"cmck5582c000jssvw0t4v4t69","category_id":"cmck5582x002yssvw5d5154mv","_id":"cmck5582z003fssvw5wc9ahmf"},{"post_id":"cmck5582h000tssvwbjqrf1of","category_id":"cmck5582m001kssvw05of6nd5","_id":"cmck5582z003issvw09v88w6r"},{"post_id":"cmck5582h000tssvwbjqrf1of","category_id":"cmck5582t002dssvw712wcqmx","_id":"cmck5582z003jssvw38wp2ib9"},{"post_id":"cmck5582h000tssvwbjqrf1of","category_id":"cmck5582x0032ssvwdb4t0kfo","_id":"cmck55830003lssvw8r0v1z62"}],"PostTag":[{"post_id":"cm4zhl9ar0005n1bm544hdq39","tag_id":"cm4zhl9av0009n1bm6beh9fx0","_id":"cm4zhl9b1000mn1bmbbb57xlg"},{"post_id":"cm4zhl9ar0005n1bm544hdq39","tag_id":"cm4zhl9ax000dn1bmbuou7wrx","_id":"cm4zhl9b2000nn1bm39kvb2yp"},{"post_id":"cm4zhl9ar0005n1bm544hdq39","tag_id":"cm4zhl9ay000fn1bm8fnzfohn","_id":"cm4zhl9b2000qn1bmh41e1u0p"},{"post_id":"cm4zhl9ar0005n1bm544hdq39","tag_id":"cm4zhl9az000hn1bm8cky6oia","_id":"cm4zhl9b2000sn1bm7cz6fwlz"},{"post_id":"cm4zhl9ar0005n1bm544hdq39","tag_id":"cm4zhl9az000jn1bm8404di7i","_id":"cm4zhl9b3000vn1bm7cl91jm8"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","tag_id":"cm4zhl9av0009n1bm6beh9fx0","_id":"cm4zhl9b40011n1bm0kc99edd"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","tag_id":"cm4zhl9b2000pn1bm72hh2kib","_id":"cm4zhl9b40012n1bm0qlu3ywn"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","tag_id":"cm4zhl9b2000un1bm24as3et8","_id":"cm4zhl9b40013n1bmdm2qeimx"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","tag_id":"cm4zhl9b3000yn1bme2xbe0ia","_id":"cm4zhl9b40014n1bmh4yc207o"},{"post_id":"cm4zhl9aw000bn1bm7xaz5i2s","tag_id":"cm4zhl9b30010n1bm52x3dfj9","_id":"cm4zhl9b40015n1bmf0ewbv4x"},{"post_id":"cmck5581n0000ssvwgej52cq4","tag_id":"cmck5581w0003ssvwa9ez0jap","_id":"cmck5582e000nssvwedechi13"},{"post_id":"cmck5581n0000ssvwgej52cq4","tag_id":"cmck558200006ssvwafqxcua1","_id":"cmck5582f000ossvwh2q63aii"},{"post_id":"cmck5581n0000ssvwgej52cq4","tag_id":"cmck558230009ssvwdx5q2qh2","_id":"cmck5582g000sssvw4gbk7d06"},{"post_id":"cmck5581n0000ssvwgej52cq4","tag_id":"cmck55828000dssvwgja80p7l","_id":"cmck5582h000ussvw68cu649y"},{"post_id":"cmck5581n0000ssvwgej52cq4","tag_id":"cmck5582b000hssvw5jj76q7z","_id":"cmck5582i000zssvwe7jf0vaz"},{"post_id":"cmck5581q0001ssvw7qpse4em","tag_id":"cmck5582d000mssvw12mzb8e2","_id":"cmck5582j0015ssvwc6s81932"},{"post_id":"cmck5581q0001ssvw7qpse4em","tag_id":"cmck5582g000rssvw9g5s4epi","_id":"cmck5582j0016ssvw3dhk7udi"},{"post_id":"cmck5581q0001ssvw7qpse4em","tag_id":"cmck5582i000yssvwd9dgcvmz","_id":"cmck5582k001assvwhfluhy9o"},{"post_id":"cmck5581q0001ssvw7qpse4em","tag_id":"cmck5582j0012ssvwbi5vd6eq","_id":"cmck5582k001cssvw3kfv096z"},{"post_id":"cmck5581y0004ssvwhiwhbry8","tag_id":"cmck5582j0014ssvwbuky4tg0","_id":"cmck5582n001mssvwhyki75qc"},{"post_id":"cmck5581y0004ssvwhiwhbry8","tag_id":"cmck5582k0019ssvwgld02hmz","_id":"cmck5582n001nssvwbkdnawcx"},{"post_id":"cmck5581y0004ssvwhiwhbry8","tag_id":"cmck5582k001fssvwf6yscv5r","_id":"cmck5582n001rssvwd5ix7mb6"},{"post_id":"cmck5581y0004ssvwhiwhbry8","tag_id":"cmck5582l001hssvwfje5fkhn","_id":"cmck5582n001sssvwgy15h3mv"},{"post_id":"cmck5581y0004ssvwhiwhbry8","tag_id":"cmck5582l001jssvw248x3llg","_id":"cmck5582o001vssvw3we7add6"},{"post_id":"cmck558210007ssvwarzya114","tag_id":"cm4zhl9av0009n1bm6beh9fx0","_id":"cmck5582q0021ssvwgxu7chj5"},{"post_id":"cmck558210007ssvwarzya114","tag_id":"cmck5582m001lssvw9f9s4h6p","_id":"cmck5582q0022ssvwdvbb4f7c"},{"post_id":"cmck558210007ssvwarzya114","tag_id":"cmck5582n001qssvwdem83b1m","_id":"cmck5582s0025ssvwa0xm1h7t"},{"post_id":"cmck558210007ssvwarzya114","tag_id":"cmck5582o001ussvw60rkdjjr","_id":"cmck5582s0026ssvweeme3ldd"},{"post_id":"cmck558210007ssvwarzya114","tag_id":"cmck5582p001xssvw36ee7gc2","_id":"cmck5582s0029ssvwd9y8gi20"},{"post_id":"cmck55826000assvw9briesdq","tag_id":"cmck5582q0020ssvw37lucobb","_id":"cmck5582u002kssvwahv0fuj3"},{"post_id":"cmck55826000assvw9briesdq","tag_id":"cmck5582r0024ssvw59f9gp5y","_id":"cmck5582u002mssvwblqg3h5j"},{"post_id":"cmck55826000assvw9briesdq","tag_id":"cmck5582s0028ssvw8ynkfu7o","_id":"cmck5582u002pssvwb9cye20f"},{"post_id":"cmck55826000assvw9briesdq","tag_id":"cmck5582t002bssvwbeb76nar","_id":"cmck5582u002qssvw4vj339xm"},{"post_id":"cmck55826000assvw9briesdq","tag_id":"cmck5582t002essvw6ke2fbtw","_id":"cmck5582w002ussvw1bis7wcg"},{"post_id":"cmck55828000essvw10zxa4nn","tag_id":"cmck5582t002issvw28ic6mmv","_id":"cmck5582y0037ssvw9h1b9hkm"},{"post_id":"cmck55828000essvw10zxa4nn","tag_id":"cmck5582u002ossvw1vi58ohr","_id":"cmck5582z0039ssvwcznzehbp"},{"post_id":"cmck55828000essvw10zxa4nn","tag_id":"cmck5582n001qssvwdem83b1m","_id":"cmck5582z003cssvw72pabish"},{"post_id":"cmck55828000essvw10zxa4nn","tag_id":"cmck5582x002xssvw3fia0wun","_id":"cmck5582z003essvwdt52a6u3"},{"post_id":"cmck55828000essvw10zxa4nn","tag_id":"cmck5582x0031ssvw83mccg8d","_id":"cmck5582z003hssvwfmptb5vh"},{"post_id":"cmck55829000fssvw4a93aqpq","tag_id":"cmck5582y0035ssvweq29e8tb","_id":"cmck55830003ossvwe74s2men"},{"post_id":"cmck55829000fssvw4a93aqpq","tag_id":"cmck5582z003bssvw356w0vn7","_id":"cmck55830003pssvw121q3dim"},{"post_id":"cmck55829000fssvw4a93aqpq","tag_id":"cmck5582z003gssvw0f4nhyvl","_id":"cmck55831003rssvw9hul90cu"},{"post_id":"cmck55829000fssvw4a93aqpq","tag_id":"cmck55830003kssvwc8al71re","_id":"cmck55831003sssvw6v6rb6yf"},{"post_id":"cmck55829000fssvw4a93aqpq","tag_id":"cmck55830003mssvw4hoa9os4","_id":"cmck55831003ussvwaw760egz"},{"post_id":"cmck5582b000issvw7ekc2kx8","tag_id":"cmck55830003nssvwa7kodg7q","_id":"cmck55832003xssvw7zs6169c"},{"post_id":"cmck5582b000issvw7ekc2kx8","tag_id":"cm4zhl9ax000dn1bmbuou7wrx","_id":"cmck55832003yssvw2lszhg57"},{"post_id":"cmck5582b000issvw7ekc2kx8","tag_id":"cmck55830003qssvwev694wqo","_id":"cmck558330040ssvw7dbb4juk"},{"post_id":"cmck5582b000issvw7ekc2kx8","tag_id":"cmck55831003tssvwhi9z7vfy","_id":"cmck558330041ssvw2z75bvs8"},{"post_id":"cmck5582b000issvw7ekc2kx8","tag_id":"cmck55831003vssvw75mq79yq","_id":"cmck558330043ssvwfyjwd2x3"},{"post_id":"cmck5582c000jssvw0t4v4t69","tag_id":"cmck55831003wssvwfkb68u5q","_id":"cmck558340047ssvw52s20r1d"},{"post_id":"cmck5582c000jssvw0t4v4t69","tag_id":"cmck55832003zssvw3nomgg33","_id":"cmck558340048ssvwf1dm5por"},{"post_id":"cmck5582c000jssvw0t4v4t69","tag_id":"cmck558330042ssvwdak5frwo","_id":"cmck55835004assvwbhn86emq"},{"post_id":"cmck5582c000jssvw0t4v4t69","tag_id":"cmck558330044ssvwepv70gbu","_id":"cmck55835004bssvwf0x6h2qu"},{"post_id":"cmck5582c000jssvw0t4v4t69","tag_id":"cmck558340045ssvw3j2p048p","_id":"cmck55835004dssvw4zveebi2"},{"post_id":"cmck5582d000kssvw59m4ehih","tag_id":"cmck558340046ssvwfoy11mtv","_id":"cmck55836004hssvwbn05719k"},{"post_id":"cmck5582d000kssvw59m4ehih","tag_id":"cmck558340049ssvwfjn3fbjr","_id":"cmck55836004issvw0b8f5grn"},{"post_id":"cmck5582d000kssvw59m4ehih","tag_id":"cmck55835004cssvwgny1elxl","_id":"cmck55837004kssvw6xz15exd"},{"post_id":"cmck5582d000kssvw59m4ehih","tag_id":"cmck55835004essvw1ehd5mgy","_id":"cmck55837004lssvw8cif50cm"},{"post_id":"cmck5582d000kssvw59m4ehih","tag_id":"cmck55835004fssvwes0fchkz","_id":"cmck55837004nssvw93updiwq"},{"post_id":"cmck5582f000pssvwh6cr4elk","tag_id":"cmck55836004gssvwb7sdb6t8","_id":"cmck55839004rssvw221u0273"},{"post_id":"cmck5582f000pssvwh6cr4elk","tag_id":"cmck55836004jssvwdcgz6lk9","_id":"cmck55839004sssvw66nahqb8"},{"post_id":"cmck5582f000pssvwh6cr4elk","tag_id":"cmck55837004mssvwf9fka172","_id":"cmck55839004ussvwh7mc0779"},{"post_id":"cmck5582f000pssvwh6cr4elk","tag_id":"cmck55837004ossvw37eg5nq1","_id":"cmck5583a004vssvwemjd6cgm"},{"post_id":"cmck5582f000pssvwh6cr4elk","tag_id":"cmck55838004pssvw66ky2niv","_id":"cmck5583b004xssvw9foj1yvo"},{"post_id":"cmck5582h000tssvwbjqrf1of","tag_id":"cmck55838004qssvw7xijcrp5","_id":"cmck5583c0051ssvwhxq8enee"},{"post_id":"cmck5582h000tssvwbjqrf1of","tag_id":"cmck55839004tssvwenhq6cdq","_id":"cmck5583c0052ssvwabi1gpez"},{"post_id":"cmck5582h000tssvwbjqrf1of","tag_id":"cmck5583a004wssvwhegv3fkp","_id":"cmck5583c0053ssvw5afgcftk"},{"post_id":"cmck5582h000tssvwbjqrf1of","tag_id":"cmck5583b004yssvw4gu25hnn","_id":"cmck5583c0054ssvwgbhs0wf8"},{"post_id":"cmck5582h000tssvwbjqrf1of","tag_id":"cmck5583b004zssvwd5u5af7p","_id":"cmck5583c0055ssvw1r5u7y36"},{"post_id":"cmck5582h000vssvw5raogrv5","tag_id":"cmck5583b0050ssvwb14420tj","_id":"cmck5583c0056ssvwgjrvf35c"}],"Tag":[{"name":"nginx","_id":"cm4zhl9av0009n1bm6beh9fx0"},{"name":"docker","_id":"cm4zhl9ax000dn1bmbuou7wrx"},{"name":"源码部署","_id":"cm4zhl9ay000fn1bm8fnzfohn"},{"name":"包管理","_id":"cm4zhl9az000hn1bm8cky6oia"},{"name":"开机自启","_id":"cm4zhl9az000jn1bm8404di7i"},{"name":"tcp代理","_id":"cm4zhl9b2000pn1bm72hh2kib"},{"name":"配置指南","_id":"cm4zhl9b2000un1bm24as3et8"},{"name":"负载均衡","_id":"cm4zhl9b3000yn1bme2xbe0ia"},{"name":"性能监控","_id":"cm4zhl9b30010n1bm52x3dfj9"},{"name":"spring事务","_id":"cmck5581w0003ssvwa9ez0jap"},{"name":"异步操作","_id":"cmck558200006ssvwafqxcua1"},{"name":"事务提交","_id":"cmck558230009ssvwdx5q2qh2"},{"name":"编程技巧","_id":"cmck55828000dssvwgja80p7l"},{"name":"java开发","_id":"cmck5582b000hssvw5jj76q7z"},{"name":"计算机状态","_id":"cmck5582d000mssvw12mzb8e2"},{"name":"电源管理","_id":"cmck5582g000rssvw9g5s4epi"},{"name":"S3睡眠","_id":"cmck5582i000yssvwd9dgcvmz"},{"name":"S4休眠","_id":"cmck5582j0012ssvwbi5vd6eq"},{"name":"Java","_id":"cmck5582j0014ssvwbuky4tg0"},{"name":"List","_id":"cmck5582k0019ssvwgld02hmz"},{"name":"分片","_id":"cmck5582k001fssvwf6yscv5r"},{"name":"分组","_id":"cmck5582l001hssvwfje5fkhn"},{"name":"工具类","_id":"cmck5582l001jssvw248x3llg"},{"name":"rtsp","_id":"cmck5582m001lssvw9f9s4h6p"},{"name":"配置","_id":"cmck5582n001qssvwdem83b1m"},{"name":"流媒体","_id":"cmck5582o001ussvw60rkdjjr"},{"name":"认证","_id":"cmck5582p001xssvw36ee7gc2"},{"name":"端口占用","_id":"cmck5582q0020ssvw37lucobb"},{"name":"错误处理","_id":"cmck5582r0024ssvw59f9gp5y"},{"name":"Windows","_id":"cmck5582s0028ssvw8ynkfu7o"},{"name":"Linux","_id":"cmck5582t002bssvwbeb76nar"},{"name":"进程管理","_id":"cmck5582t002essvw6ke2fbtw"},{"name":"Nginx","_id":"cmck5582t002issvw28ic6mmv"},{"name":"WebDAV","_id":"cmck5582u002ossvw1vi58ohr"},{"name":"安全","_id":"cmck5582x002xssvw3fia0wun"},{"name":"服务","_id":"cmck5582x0031ssvw83mccg8d"},{"name":"复制组件","_id":"cmck5582y0035ssvweq29e8tb"},{"name":"vue","_id":"cmck5582z003bssvw356w0vn7"},{"name":"element-plus","_id":"cmck5582z003gssvw0f4nhyvl"},{"name":"剪贴板","_id":"cmck55830003kssvwc8al71re"},{"name":"国际化","_id":"cmck55830003mssvw4hoa9os4"},{"name":"思源笔记","_id":"cmck55830003nssvwa7kodg7q"},{"name":"一键部署","_id":"cmck55830003qssvwev694wqo"},{"name":"云备份","_id":"cmck55831003tssvwhi9z7vfy"},{"name":"解锁版","_id":"cmck55831003vssvw75mq79yq"},{"name":"springboot","_id":"cmck55831003wssvwfkb68u5q"},{"name":"本地jar","_id":"cmck55832003zssvw3nomgg33"},{"name":"maven","_id":"cmck558330042ssvwdak5frwo"},{"name":"依赖管理","_id":"cmck558330044ssvwepv70gbu"},{"name":"项目配置","_id":"cmck558340045ssvw3j2p048p"},{"name":"磁盘测试","_id":"cmck558340046ssvwfoy11mtv"},{"name":"iozone","_id":"cmck558340049ssvwfjn3fbjr"},{"name":"dd命令","_id":"cmck55835004cssvwgny1elxl"},{"name":"文件系统","_id":"cmck55835004essvw1ehd5mgy"},{"name":"性能优化","_id":"cmck55835004fssvwes0fchkz"},{"name":"mybatis-plus","_id":"cmck55836004gssvwb7sdb6t8"},{"name":"in语法","_id":"cmck55836004jssvwdcgz6lk9"},{"name":"查询","_id":"cmck55837004mssvwf9fka172"},{"name":"空列表处理","_id":"cmck55837004ossvw37eg5nq1"},{"name":"lambda","_id":"cmck55838004pssvw66ky2niv"},{"name":"redis","_id":"cmck55838004qssvw7xijcrp5"},{"name":"消息队列","_id":"cmck55839004tssvwenhq6cdq"},{"name":"java","_id":"cmck5583a004wssvwhegv3fkp"},{"name":"阻塞消费","_id":"cmck5583b004yssvw4gu25hnn"},{"name":"发布订阅","_id":"cmck5583b004zssvwd5u5af7p"},{"name":"yum源更换","_id":"cmck5583b0050ssvwb14420tj"}]}}